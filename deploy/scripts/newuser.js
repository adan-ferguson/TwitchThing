(()=>{"use strict";const t=document.querySelector("body > #loader");class e extends HTMLFormElement{_inputs;_errorMessage;submitButton;constructor(t){super(),t={async:!1,action:"",submitText:"Submit",success:()=>{},customFetch:!1,fullscreenLoading:!1,extraData:{},html:"",...t},this.options=t,this.classList.add("di-form"),this.innerHTML=`\n<div class="inputs">${t.html}</div>\n<div class="bottom">\n  <button type="submit"></button>\n  <div class="error-message hidden"></div>\n</div>\n`,this._inputs=this.querySelector(".inputs"),this.submitButton=this.querySelector("button"),this.submitButton.textContent=t.submitText,this._errorMessage=this.querySelector(".error-message"),t.action&&this.setAttribute("action",t.action),t.async&&this.addEventListener("submit",(async e=>{e.preventDefault(),this._loading();const n=t.action instanceof Function?await t.action():await async function(t,e=null){let n,s;try{const i={method:"post",headers:{"Content-Type":"application/json"}};return e&&(i.body=JSON.stringify(e)),n=await fetch(t,i),s=await n.text(),s?JSON.parse(s):{}}catch(e){return!n||n.status>=400?s?{error:s}:{error:e||`An error occurred during fizzetch of ${t}`}:{}}}(t.action,this.data());this._loadingFinished(),n.error?this.error(n.error):(t.success(n),this.dispatchEvent(new Event("success")))}))}data(){const t=new FormData(this),e={};Array.from(t.entries()).forEach((([t,n])=>e[t]=n));let n=this.options.extraData;return n="function"==typeof n?n():n,n=n||{},{...e,...n}}addInput(t,e=null){const n=document.createElement("input");for(let e in t)n.setAttribute(e,t[e]);this._addInput(n,e)}_addInput(t,e=null){const n=document.createElement("label");if(e){const t=document.createElement("span");t.textContent=e,n.appendChild(t)}n.appendChild(t),this._inputs.appendChild(n)}addSelect(t){t={label:null,name:"",optionsList:[],...t};const e=document.createElement("label");if(e.classList.add("flex-between"),t.label){const n=document.createElement("span");n.textContent=t.label,e.appendChild(n)}const n=document.createElement("select");return n.setAttribute("name",t.name),t.optionsList.forEach((({value:t,name:e})=>{const s=document.createElement("option");s.value=t,s.textContent=e,n.appendChild(s)})),e.appendChild(n),this._inputs.appendChild(e),n}error(t){this._errorMessage.textContent=t,this._errorMessage.classList.remove("hidden")}_loading(){if(this.options.fullscreenLoading)return function(e=""){t.querySelector(".message").textContent=e,t.classList.add("show")}(this.options.fullscreenLoading.message??"");this._errorMessage.classList.add("hidden"),this.submitButton.disabled=!0,this.submitButton.innerHTML='<span class="spin-effect">DI</span>'}_loadingFinished(){this.options.fullscreenLoading?t.classList.remove("show"):(this.submitButton.disabled=!1,this.submitButton.textContent=this.options.submitText)}}customElements.define("di-form",e,{extends:"form"});const n=new e({submitText:"Save"});n.addInput({type:"text",name:"displayname",minLength:2,maxLength:15,required:"required",placeholder:"Choose a username"}),document.querySelector(".new-user-form").appendChild(n),window.ERROR&&n.error(window.ERROR)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,