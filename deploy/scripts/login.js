/*! For license information please see login.js.LICENSE.txt */
(()=>{var e={9145:e=>{function t(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=t,t.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},t.prototype.reset=function(){this.attempts=0},t.prototype.setMin=function(e){this.ms=e},t.prototype.setMax=function(e){this.max=e},t.prototype.setJitter=function(e){this.jitter=e}},5733:(e,t)=>{!function(e){"use strict";t.encode=function(t){var n,r=new Uint8Array(t),i=r.length,o="";for(n=0;n<i;n+=3)o+=e[r[n]>>2],o+=e[(3&r[n])<<4|r[n+1]>>4],o+=e[(15&r[n+1])<<2|r[n+2]>>6],o+=e[63&r[n+2]];return i%3==2?o=o.substring(0,o.length-1)+"=":i%3==1&&(o=o.substring(0,o.length-2)+"=="),o},t.decode=function(t){var n,r,i,o,s,a=.75*t.length,c=t.length,u=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var l=new ArrayBuffer(a),f=new Uint8Array(l);for(n=0;n<c;n+=4)r=e.indexOf(t[n]),i=e.indexOf(t[n+1]),o=e.indexOf(t[n+2]),s=e.indexOf(t[n+3]),f[u++]=r<<2|i>>4,f[u++]=(15&i)<<4|o>>2,f[u++]=(3&o)<<6|63&s;return l}}("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")},745:e=>{function t(e){if(e)return function(e){for(var n in t.prototype)e[n]=t.prototype[n];return e}(e)}e.exports=t,t.prototype.on=t.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},t.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},t.prototype.off=t.prototype.removeListener=t.prototype.removeAllListeners=t.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var i=0;i<r.length;i++)if((n=r[i])===t||n.fn===t){r.splice(i,1);break}return 0===r.length&&delete this._callbacks["$"+e],this},t.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),n=this._callbacks["$"+e],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(n){r=0;for(var i=(n=n.slice(0)).length;r<i;++r)n[r].apply(this,t)}return this},t.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},t.prototype.hasListeners=function(e){return!!this.listeners(e).length}},8678:e=>{e.exports="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},7409:(e,t,n)=>{const r=n(2477);e.exports=(e,t)=>new r(e,t),e.exports.Socket=r,e.exports.protocol=r.protocol,e.exports.Transport=n(8664),e.exports.transports=n(8047),e.exports.parser=n(1804)},2477:(e,t,n)=>{const r=n(8047),i=n(745),o=n(986)("engine.io-client:socket"),s=n(1804),a=n(9026),c=n(5877);class u extends i{constructor(e,t={}){super(),e&&"object"==typeof e&&(t=e,e=null),e?(e=a(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=a(t.host).host),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.transports=t.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,jsonp:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},t),this.opts.path=this.opts.path.replace(/\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=c.decode(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&addEventListener("beforeunload",(()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())}),!1),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close")},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(e){o('creating transport "%s"',e);const t=function(e){const t={};for(let n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(this.opts.query);t.EIO=s.protocol,t.transport=e,this.id&&(t.sid=this.id);const n=Object.assign({},this.opts.transportOptions[e],this.opts,{query:t,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return o("options: %j",n),new r[e](n)}open(){let e;if(this.opts.rememberUpgrade&&u.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length)return void setTimeout((()=>{this.emit("error","No transports available")}),0);e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return o("error while creating transport: %s",e),this.transports.shift(),void this.open()}e.open(),this.setTransport(e)}setTransport(e){o("setting transport %s",e.name),this.transport&&(o("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(()=>{this.onClose("transport close")}))}probe(e){o('probing transport "%s"',e);let t=this.createTransport(e,{probe:1}),n=!1;u.priorWebsocketSuccess=!1;const r=()=>{n||(o('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",(r=>{if(!n)if("pong"===r.type&&"probe"===r.data){if(o('probe transport "%s" pong',e),this.upgrading=!0,this.emit("upgrading",t),!t)return;u.priorWebsocketSuccess="websocket"===t.name,o('pausing current transport "%s"',this.transport.name),this.transport.pause((()=>{n||"closed"!==this.readyState&&(o("changing transport and sending upgrade packet"),f(),this.setTransport(t),t.send([{type:"upgrade"}]),this.emit("upgrade",t),t=null,this.upgrading=!1,this.flush())}))}else{o('probe transport "%s" failed',e);const n=new Error("probe error");n.transport=t.name,this.emit("upgradeError",n)}})))};function i(){n||(n=!0,f(),t.close(),t=null)}const s=n=>{const r=new Error("probe error: "+n);r.transport=t.name,i(),o('probe transport "%s" failed because of error: %s',e,n),this.emit("upgradeError",r)};function a(){s("transport closed")}function c(){s("socket closed")}function l(e){t&&e.name!==t.name&&(o('"%s" works - aborting "%s"',e.name,t.name),i())}const f=()=>{t.removeListener("open",r),t.removeListener("error",s),t.removeListener("close",a),this.removeListener("close",c),this.removeListener("upgrading",l)};t.once("open",r),t.once("error",s),t.once("close",a),this.once("close",c),this.once("upgrading",l),t.open()}onOpen(){if(o("socket open"),this.readyState="open",u.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){o("starting upgrade probes");let e=0;const t=this.upgrades.length;for(;e<t;e++)this.probe(this.upgrades[e])}}onPacket(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(o('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emit("ping"),this.emit("pong");break;case"error":const t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else o('packet received with socket readyState "%s"',this.readyState)}onHandshake(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){clearTimeout(this.pingTimeoutTimer),this.pingTimeoutTimer=setTimeout((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()}flush(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(o("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))}write(e,t,n){return this.sendPacket("message",e,t,n),this}send(e,t,n){return this.sendPacket("message",e,t,n),this}sendPacket(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"===this.readyState||"closed"===this.readyState)return;(n=n||{}).compress=!1!==n.compress;const i={type:e,data:t,options:n};this.emit("packetCreate",i),this.writeBuffer.push(i),r&&this.once("flush",r),this.flush()}close(){const e=()=>{this.onClose("forced close"),o("socket closing - telling transport to close"),this.transport.close()},t=()=>{this.removeListener("upgrade",t),this.removeListener("upgradeError",t),e()},n=()=>{this.once("upgrade",t),this.once("upgradeError",t)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?n():e()})):this.upgrading?n():e()),this}onError(e){o("socket error %j",e),u.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)}onClose(e,t){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(o('socket close with reason: "%s"',e),clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&removeEventListener("offline",this.offlineEventListener,!1),this.readyState="closed",this.id=null,this.emit("close",e,t),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(e){const t=[];let n=0;const r=e.length;for(;n<r;n++)~this.transports.indexOf(e[n])&&t.push(e[n]);return t}}u.priorWebsocketSuccess=!1,u.protocol=s.protocol,e.exports=u},8664:(e,t,n)=>{const r=n(1804),i=n(745),o=n(986)("engine.io-client:transport");e.exports=class extends i{constructor(e){super(),this.opts=e,this.query=e.query,this.readyState="",this.socket=e.socket}onError(e,t){const n=new Error(e);return n.type="TransportError",n.description=t,this.emit("error",n),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(e){"open"===this.readyState?this.write(e):o("transport is not open, discarding packets")}onOpen(){this.readyState="open",this.writable=!0,this.emit("open")}onData(e){const t=r.decodePacket(e,this.socket.binaryType);this.onPacket(t)}onPacket(e){this.emit("packet",e)}onClose(){this.readyState="closed",this.emit("close")}}},8047:(e,t,n)=>{const r=n(1573),i=n(114),o=n(7344),s=n(8351);t.polling=function(e){let t,n=!1,s=!1;const a=!1!==e.jsonp;if("undefined"!=typeof location){const t="https:"===location.protocol;let r=location.port;r||(r=t?443:80),n=e.hostname!==location.hostname||r!==e.port,s=e.secure!==t}if(e.xdomain=n,e.xscheme=s,t=new r(e),"open"in t&&!e.forceJSONP)return new i(e);if(!a)throw new Error("JSONP disabled");return new o(e)},t.websocket=s},7344:(e,t,n)=>{const r=n(5763),i=n(8678),o=/\n/g,s=/\\n/g;let a;e.exports=class extends r{constructor(e){super(e),this.query=this.query||{},a||(a=i.___eio=i.___eio||[]),this.index=a.length,a.push(this.onData.bind(this)),this.query.j=this.index}get supportsBinary(){return!1}doClose(){this.script&&(this.script.onerror=()=>{},this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),super.doClose()}doPoll(){const e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=e=>{this.onError("jsonp poll error",e)};const t=document.getElementsByTagName("script")[0];t?t.parentNode.insertBefore(e,t):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){const e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)}),100)}doWrite(e,t){let n;if(!this.form){const e=document.createElement("form"),t=document.createElement("textarea"),n=this.iframeId="eio_iframe_"+this.index;e.className="socketio",e.style.position="absolute",e.style.top="-1000px",e.style.left="-1000px",e.target=n,e.method="POST",e.setAttribute("accept-charset","utf-8"),t.name="d",e.appendChild(t),document.body.appendChild(e),this.form=e,this.area=t}function r(){i(),t()}this.form.action=this.uri();const i=()=>{if(this.iframe)try{this.form.removeChild(this.iframe)}catch(e){this.onError("jsonp polling iframe removal error",e)}try{const e='<iframe src="javascript:0" name="'+this.iframeId+'">';n=document.createElement(e)}catch(e){n=document.createElement("iframe"),n.name=this.iframeId,n.src="javascript:0"}n.id=this.iframeId,this.form.appendChild(n),this.iframe=n};i(),e=e.replace(s,"\\\n"),this.area.value=e.replace(o,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=()=>{"complete"===this.iframe.readyState&&r()}:this.iframe.onload=r}}},114:(e,t,n)=>{const r=n(1573),i=n(5763),o=n(745),{pick:s}=n(8497),a=n(8678),c=n(986)("engine.io-client:polling-xhr");function u(){}const l=null!=new r({xdomain:!1}).responseType;class f extends o{constructor(e,t){super(),this.opts=t,this.method=t.method||"GET",this.uri=e,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.create()}create(){const e=s(this.opts,"agent","enablesXDR","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");e.xdomain=!!this.opts.xd,e.xscheme=!!this.opts.xs;const t=this.xhr=new r(e);try{c("xhr open %s: %s",this.method,this.uri),t.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0);for(let e in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(e)&&t.setRequestHeader(e,this.opts.extraHeaders[e])}}catch(e){}if("POST"===this.method)try{t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(t.timeout=this.opts.requestTimeout),this.hasXDR()?(t.onload=()=>{this.onLoad()},t.onerror=()=>{this.onError(t.responseText)}):t.onreadystatechange=()=>{4===t.readyState&&(200===t.status||1223===t.status?this.onLoad():setTimeout((()=>{this.onError("number"==typeof t.status?t.status:0)}),0))},c("xhr data %s",this.data),t.send(this.data)}catch(e){return void setTimeout((()=>{this.onError(e)}),0)}"undefined"!=typeof document&&(this.index=f.requestsCount++,f.requests[this.index]=this)}onSuccess(){this.emit("success"),this.cleanup()}onData(e){this.emit("data",e),this.onSuccess()}onError(e){this.emit("error",e),this.cleanup(!0)}cleanup(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=u:this.xhr.onreadystatechange=u,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete f.requests[this.index],this.xhr=null}}onLoad(){const e=this.xhr.responseText;null!==e&&this.onData(e)}hasXDR(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR}abort(){this.cleanup()}}function p(){for(let e in f.requests)f.requests.hasOwnProperty(e)&&f.requests[e].abort()}f.requestsCount=0,f.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",p):"function"==typeof addEventListener&&addEventListener("onpagehide"in a?"pagehide":"unload",p,!1)),e.exports=class extends i{constructor(e){if(super(e),"undefined"!=typeof location){const t="https:"===location.protocol;let n=location.port;n||(n=t?443:80),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||n!==e.port,this.xs=e.secure!==t}const t=e&&e.forceBase64;this.supportsBinary=l&&!t}request(e={}){return Object.assign(e,{xd:this.xd,xs:this.xs},this.opts),new f(this.uri(),e)}doWrite(e,t){const n=this.request({method:"POST",data:e});n.on("success",t),n.on("error",(e=>{this.onError("xhr post error",e)}))}doPoll(){c("xhr poll");const e=this.request();e.on("data",this.onData.bind(this)),e.on("error",(e=>{this.onError("xhr poll error",e)})),this.pollXhr=e}},e.exports.Request=f},5763:(e,t,n)=>{const r=n(8664),i=n(5877),o=n(1804),s=n(9289),a=n(986)("engine.io-client:polling");e.exports=class extends r{get name(){return"polling"}doOpen(){this.poll()}pause(e){this.readyState="pausing";const t=()=>{a("paused"),this.readyState="paused",e()};if(this.polling||!this.writable){let e=0;this.polling&&(a("we are currently polling - waiting to pause"),e++,this.once("pollComplete",(function(){a("pre-pause polling complete"),--e||t()}))),this.writable||(a("we are currently writing - waiting to pause"),e++,this.once("drain",(function(){a("pre-pause writing complete"),--e||t()})))}else t()}poll(){a("polling"),this.polling=!0,this.doPoll(),this.emit("poll")}onData(e){a("polling got data %s",e),o.decodePayload(e,this.socket.binaryType).forEach((e=>{if("opening"===this.readyState&&"open"===e.type&&this.onOpen(),"close"===e.type)return this.onClose(),!1;this.onPacket(e)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():a('ignoring poll - transport state "%s"',this.readyState))}doClose(){const e=()=>{a("writing close packet"),this.write([{type:"close"}])};"open"===this.readyState?(a("transport open - closing"),e()):(a("transport not open - deferring close"),this.once("open",e))}write(e){this.writable=!1,o.encodePayload(e,(e=>{this.doWrite(e,(()=>{this.writable=!0,this.emit("drain")}))}))}uri(){let e=this.query||{};const t=this.opts.secure?"https":"http";let n="";return!1!==this.opts.timestampRequests&&(e[this.opts.timestampParam]=s()),this.supportsBinary||e.sid||(e.b64=1),e=i.encode(e),this.opts.port&&("https"===t&&443!==Number(this.opts.port)||"http"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),e.length&&(e="?"+e),t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+e}}},9450:(e,t,n)=>{const r=n(8678),i="function"==typeof Promise&&"function"==typeof Promise.resolve?e=>Promise.resolve().then(e):e=>setTimeout(e,0);e.exports={WebSocket:r.WebSocket||r.MozWebSocket,usingBrowserWebSocket:!0,defaultBinaryType:"arraybuffer",nextTick:i}},8351:(e,t,n)=>{const r=n(8664),i=n(1804),o=n(5877),s=n(9289),{pick:a}=n(8497),{WebSocket:c,usingBrowserWebSocket:u,defaultBinaryType:l,nextTick:f}=n(9450),p=n(986)("engine.io-client:websocket"),h="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class d extends r{constructor(e){super(e),this.supportsBinary=!e.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const e=this.uri(),t=this.opts.protocols,n=h?{}:a(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(n.headers=this.opts.extraHeaders);try{this.ws=u&&!h?t?new c(e,t):new c(e):new c(e,t,n)}catch(e){return this.emit("error",e)}this.ws.binaryType=this.socket.binaryType||l,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=this.onClose.bind(this),this.ws.onmessage=e=>this.onData(e.data),this.ws.onerror=e=>this.onError("websocket error",e)}write(e){this.writable=!1;for(let t=0;t<e.length;t++){const n=e[t],r=t===e.length-1;i.encodePacket(n,this.supportsBinary,(e=>{const t={};!u&&(n.options&&(t.compress=n.options.compress),this.opts.perMessageDeflate)&&("string"==typeof e?Buffer.byteLength(e):e.length)<this.opts.perMessageDeflate.threshold&&(t.compress=!1);try{u?this.ws.send(e):this.ws.send(e,t)}catch(e){p("websocket closed before onclose event")}r&&f((()=>{this.writable=!0,this.emit("drain")}))}))}}onClose(){r.prototype.onClose.call(this)}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let e=this.query||{};const t=this.opts.secure?"wss":"ws";let n="";return this.opts.port&&("wss"===t&&443!==Number(this.opts.port)||"ws"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),this.opts.timestampRequests&&(e[this.opts.timestampParam]=s()),this.supportsBinary||(e.b64=1),e=o.encode(e),e.length&&(e="?"+e),t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+e}check(){return!(!c||"__initialize"in c&&this.name===d.prototype.name)}}e.exports=d},8497:e=>{e.exports.pick=(e,...t)=>t.reduce(((t,n)=>(e.hasOwnProperty(n)&&(t[n]=e[n]),t)),{})},1573:(e,t,n)=>{const r=n(1018),i=n(8678);e.exports=function(e){const t=e.xdomain,n=e.xscheme,o=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!t||r))return new XMLHttpRequest}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!n&&o)return new XDomainRequest}catch(e){}if(!t)try{return new(i[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}},986:(e,t,n)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,i=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(i=r))})),t.splice(i,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=n(242)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},242:(e,t,n)=>{e.exports=function(e){function t(e){let n,i,o,s=null;function a(...e){if(!a.enabled)return;const r=a,i=Number(new Date),o=i-(n||i);r.diff=o,r.prev=n,r.curr=i,n=i,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let s=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,i)=>{if("%%"===n)return"%";s++;const o=t.formatters[i];if("function"==typeof o){const t=e[s];n=o.call(r,t),e.splice(s,1),s--}return n})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=r,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==s?s:(i!==t.namespaces&&(i=t.namespaces,o=t.enabled(e)),o),set:e=>{s=e}}),"function"==typeof t.init&&t.init(a),a}function r(e,n){const r=t(this.namespace+(void 0===n?":":n)+e);return r.log=this.log,r}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(i),...t.skips.map(i).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),i=r.length;for(n=0;n<i;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(7660),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((n=>{t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},7660:e=>{var t=1e3,n=60*t,r=60*n,i=24*r;function o(e,t,n,r){var i=t>=1.5*n;return Math.round(e/n)+" "+r+(i?"s":"")}e.exports=function(e,s){s=s||{};var a,c,u=typeof e;if("string"===u&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var o=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(o){var s=parseFloat(o[1]);switch((o[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*s;case"weeks":case"week":case"w":return 6048e5*s;case"days":case"day":case"d":return s*i;case"hours":case"hour":case"hrs":case"hr":case"h":return s*r;case"minutes":case"minute":case"mins":case"min":case"m":return s*n;case"seconds":case"second":case"secs":case"sec":case"s":return s*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}}}(e);if("number"===u&&isFinite(e))return s.long?(a=e,(c=Math.abs(a))>=i?o(a,c,i,"day"):c>=r?o(a,c,r,"hour"):c>=n?o(a,c,n,"minute"):c>=t?o(a,c,t,"second"):a+" ms"):function(e){var o=Math.abs(e);return o>=i?Math.round(e/i)+"d":o>=r?Math.round(e/r)+"h":o>=n?Math.round(e/n)+"m":o>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},5525:e=>{const t=Object.create(null);t.open="0",t.close="1",t.ping="2",t.pong="3",t.message="4",t.upgrade="5",t.noop="6";const n=Object.create(null);Object.keys(t).forEach((e=>{n[t[e]]=e})),e.exports={PACKET_TYPES:t,PACKET_TYPES_REVERSE:n,ERROR_PACKET:{type:"error",data:"parser error"}}},8702:(e,t,n)=>{const{PACKET_TYPES_REVERSE:r,ERROR_PACKET:i}=n(5525);let o;"function"==typeof ArrayBuffer&&(o=n(5733));const s=(e,t)=>{if(o){const n=o.decode(e);return a(n,t)}return{base64:!0,data:e}},a=(e,t)=>"blob"===t&&e instanceof ArrayBuffer?new Blob([e]):e;e.exports=(e,t)=>{if("string"!=typeof e)return{type:"message",data:a(e,t)};const n=e.charAt(0);return"b"===n?{type:"message",data:s(e.substring(1),t)}:r[n]?e.length>1?{type:r[n],data:e.substring(1)}:{type:r[n]}:i}},3469:(e,t,n)=>{const{PACKET_TYPES:r}=n(5525),i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),o="function"==typeof ArrayBuffer,s=(e,t)=>{const n=new FileReader;return n.onload=function(){const e=n.result.split(",")[1];t("b"+e)},n.readAsDataURL(e)};e.exports=({type:e,data:t},n,a)=>{return i&&t instanceof Blob?n?a(t):s(t,a):o&&(t instanceof ArrayBuffer||(c=t,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(c):c&&c.buffer instanceof ArrayBuffer))?n?a(t instanceof ArrayBuffer?t:t.buffer):s(new Blob([t]),a):a(r[e]+(t||""));var c}},1804:(e,t,n)=>{const r=n(3469),i=n(8702),o=String.fromCharCode(30);e.exports={protocol:4,encodePacket:r,encodePayload:(e,t)=>{const n=e.length,i=new Array(n);let s=0;e.forEach(((e,a)=>{r(e,!1,(e=>{i[a]=e,++s===n&&t(i.join(o))}))}))},decodePacket:i,decodePayload:(e,t)=>{const n=e.split(o),r=[];for(let e=0;e<n.length;e++){const o=i(n[e],t);if(r.push(o),"error"===o.type)break}return r}}},1590:e=>{"use strict";var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,e.exports.once=function(e,t){return new Promise((function(n,r){function i(n){e.removeListener(t,o),r(n)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",i),n([].slice.call(arguments))}m(e,t,o,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&m(e,"error",t,{once:!0})}(e,i)}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var s=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function u(e,t,n,r){var i,o,s,u;if(a(n),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),s=o[t]),void 0===s)s=o[t]=n,++e._eventsCount;else if("function"==typeof s?s=o[t]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),(i=c(e))>0&&s.length>i&&!s.warned){s.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=s.length,u=l,console&&console.warn&&console.warn(u)}return e}function l(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function f(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=l.bind(r);return i.listener=n,r.wrapFn=i,i}function p(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):d(i,i.length)}function h(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function d(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function m(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(o){r.once&&e.removeEventListener(t,i),n(o)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return s},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");s=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return c(this)},o.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var i="error"===e,o=this._events;if(void 0!==o)i=i&&void 0===o.error;else if(!i)return!1;if(i){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var c=o[e];if(void 0===c)return!1;if("function"==typeof c)r(c,this,t);else{var u=c.length,l=d(c,u);for(n=0;n<u;++n)r(l[n],this,t)}return!0},o.prototype.addListener=function(e,t){return u(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return u(this,e,t,!0)},o.prototype.once=function(e,t){return a(t),this.on(e,f(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,f(this,e,t)),this},o.prototype.removeListener=function(e,t){var n,r,i,o,s;if(a(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){s=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,s||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},o.prototype.listeners=function(e){return p(this,e,!0)},o.prototype.rawListeners=function(e){return p(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):h.call(e,t)},o.prototype.listenerCount=h,o.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},1018:e=>{try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}},3974:function(e,t,n){var r;e=n.nmd(e),function(){var i,o="Expected a function",s="__lodash_hash_undefined__",a="__lodash_placeholder__",c=32,u=128,l=1/0,f=9007199254740991,p=NaN,h=4294967295,d=[["ary",u],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",c],["partialRight",64],["rearg",256]],m="[object Arguments]",g="[object Array]",v="[object Boolean]",y="[object Date]",b="[object Error]",w="[object Function]",_="[object GeneratorFunction]",E="[object Map]",x="[object Number]",C="[object Object]",k="[object Promise]",S="[object RegExp]",A="[object Set]",I="[object String]",O="[object Symbol]",T="[object WeakMap]",R="[object ArrayBuffer]",M="[object DataView]",L="[object Float32Array]",N="[object Float64Array]",D="[object Int8Array]",P="[object Int16Array]",F="[object Int32Array]",j="[object Uint8Array]",B="[object Uint8ClampedArray]",$="[object Uint16Array]",U="[object Uint32Array]",W=/\b__p \+= '';/g,z=/\b(__p \+=) '' \+/g,H=/(__e\(.*?\)|\b__t\)) \+\n'';/g,q=/&(?:amp|lt|gt|quot|#39);/g,V=/[&<>"']/g,G=RegExp(q.source),K=RegExp(V.source),Y=/<%-([\s\S]+?)%>/g,X=/<%([\s\S]+?)%>/g,J=/<%=([\s\S]+?)%>/g,Z=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Q=/^\w*$/,ee=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,te=/[\\^$.*+?()[\]{}|]/g,ne=RegExp(te.source),re=/^\s+/,ie=/\s/,oe=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,se=/\{\n\/\* \[wrapped with (.+)\] \*/,ae=/,? & /,ce=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ue=/[()=,{}\[\]\/\s]/,le=/\\(\\)?/g,fe=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,pe=/\w*$/,he=/^[-+]0x[0-9a-f]+$/i,de=/^0b[01]+$/i,me=/^\[object .+?Constructor\]$/,ge=/^0o[0-7]+$/i,ve=/^(?:0|[1-9]\d*)$/,ye=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,be=/($^)/,we=/['\n\r\u2028\u2029\\]/g,_e="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Ee="a-z\\xdf-\\xf6\\xf8-\\xff",xe="A-Z\\xc0-\\xd6\\xd8-\\xde",Ce="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",ke="["+Ce+"]",Se="["+_e+"]",Ae="\\d+",Ie="["+Ee+"]",Oe="[^\\ud800-\\udfff"+Ce+Ae+"\\u2700-\\u27bf"+Ee+xe+"]",Te="\\ud83c[\\udffb-\\udfff]",Re="[^\\ud800-\\udfff]",Me="(?:\\ud83c[\\udde6-\\uddff]){2}",Le="[\\ud800-\\udbff][\\udc00-\\udfff]",Ne="["+xe+"]",De="(?:"+Ie+"|"+Oe+")",Pe="(?:"+Ne+"|"+Oe+")",Fe="(?:['’](?:d|ll|m|re|s|t|ve))?",je="(?:['’](?:D|LL|M|RE|S|T|VE))?",Be="(?:"+Se+"|"+Te+")?",$e="[\\ufe0e\\ufe0f]?",Ue=$e+Be+"(?:\\u200d(?:"+[Re,Me,Le].join("|")+")"+$e+Be+")*",We="(?:"+["[\\u2700-\\u27bf]",Me,Le].join("|")+")"+Ue,ze="(?:"+[Re+Se+"?",Se,Me,Le,"[\\ud800-\\udfff]"].join("|")+")",He=RegExp("['’]","g"),qe=RegExp(Se,"g"),Ve=RegExp(Te+"(?="+Te+")|"+ze+Ue,"g"),Ge=RegExp([Ne+"?"+Ie+"+"+Fe+"(?="+[ke,Ne,"$"].join("|")+")",Pe+"+"+je+"(?="+[ke,Ne+De,"$"].join("|")+")",Ne+"?"+De+"+"+Fe,Ne+"+"+je,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Ae,We].join("|"),"g"),Ke=RegExp("[\\u200d\\ud800-\\udfff"+_e+"\\ufe0e\\ufe0f]"),Ye=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Xe=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Je=-1,Ze={};Ze[L]=Ze[N]=Ze[D]=Ze[P]=Ze[F]=Ze[j]=Ze[B]=Ze[$]=Ze[U]=!0,Ze[m]=Ze[g]=Ze[R]=Ze[v]=Ze[M]=Ze[y]=Ze[b]=Ze[w]=Ze[E]=Ze[x]=Ze[C]=Ze[S]=Ze[A]=Ze[I]=Ze[T]=!1;var Qe={};Qe[m]=Qe[g]=Qe[R]=Qe[M]=Qe[v]=Qe[y]=Qe[L]=Qe[N]=Qe[D]=Qe[P]=Qe[F]=Qe[E]=Qe[x]=Qe[C]=Qe[S]=Qe[A]=Qe[I]=Qe[O]=Qe[j]=Qe[B]=Qe[$]=Qe[U]=!0,Qe[b]=Qe[w]=Qe[T]=!1;var et={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},tt=parseFloat,nt=parseInt,rt="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,it="object"==typeof self&&self&&self.Object===Object&&self,ot=rt||it||Function("return this")(),st=t&&!t.nodeType&&t,at=st&&e&&!e.nodeType&&e,ct=at&&at.exports===st,ut=ct&&rt.process,lt=function(){try{return at&&at.require&&at.require("util").types||ut&&ut.binding&&ut.binding("util")}catch(e){}}(),ft=lt&&lt.isArrayBuffer,pt=lt&&lt.isDate,ht=lt&&lt.isMap,dt=lt&&lt.isRegExp,mt=lt&&lt.isSet,gt=lt&&lt.isTypedArray;function vt(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function yt(e,t,n,r){for(var i=-1,o=null==e?0:e.length;++i<o;){var s=e[i];t(r,s,n(s),e)}return r}function bt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function wt(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function _t(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function Et(e,t){for(var n=-1,r=null==e?0:e.length,i=0,o=[];++n<r;){var s=e[n];t(s,n,e)&&(o[i++]=s)}return o}function xt(e,t){return!(null==e||!e.length)&&Lt(e,t,0)>-1}function Ct(e,t,n){for(var r=-1,i=null==e?0:e.length;++r<i;)if(n(t,e[r]))return!0;return!1}function kt(e,t){for(var n=-1,r=null==e?0:e.length,i=Array(r);++n<r;)i[n]=t(e[n],n,e);return i}function St(e,t){for(var n=-1,r=t.length,i=e.length;++n<r;)e[i+n]=t[n];return e}function At(e,t,n,r){var i=-1,o=null==e?0:e.length;for(r&&o&&(n=e[++i]);++i<o;)n=t(n,e[i],i,e);return n}function It(e,t,n,r){var i=null==e?0:e.length;for(r&&i&&(n=e[--i]);i--;)n=t(n,e[i],i,e);return n}function Ot(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var Tt=Ft("length");function Rt(e,t,n){var r;return n(e,(function(e,n,i){if(t(e,n,i))return r=n,!1})),r}function Mt(e,t,n,r){for(var i=e.length,o=n+(r?1:-1);r?o--:++o<i;)if(t(e[o],o,e))return o;return-1}function Lt(e,t,n){return t==t?function(e,t,n){for(var r=n-1,i=e.length;++r<i;)if(e[r]===t)return r;return-1}(e,t,n):Mt(e,Dt,n)}function Nt(e,t,n,r){for(var i=n-1,o=e.length;++i<o;)if(r(e[i],t))return i;return-1}function Dt(e){return e!=e}function Pt(e,t){var n=null==e?0:e.length;return n?$t(e,t)/n:p}function Ft(e){return function(t){return null==t?i:t[e]}}function jt(e){return function(t){return null==e?i:e[t]}}function Bt(e,t,n,r,i){return i(e,(function(e,i,o){n=r?(r=!1,e):t(n,e,i,o)})),n}function $t(e,t){for(var n,r=-1,o=e.length;++r<o;){var s=t(e[r]);s!==i&&(n=n===i?s:n+s)}return n}function Ut(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function Wt(e){return e?e.slice(0,an(e)+1).replace(re,""):e}function zt(e){return function(t){return e(t)}}function Ht(e,t){return kt(t,(function(t){return e[t]}))}function qt(e,t){return e.has(t)}function Vt(e,t){for(var n=-1,r=e.length;++n<r&&Lt(t,e[n],0)>-1;);return n}function Gt(e,t){for(var n=e.length;n--&&Lt(t,e[n],0)>-1;);return n}function Kt(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}var Yt=jt({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),Xt=jt({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Jt(e){return"\\"+et[e]}function Zt(e){return Ke.test(e)}function Qt(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function en(e,t){return function(n){return e(t(n))}}function tn(e,t){for(var n=-1,r=e.length,i=0,o=[];++n<r;){var s=e[n];s!==t&&s!==a||(e[n]=a,o[i++]=n)}return o}function nn(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}function rn(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=[e,e]})),n}function on(e){return Zt(e)?function(e){for(var t=Ve.lastIndex=0;Ve.test(e);)++t;return t}(e):Tt(e)}function sn(e){return Zt(e)?function(e){return e.match(Ve)||[]}(e):function(e){return e.split("")}(e)}function an(e){for(var t=e.length;t--&&ie.test(e.charAt(t)););return t}var cn=jt({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),un=function e(t){var n,r=(t=null==t?ot:un.defaults(ot.Object(),t,un.pick(ot,Xe))).Array,ie=t.Date,_e=t.Error,Ee=t.Function,xe=t.Math,Ce=t.Object,ke=t.RegExp,Se=t.String,Ae=t.TypeError,Ie=r.prototype,Oe=Ee.prototype,Te=Ce.prototype,Re=t["__core-js_shared__"],Me=Oe.toString,Le=Te.hasOwnProperty,Ne=0,De=(n=/[^.]+$/.exec(Re&&Re.keys&&Re.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",Pe=Te.toString,Fe=Me.call(Ce),je=ot._,Be=ke("^"+Me.call(Le).replace(te,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),$e=ct?t.Buffer:i,Ue=t.Symbol,We=t.Uint8Array,ze=$e?$e.allocUnsafe:i,Ve=en(Ce.getPrototypeOf,Ce),Ke=Ce.create,et=Te.propertyIsEnumerable,rt=Ie.splice,it=Ue?Ue.isConcatSpreadable:i,st=Ue?Ue.iterator:i,at=Ue?Ue.toStringTag:i,ut=function(){try{var e=uo(Ce,"defineProperty");return e({},"",{}),e}catch(e){}}(),lt=t.clearTimeout!==ot.clearTimeout&&t.clearTimeout,Tt=ie&&ie.now!==ot.Date.now&&ie.now,jt=t.setTimeout!==ot.setTimeout&&t.setTimeout,ln=xe.ceil,fn=xe.floor,pn=Ce.getOwnPropertySymbols,hn=$e?$e.isBuffer:i,dn=t.isFinite,mn=Ie.join,gn=en(Ce.keys,Ce),vn=xe.max,yn=xe.min,bn=ie.now,wn=t.parseInt,_n=xe.random,En=Ie.reverse,xn=uo(t,"DataView"),Cn=uo(t,"Map"),kn=uo(t,"Promise"),Sn=uo(t,"Set"),An=uo(t,"WeakMap"),In=uo(Ce,"create"),On=An&&new An,Tn={},Rn=Bo(xn),Mn=Bo(Cn),Ln=Bo(kn),Nn=Bo(Sn),Dn=Bo(An),Pn=Ue?Ue.prototype:i,Fn=Pn?Pn.valueOf:i,jn=Pn?Pn.toString:i;function Bn(e){if(na(e)&&!qs(e)&&!(e instanceof zn)){if(e instanceof Wn)return e;if(Le.call(e,"__wrapped__"))return $o(e)}return new Wn(e)}var $n=function(){function e(){}return function(t){if(!ta(t))return{};if(Ke)return Ke(t);e.prototype=t;var n=new e;return e.prototype=i,n}}();function Un(){}function Wn(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=i}function zn(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=h,this.__views__=[]}function Hn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function qn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Vn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Gn(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new Vn;++t<n;)this.add(e[t])}function Kn(e){var t=this.__data__=new qn(e);this.size=t.size}function Yn(e,t){var n=qs(e),r=!n&&Hs(e),i=!n&&!r&&Ys(e),o=!n&&!r&&!i&&la(e),s=n||r||i||o,a=s?Ut(e.length,Se):[],c=a.length;for(var u in e)!t&&!Le.call(e,u)||s&&("length"==u||i&&("offset"==u||"parent"==u)||o&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||vo(u,c))||a.push(u);return a}function Xn(e){var t=e.length;return t?e[Vr(0,t-1)]:i}function Jn(e,t){return No(Ai(e),sr(t,0,e.length))}function Zn(e){return No(Ai(e))}function Qn(e,t,n){(n!==i&&!Us(e[t],n)||n===i&&!(t in e))&&ir(e,t,n)}function er(e,t,n){var r=e[t];Le.call(e,t)&&Us(r,n)&&(n!==i||t in e)||ir(e,t,n)}function tr(e,t){for(var n=e.length;n--;)if(Us(e[n][0],t))return n;return-1}function nr(e,t,n,r){return fr(e,(function(e,i,o){t(r,e,n(e),o)})),r}function rr(e,t){return e&&Ii(t,Ma(t),e)}function ir(e,t,n){"__proto__"==t&&ut?ut(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function or(e,t){for(var n=-1,o=t.length,s=r(o),a=null==e;++n<o;)s[n]=a?i:Aa(e,t[n]);return s}function sr(e,t,n){return e==e&&(n!==i&&(e=e<=n?e:n),t!==i&&(e=e>=t?e:t)),e}function ar(e,t,n,r,o,s){var a,c=1&t,u=2&t,l=4&t;if(n&&(a=o?n(e,r,o,s):n(e)),a!==i)return a;if(!ta(e))return e;var f=qs(e);if(f){if(a=function(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&Le.call(e,"index")&&(n.index=e.index,n.input=e.input),n}(e),!c)return Ai(e,a)}else{var p=po(e),h=p==w||p==_;if(Ys(e))return _i(e,c);if(p==C||p==m||h&&!o){if(a=u||h?{}:mo(e),!c)return u?function(e,t){return Ii(e,fo(e),t)}(e,function(e,t){return e&&Ii(t,La(t),e)}(a,e)):function(e,t){return Ii(e,lo(e),t)}(e,rr(a,e))}else{if(!Qe[p])return o?e:{};a=function(e,t,n){var r,i=e.constructor;switch(t){case R:return Ei(e);case v:case y:return new i(+e);case M:return function(e,t){var n=t?Ei(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case L:case N:case D:case P:case F:case j:case B:case $:case U:return xi(e,n);case E:return new i;case x:case I:return new i(e);case S:return function(e){var t=new e.constructor(e.source,pe.exec(e));return t.lastIndex=e.lastIndex,t}(e);case A:return new i;case O:return r=e,Fn?Ce(Fn.call(r)):{}}}(e,p,c)}}s||(s=new Kn);var d=s.get(e);if(d)return d;s.set(e,a),aa(e)?e.forEach((function(r){a.add(ar(r,t,n,r,e,s))})):ra(e)&&e.forEach((function(r,i){a.set(i,ar(r,t,n,i,e,s))}));var g=f?i:(l?u?no:to:u?La:Ma)(e);return bt(g||e,(function(r,i){g&&(r=e[i=r]),er(a,i,ar(r,t,n,i,e,s))})),a}function cr(e,t,n){var r=n.length;if(null==e)return!r;for(e=Ce(e);r--;){var o=n[r],s=t[o],a=e[o];if(a===i&&!(o in e)||!s(a))return!1}return!0}function ur(e,t,n){if("function"!=typeof e)throw new Ae(o);return To((function(){e.apply(i,n)}),t)}function lr(e,t,n,r){var i=-1,o=xt,s=!0,a=e.length,c=[],u=t.length;if(!a)return c;n&&(t=kt(t,zt(n))),r?(o=Ct,s=!1):t.length>=200&&(o=qt,s=!1,t=new Gn(t));e:for(;++i<a;){var l=e[i],f=null==n?l:n(l);if(l=r||0!==l?l:0,s&&f==f){for(var p=u;p--;)if(t[p]===f)continue e;c.push(l)}else o(t,f,r)||c.push(l)}return c}Bn.templateSettings={escape:Y,evaluate:X,interpolate:J,variable:"",imports:{_:Bn}},Bn.prototype=Un.prototype,Bn.prototype.constructor=Bn,Wn.prototype=$n(Un.prototype),Wn.prototype.constructor=Wn,zn.prototype=$n(Un.prototype),zn.prototype.constructor=zn,Hn.prototype.clear=function(){this.__data__=In?In(null):{},this.size=0},Hn.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},Hn.prototype.get=function(e){var t=this.__data__;if(In){var n=t[e];return n===s?i:n}return Le.call(t,e)?t[e]:i},Hn.prototype.has=function(e){var t=this.__data__;return In?t[e]!==i:Le.call(t,e)},Hn.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=In&&t===i?s:t,this},qn.prototype.clear=function(){this.__data__=[],this.size=0},qn.prototype.delete=function(e){var t=this.__data__,n=tr(t,e);return!(n<0||(n==t.length-1?t.pop():rt.call(t,n,1),--this.size,0))},qn.prototype.get=function(e){var t=this.__data__,n=tr(t,e);return n<0?i:t[n][1]},qn.prototype.has=function(e){return tr(this.__data__,e)>-1},qn.prototype.set=function(e,t){var n=this.__data__,r=tr(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},Vn.prototype.clear=function(){this.size=0,this.__data__={hash:new Hn,map:new(Cn||qn),string:new Hn}},Vn.prototype.delete=function(e){var t=ao(this,e).delete(e);return this.size-=t?1:0,t},Vn.prototype.get=function(e){return ao(this,e).get(e)},Vn.prototype.has=function(e){return ao(this,e).has(e)},Vn.prototype.set=function(e,t){var n=ao(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},Gn.prototype.add=Gn.prototype.push=function(e){return this.__data__.set(e,s),this},Gn.prototype.has=function(e){return this.__data__.has(e)},Kn.prototype.clear=function(){this.__data__=new qn,this.size=0},Kn.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Kn.prototype.get=function(e){return this.__data__.get(e)},Kn.prototype.has=function(e){return this.__data__.has(e)},Kn.prototype.set=function(e,t){var n=this.__data__;if(n instanceof qn){var r=n.__data__;if(!Cn||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new Vn(r)}return n.set(e,t),this.size=n.size,this};var fr=Ri(br),pr=Ri(wr,!0);function hr(e,t){var n=!0;return fr(e,(function(e,r,i){return n=!!t(e,r,i)})),n}function dr(e,t,n){for(var r=-1,o=e.length;++r<o;){var s=e[r],a=t(s);if(null!=a&&(c===i?a==a&&!ua(a):n(a,c)))var c=a,u=s}return u}function mr(e,t){var n=[];return fr(e,(function(e,r,i){t(e,r,i)&&n.push(e)})),n}function gr(e,t,n,r,i){var o=-1,s=e.length;for(n||(n=go),i||(i=[]);++o<s;){var a=e[o];t>0&&n(a)?t>1?gr(a,t-1,n,r,i):St(i,a):r||(i[i.length]=a)}return i}var vr=Mi(),yr=Mi(!0);function br(e,t){return e&&vr(e,t,Ma)}function wr(e,t){return e&&yr(e,t,Ma)}function _r(e,t){return Et(t,(function(t){return Zs(e[t])}))}function Er(e,t){for(var n=0,r=(t=vi(t,e)).length;null!=e&&n<r;)e=e[jo(t[n++])];return n&&n==r?e:i}function xr(e,t,n){var r=t(e);return qs(e)?r:St(r,n(e))}function Cr(e){return null==e?e===i?"[object Undefined]":"[object Null]":at&&at in Ce(e)?function(e){var t=Le.call(e,at),n=e[at];try{e[at]=i;var r=!0}catch(e){}var o=Pe.call(e);return r&&(t?e[at]=n:delete e[at]),o}(e):function(e){return Pe.call(e)}(e)}function kr(e,t){return e>t}function Sr(e,t){return null!=e&&Le.call(e,t)}function Ar(e,t){return null!=e&&t in Ce(e)}function Ir(e,t,n){for(var o=n?Ct:xt,s=e[0].length,a=e.length,c=a,u=r(a),l=1/0,f=[];c--;){var p=e[c];c&&t&&(p=kt(p,zt(t))),l=yn(p.length,l),u[c]=!n&&(t||s>=120&&p.length>=120)?new Gn(c&&p):i}p=e[0];var h=-1,d=u[0];e:for(;++h<s&&f.length<l;){var m=p[h],g=t?t(m):m;if(m=n||0!==m?m:0,!(d?qt(d,g):o(f,g,n))){for(c=a;--c;){var v=u[c];if(!(v?qt(v,g):o(e[c],g,n)))continue e}d&&d.push(g),f.push(m)}}return f}function Or(e,t,n){var r=null==(e=So(e,t=vi(t,e)))?e:e[jo(Jo(t))];return null==r?i:vt(r,e,n)}function Tr(e){return na(e)&&Cr(e)==m}function Rr(e,t,n,r,o){return e===t||(null==e||null==t||!na(e)&&!na(t)?e!=e&&t!=t:function(e,t,n,r,o,s){var a=qs(e),c=qs(t),u=a?g:po(e),l=c?g:po(t),f=(u=u==m?C:u)==C,p=(l=l==m?C:l)==C,h=u==l;if(h&&Ys(e)){if(!Ys(t))return!1;a=!0,f=!1}if(h&&!f)return s||(s=new Kn),a||la(e)?Qi(e,t,n,r,o,s):function(e,t,n,r,i,o,s){switch(n){case M:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case R:return!(e.byteLength!=t.byteLength||!o(new We(e),new We(t)));case v:case y:case x:return Us(+e,+t);case b:return e.name==t.name&&e.message==t.message;case S:case I:return e==t+"";case E:var a=Qt;case A:var c=1&r;if(a||(a=nn),e.size!=t.size&&!c)return!1;var u=s.get(e);if(u)return u==t;r|=2,s.set(e,t);var l=Qi(a(e),a(t),r,i,o,s);return s.delete(e),l;case O:if(Fn)return Fn.call(e)==Fn.call(t)}return!1}(e,t,u,n,r,o,s);if(!(1&n)){var d=f&&Le.call(e,"__wrapped__"),w=p&&Le.call(t,"__wrapped__");if(d||w){var _=d?e.value():e,k=w?t.value():t;return s||(s=new Kn),o(_,k,n,r,s)}}return!!h&&(s||(s=new Kn),function(e,t,n,r,o,s){var a=1&n,c=to(e),u=c.length;if(u!=to(t).length&&!a)return!1;for(var l=u;l--;){var f=c[l];if(!(a?f in t:Le.call(t,f)))return!1}var p=s.get(e),h=s.get(t);if(p&&h)return p==t&&h==e;var d=!0;s.set(e,t),s.set(t,e);for(var m=a;++l<u;){var g=e[f=c[l]],v=t[f];if(r)var y=a?r(v,g,f,t,e,s):r(g,v,f,e,t,s);if(!(y===i?g===v||o(g,v,n,r,s):y)){d=!1;break}m||(m="constructor"==f)}if(d&&!m){var b=e.constructor,w=t.constructor;b==w||!("constructor"in e)||!("constructor"in t)||"function"==typeof b&&b instanceof b&&"function"==typeof w&&w instanceof w||(d=!1)}return s.delete(e),s.delete(t),d}(e,t,n,r,o,s))}(e,t,n,r,Rr,o))}function Mr(e,t,n,r){var o=n.length,s=o,a=!r;if(null==e)return!s;for(e=Ce(e);o--;){var c=n[o];if(a&&c[2]?c[1]!==e[c[0]]:!(c[0]in e))return!1}for(;++o<s;){var u=(c=n[o])[0],l=e[u],f=c[1];if(a&&c[2]){if(l===i&&!(u in e))return!1}else{var p=new Kn;if(r)var h=r(l,f,u,e,t,p);if(!(h===i?Rr(f,l,3,r,p):h))return!1}}return!0}function Lr(e){return!(!ta(e)||(t=e,De&&De in t))&&(Zs(e)?Be:me).test(Bo(e));var t}function Nr(e){return"function"==typeof e?e:null==e?ic:"object"==typeof e?qs(e)?Br(e[0],e[1]):jr(e):hc(e)}function Dr(e){if(!Eo(e))return gn(e);var t=[];for(var n in Ce(e))Le.call(e,n)&&"constructor"!=n&&t.push(n);return t}function Pr(e,t){return e<t}function Fr(e,t){var n=-1,i=Gs(e)?r(e.length):[];return fr(e,(function(e,r,o){i[++n]=t(e,r,o)})),i}function jr(e){var t=co(e);return 1==t.length&&t[0][2]?Co(t[0][0],t[0][1]):function(n){return n===e||Mr(n,e,t)}}function Br(e,t){return bo(e)&&xo(t)?Co(jo(e),t):function(n){var r=Aa(n,e);return r===i&&r===t?Ia(n,e):Rr(t,r,3)}}function $r(e,t,n,r,o){e!==t&&vr(t,(function(s,a){if(o||(o=new Kn),ta(s))!function(e,t,n,r,o,s,a){var c=Io(e,n),u=Io(t,n),l=a.get(u);if(l)Qn(e,n,l);else{var f=s?s(c,u,n+"",e,t,a):i,p=f===i;if(p){var h=qs(u),d=!h&&Ys(u),m=!h&&!d&&la(u);f=u,h||d||m?qs(c)?f=c:Ks(c)?f=Ai(c):d?(p=!1,f=_i(u,!0)):m?(p=!1,f=xi(u,!0)):f=[]:oa(u)||Hs(u)?(f=c,Hs(c)?f=ya(c):ta(c)&&!Zs(c)||(f=mo(u))):p=!1}p&&(a.set(u,f),o(f,u,r,s,a),a.delete(u)),Qn(e,n,f)}}(e,t,a,n,$r,r,o);else{var c=r?r(Io(e,a),s,a+"",e,t,o):i;c===i&&(c=s),Qn(e,a,c)}}),La)}function Ur(e,t){var n=e.length;if(n)return vo(t+=t<0?n:0,n)?e[t]:i}function Wr(e,t,n){t=t.length?kt(t,(function(e){return qs(e)?function(t){return Er(t,1===e.length?e[0]:e)}:e})):[ic];var r=-1;t=kt(t,zt(so()));var i=Fr(e,(function(e,n,i){var o=kt(t,(function(t){return t(e)}));return{criteria:o,index:++r,value:e}}));return function(e,t){var r=e.length;for(e.sort((function(e,t){return function(e,t,n){for(var r=-1,i=e.criteria,o=t.criteria,s=i.length,a=n.length;++r<s;){var c=Ci(i[r],o[r]);if(c)return r>=a?c:c*("desc"==n[r]?-1:1)}return e.index-t.index}(e,t,n)}));r--;)e[r]=e[r].value;return e}(i)}function zr(e,t,n){for(var r=-1,i=t.length,o={};++r<i;){var s=t[r],a=Er(e,s);n(a,s)&&Jr(o,vi(s,e),a)}return o}function Hr(e,t,n,r){var i=r?Nt:Lt,o=-1,s=t.length,a=e;for(e===t&&(t=Ai(t)),n&&(a=kt(e,zt(n)));++o<s;)for(var c=0,u=t[o],l=n?n(u):u;(c=i(a,l,c,r))>-1;)a!==e&&rt.call(a,c,1),rt.call(e,c,1);return e}function qr(e,t){for(var n=e?t.length:0,r=n-1;n--;){var i=t[n];if(n==r||i!==o){var o=i;vo(i)?rt.call(e,i,1):ui(e,i)}}return e}function Vr(e,t){return e+fn(_n()*(t-e+1))}function Gr(e,t){var n="";if(!e||t<1||t>f)return n;do{t%2&&(n+=e),(t=fn(t/2))&&(e+=e)}while(t);return n}function Kr(e,t){return Ro(ko(e,t,ic),e+"")}function Yr(e){return Xn(Ua(e))}function Xr(e,t){var n=Ua(e);return No(n,sr(t,0,n.length))}function Jr(e,t,n,r){if(!ta(e))return e;for(var o=-1,s=(t=vi(t,e)).length,a=s-1,c=e;null!=c&&++o<s;){var u=jo(t[o]),l=n;if("__proto__"===u||"constructor"===u||"prototype"===u)return e;if(o!=a){var f=c[u];(l=r?r(f,u,c):i)===i&&(l=ta(f)?f:vo(t[o+1])?[]:{})}er(c,u,l),c=c[u]}return e}var Zr=On?function(e,t){return On.set(e,t),e}:ic,Qr=ut?function(e,t){return ut(e,"toString",{configurable:!0,enumerable:!1,value:tc(t),writable:!0})}:ic;function ei(e){return No(Ua(e))}function ti(e,t,n){var i=-1,o=e.length;t<0&&(t=-t>o?0:o+t),(n=n>o?o:n)<0&&(n+=o),o=t>n?0:n-t>>>0,t>>>=0;for(var s=r(o);++i<o;)s[i]=e[i+t];return s}function ni(e,t){var n;return fr(e,(function(e,r,i){return!(n=t(e,r,i))})),!!n}function ri(e,t,n){var r=0,i=null==e?r:e.length;if("number"==typeof t&&t==t&&i<=2147483647){for(;r<i;){var o=r+i>>>1,s=e[o];null!==s&&!ua(s)&&(n?s<=t:s<t)?r=o+1:i=o}return i}return ii(e,t,ic,n)}function ii(e,t,n,r){var o=0,s=null==e?0:e.length;if(0===s)return 0;for(var a=(t=n(t))!=t,c=null===t,u=ua(t),l=t===i;o<s;){var f=fn((o+s)/2),p=n(e[f]),h=p!==i,d=null===p,m=p==p,g=ua(p);if(a)var v=r||m;else v=l?m&&(r||h):c?m&&h&&(r||!d):u?m&&h&&!d&&(r||!g):!d&&!g&&(r?p<=t:p<t);v?o=f+1:s=f}return yn(s,4294967294)}function oi(e,t){for(var n=-1,r=e.length,i=0,o=[];++n<r;){var s=e[n],a=t?t(s):s;if(!n||!Us(a,c)){var c=a;o[i++]=0===s?0:s}}return o}function si(e){return"number"==typeof e?e:ua(e)?p:+e}function ai(e){if("string"==typeof e)return e;if(qs(e))return kt(e,ai)+"";if(ua(e))return jn?jn.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function ci(e,t,n){var r=-1,i=xt,o=e.length,s=!0,a=[],c=a;if(n)s=!1,i=Ct;else if(o>=200){var u=t?null:Gi(e);if(u)return nn(u);s=!1,i=qt,c=new Gn}else c=t?[]:a;e:for(;++r<o;){var l=e[r],f=t?t(l):l;if(l=n||0!==l?l:0,s&&f==f){for(var p=c.length;p--;)if(c[p]===f)continue e;t&&c.push(f),a.push(l)}else i(c,f,n)||(c!==a&&c.push(f),a.push(l))}return a}function ui(e,t){return null==(e=So(e,t=vi(t,e)))||delete e[jo(Jo(t))]}function li(e,t,n,r){return Jr(e,t,n(Er(e,t)),r)}function fi(e,t,n,r){for(var i=e.length,o=r?i:-1;(r?o--:++o<i)&&t(e[o],o,e););return n?ti(e,r?0:o,r?o+1:i):ti(e,r?o+1:0,r?i:o)}function pi(e,t){var n=e;return n instanceof zn&&(n=n.value()),At(t,(function(e,t){return t.func.apply(t.thisArg,St([e],t.args))}),n)}function hi(e,t,n){var i=e.length;if(i<2)return i?ci(e[0]):[];for(var o=-1,s=r(i);++o<i;)for(var a=e[o],c=-1;++c<i;)c!=o&&(s[o]=lr(s[o]||a,e[c],t,n));return ci(gr(s,1),t,n)}function di(e,t,n){for(var r=-1,o=e.length,s=t.length,a={};++r<o;){var c=r<s?t[r]:i;n(a,e[r],c)}return a}function mi(e){return Ks(e)?e:[]}function gi(e){return"function"==typeof e?e:ic}function vi(e,t){return qs(e)?e:bo(e,t)?[e]:Fo(ba(e))}var yi=Kr;function bi(e,t,n){var r=e.length;return n=n===i?r:n,!t&&n>=r?e:ti(e,t,n)}var wi=lt||function(e){return ot.clearTimeout(e)};function _i(e,t){if(t)return e.slice();var n=e.length,r=ze?ze(n):new e.constructor(n);return e.copy(r),r}function Ei(e){var t=new e.constructor(e.byteLength);return new We(t).set(new We(e)),t}function xi(e,t){var n=t?Ei(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function Ci(e,t){if(e!==t){var n=e!==i,r=null===e,o=e==e,s=ua(e),a=t!==i,c=null===t,u=t==t,l=ua(t);if(!c&&!l&&!s&&e>t||s&&a&&u&&!c&&!l||r&&a&&u||!n&&u||!o)return 1;if(!r&&!s&&!l&&e<t||l&&n&&o&&!r&&!s||c&&n&&o||!a&&o||!u)return-1}return 0}function ki(e,t,n,i){for(var o=-1,s=e.length,a=n.length,c=-1,u=t.length,l=vn(s-a,0),f=r(u+l),p=!i;++c<u;)f[c]=t[c];for(;++o<a;)(p||o<s)&&(f[n[o]]=e[o]);for(;l--;)f[c++]=e[o++];return f}function Si(e,t,n,i){for(var o=-1,s=e.length,a=-1,c=n.length,u=-1,l=t.length,f=vn(s-c,0),p=r(f+l),h=!i;++o<f;)p[o]=e[o];for(var d=o;++u<l;)p[d+u]=t[u];for(;++a<c;)(h||o<s)&&(p[d+n[a]]=e[o++]);return p}function Ai(e,t){var n=-1,i=e.length;for(t||(t=r(i));++n<i;)t[n]=e[n];return t}function Ii(e,t,n,r){var o=!n;n||(n={});for(var s=-1,a=t.length;++s<a;){var c=t[s],u=r?r(n[c],e[c],c,n,e):i;u===i&&(u=e[c]),o?ir(n,c,u):er(n,c,u)}return n}function Oi(e,t){return function(n,r){var i=qs(n)?yt:nr,o=t?t():{};return i(n,e,so(r,2),o)}}function Ti(e){return Kr((function(t,n){var r=-1,o=n.length,s=o>1?n[o-1]:i,a=o>2?n[2]:i;for(s=e.length>3&&"function"==typeof s?(o--,s):i,a&&yo(n[0],n[1],a)&&(s=o<3?i:s,o=1),t=Ce(t);++r<o;){var c=n[r];c&&e(t,c,r,s)}return t}))}function Ri(e,t){return function(n,r){if(null==n)return n;if(!Gs(n))return e(n,r);for(var i=n.length,o=t?i:-1,s=Ce(n);(t?o--:++o<i)&&!1!==r(s[o],o,s););return n}}function Mi(e){return function(t,n,r){for(var i=-1,o=Ce(t),s=r(t),a=s.length;a--;){var c=s[e?a:++i];if(!1===n(o[c],c,o))break}return t}}function Li(e){return function(t){var n=Zt(t=ba(t))?sn(t):i,r=n?n[0]:t.charAt(0),o=n?bi(n,1).join(""):t.slice(1);return r[e]()+o}}function Ni(e){return function(t){return At(Za(Ha(t).replace(He,"")),e,"")}}function Di(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=$n(e.prototype),r=e.apply(n,t);return ta(r)?r:n}}function Pi(e){return function(t,n,r){var o=Ce(t);if(!Gs(t)){var s=so(n,3);t=Ma(t),n=function(e){return s(o[e],e,o)}}var a=e(t,n,r);return a>-1?o[s?t[a]:a]:i}}function Fi(e){return eo((function(t){var n=t.length,r=n,s=Wn.prototype.thru;for(e&&t.reverse();r--;){var a=t[r];if("function"!=typeof a)throw new Ae(o);if(s&&!c&&"wrapper"==io(a))var c=new Wn([],!0)}for(r=c?r:n;++r<n;){var u=io(a=t[r]),l="wrapper"==u?ro(a):i;c=l&&wo(l[0])&&424==l[1]&&!l[4].length&&1==l[9]?c[io(l[0])].apply(c,l[3]):1==a.length&&wo(a)?c[u]():c.thru(a)}return function(){var e=arguments,r=e[0];if(c&&1==e.length&&qs(r))return c.plant(r).value();for(var i=0,o=n?t[i].apply(this,e):r;++i<n;)o=t[i].call(this,o);return o}}))}function ji(e,t,n,o,s,a,c,l,f,p){var h=t&u,d=1&t,m=2&t,g=24&t,v=512&t,y=m?i:Di(e);return function i(){for(var u=arguments.length,b=r(u),w=u;w--;)b[w]=arguments[w];if(g)var _=oo(i),E=Kt(b,_);if(o&&(b=ki(b,o,s,g)),a&&(b=Si(b,a,c,g)),u-=E,g&&u<p){var x=tn(b,_);return qi(e,t,ji,i.placeholder,n,b,x,l,f,p-u)}var C=d?n:this,k=m?C[e]:e;return u=b.length,l?b=Ao(b,l):v&&u>1&&b.reverse(),h&&f<u&&(b.length=f),this&&this!==ot&&this instanceof i&&(k=y||Di(k)),k.apply(C,b)}}function Bi(e,t){return function(n,r){return function(e,t,n,r){return br(e,(function(e,i,o){t(r,n(e),i,o)})),r}(n,e,t(r),{})}}function $i(e,t){return function(n,r){var o;if(n===i&&r===i)return t;if(n!==i&&(o=n),r!==i){if(o===i)return r;"string"==typeof n||"string"==typeof r?(n=ai(n),r=ai(r)):(n=si(n),r=si(r)),o=e(n,r)}return o}}function Ui(e){return eo((function(t){return t=kt(t,zt(so())),Kr((function(n){var r=this;return e(t,(function(e){return vt(e,r,n)}))}))}))}function Wi(e,t){var n=(t=t===i?" ":ai(t)).length;if(n<2)return n?Gr(t,e):t;var r=Gr(t,ln(e/on(t)));return Zt(t)?bi(sn(r),0,e).join(""):r.slice(0,e)}function zi(e){return function(t,n,o){return o&&"number"!=typeof o&&yo(t,n,o)&&(n=o=i),t=da(t),n===i?(n=t,t=0):n=da(n),function(e,t,n,i){for(var o=-1,s=vn(ln((t-e)/(n||1)),0),a=r(s);s--;)a[i?s:++o]=e,e+=n;return a}(t,n,o=o===i?t<n?1:-1:da(o),e)}}function Hi(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=va(t),n=va(n)),e(t,n)}}function qi(e,t,n,r,o,s,a,u,l,f){var p=8&t;t|=p?c:64,4&(t&=~(p?64:c))||(t&=-4);var h=[e,t,o,p?s:i,p?a:i,p?i:s,p?i:a,u,l,f],d=n.apply(i,h);return wo(e)&&Oo(d,h),d.placeholder=r,Mo(d,e,t)}function Vi(e){var t=xe[e];return function(e,n){if(e=va(e),(n=null==n?0:yn(ma(n),292))&&dn(e)){var r=(ba(e)+"e").split("e");return+((r=(ba(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}var Gi=Sn&&1/nn(new Sn([,-0]))[1]==l?function(e){return new Sn(e)}:uc;function Ki(e){return function(t){var n=po(t);return n==E?Qt(t):n==A?rn(t):function(e,t){return kt(t,(function(t){return[t,e[t]]}))}(t,e(t))}}function Yi(e,t,n,s,l,f,p,h){var d=2&t;if(!d&&"function"!=typeof e)throw new Ae(o);var m=s?s.length:0;if(m||(t&=-97,s=l=i),p=p===i?p:vn(ma(p),0),h=h===i?h:ma(h),m-=l?l.length:0,64&t){var g=s,v=l;s=l=i}var y=d?i:ro(e),b=[e,t,n,s,l,g,v,f,p,h];if(y&&function(e,t){var n=e[1],r=t[1],i=n|r,o=i<131,s=r==u&&8==n||r==u&&256==n&&e[7].length<=t[8]||384==r&&t[7].length<=t[8]&&8==n;if(!o&&!s)return e;1&r&&(e[2]=t[2],i|=1&n?0:4);var c=t[3];if(c){var l=e[3];e[3]=l?ki(l,c,t[4]):c,e[4]=l?tn(e[3],a):t[4]}(c=t[5])&&(l=e[5],e[5]=l?Si(l,c,t[6]):c,e[6]=l?tn(e[5],a):t[6]),(c=t[7])&&(e[7]=c),r&u&&(e[8]=null==e[8]?t[8]:yn(e[8],t[8])),null==e[9]&&(e[9]=t[9]),e[0]=t[0],e[1]=i}(b,y),e=b[0],t=b[1],n=b[2],s=b[3],l=b[4],!(h=b[9]=b[9]===i?d?0:e.length:vn(b[9]-m,0))&&24&t&&(t&=-25),t&&1!=t)w=8==t||16==t?function(e,t,n){var o=Di(e);return function s(){for(var a=arguments.length,c=r(a),u=a,l=oo(s);u--;)c[u]=arguments[u];var f=a<3&&c[0]!==l&&c[a-1]!==l?[]:tn(c,l);return(a-=f.length)<n?qi(e,t,ji,s.placeholder,i,c,f,i,i,n-a):vt(this&&this!==ot&&this instanceof s?o:e,this,c)}}(e,t,h):t!=c&&33!=t||l.length?ji.apply(i,b):function(e,t,n,i){var o=1&t,s=Di(e);return function t(){for(var a=-1,c=arguments.length,u=-1,l=i.length,f=r(l+c),p=this&&this!==ot&&this instanceof t?s:e;++u<l;)f[u]=i[u];for(;c--;)f[u++]=arguments[++a];return vt(p,o?n:this,f)}}(e,t,n,s);else var w=function(e,t,n){var r=1&t,i=Di(e);return function t(){return(this&&this!==ot&&this instanceof t?i:e).apply(r?n:this,arguments)}}(e,t,n);return Mo((y?Zr:Oo)(w,b),e,t)}function Xi(e,t,n,r){return e===i||Us(e,Te[n])&&!Le.call(r,n)?t:e}function Ji(e,t,n,r,o,s){return ta(e)&&ta(t)&&(s.set(t,e),$r(e,t,i,Ji,s),s.delete(t)),e}function Zi(e){return oa(e)?i:e}function Qi(e,t,n,r,o,s){var a=1&n,c=e.length,u=t.length;if(c!=u&&!(a&&u>c))return!1;var l=s.get(e),f=s.get(t);if(l&&f)return l==t&&f==e;var p=-1,h=!0,d=2&n?new Gn:i;for(s.set(e,t),s.set(t,e);++p<c;){var m=e[p],g=t[p];if(r)var v=a?r(g,m,p,t,e,s):r(m,g,p,e,t,s);if(v!==i){if(v)continue;h=!1;break}if(d){if(!Ot(t,(function(e,t){if(!qt(d,t)&&(m===e||o(m,e,n,r,s)))return d.push(t)}))){h=!1;break}}else if(m!==g&&!o(m,g,n,r,s)){h=!1;break}}return s.delete(e),s.delete(t),h}function eo(e){return Ro(ko(e,i,Vo),e+"")}function to(e){return xr(e,Ma,lo)}function no(e){return xr(e,La,fo)}var ro=On?function(e){return On.get(e)}:uc;function io(e){for(var t=e.name+"",n=Tn[t],r=Le.call(Tn,t)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==e)return i.name}return t}function oo(e){return(Le.call(Bn,"placeholder")?Bn:e).placeholder}function so(){var e=Bn.iteratee||oc;return e=e===oc?Nr:e,arguments.length?e(arguments[0],arguments[1]):e}function ao(e,t){var n,r,i=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof t?"string":"hash"]:i.map}function co(e){for(var t=Ma(e),n=t.length;n--;){var r=t[n],i=e[r];t[n]=[r,i,xo(i)]}return t}function uo(e,t){var n=function(e,t){return null==e?i:e[t]}(e,t);return Lr(n)?n:i}var lo=pn?function(e){return null==e?[]:(e=Ce(e),Et(pn(e),(function(t){return et.call(e,t)})))}:gc,fo=pn?function(e){for(var t=[];e;)St(t,lo(e)),e=Ve(e);return t}:gc,po=Cr;function ho(e,t,n){for(var r=-1,i=(t=vi(t,e)).length,o=!1;++r<i;){var s=jo(t[r]);if(!(o=null!=e&&n(e,s)))break;e=e[s]}return o||++r!=i?o:!!(i=null==e?0:e.length)&&ea(i)&&vo(s,i)&&(qs(e)||Hs(e))}function mo(e){return"function"!=typeof e.constructor||Eo(e)?{}:$n(Ve(e))}function go(e){return qs(e)||Hs(e)||!!(it&&e&&e[it])}function vo(e,t){var n=typeof e;return!!(t=null==t?f:t)&&("number"==n||"symbol"!=n&&ve.test(e))&&e>-1&&e%1==0&&e<t}function yo(e,t,n){if(!ta(n))return!1;var r=typeof t;return!!("number"==r?Gs(n)&&vo(t,n.length):"string"==r&&t in n)&&Us(n[t],e)}function bo(e,t){if(qs(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!ua(e))||Q.test(e)||!Z.test(e)||null!=t&&e in Ce(t)}function wo(e){var t=io(e),n=Bn[t];if("function"!=typeof n||!(t in zn.prototype))return!1;if(e===n)return!0;var r=ro(n);return!!r&&e===r[0]}(xn&&po(new xn(new ArrayBuffer(1)))!=M||Cn&&po(new Cn)!=E||kn&&po(kn.resolve())!=k||Sn&&po(new Sn)!=A||An&&po(new An)!=T)&&(po=function(e){var t=Cr(e),n=t==C?e.constructor:i,r=n?Bo(n):"";if(r)switch(r){case Rn:return M;case Mn:return E;case Ln:return k;case Nn:return A;case Dn:return T}return t});var _o=Re?Zs:vc;function Eo(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||Te)}function xo(e){return e==e&&!ta(e)}function Co(e,t){return function(n){return null!=n&&n[e]===t&&(t!==i||e in Ce(n))}}function ko(e,t,n){return t=vn(t===i?e.length-1:t,0),function(){for(var i=arguments,o=-1,s=vn(i.length-t,0),a=r(s);++o<s;)a[o]=i[t+o];o=-1;for(var c=r(t+1);++o<t;)c[o]=i[o];return c[t]=n(a),vt(e,this,c)}}function So(e,t){return t.length<2?e:Er(e,ti(t,0,-1))}function Ao(e,t){for(var n=e.length,r=yn(t.length,n),o=Ai(e);r--;){var s=t[r];e[r]=vo(s,n)?o[s]:i}return e}function Io(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var Oo=Lo(Zr),To=jt||function(e,t){return ot.setTimeout(e,t)},Ro=Lo(Qr);function Mo(e,t,n){var r=t+"";return Ro(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace(oe,"{\n/* [wrapped with "+t+"] */\n")}(r,function(e,t){return bt(d,(function(n){var r="_."+n[0];t&n[1]&&!xt(e,r)&&e.push(r)})),e.sort()}(function(e){var t=e.match(se);return t?t[1].split(ae):[]}(r),n)))}function Lo(e){var t=0,n=0;return function(){var r=bn(),o=16-(r-n);if(n=r,o>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(i,arguments)}}function No(e,t){var n=-1,r=e.length,o=r-1;for(t=t===i?r:t;++n<t;){var s=Vr(n,o),a=e[s];e[s]=e[n],e[n]=a}return e.length=t,e}var Do,Po,Fo=(Do=Ds((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(ee,(function(e,n,r,i){t.push(r?i.replace(le,"$1"):n||e)})),t}),(function(e){return 500===Po.size&&Po.clear(),e})),Po=Do.cache,Do);function jo(e){if("string"==typeof e||ua(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function Bo(e){if(null!=e){try{return Me.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function $o(e){if(e instanceof zn)return e.clone();var t=new Wn(e.__wrapped__,e.__chain__);return t.__actions__=Ai(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var Uo=Kr((function(e,t){return Ks(e)?lr(e,gr(t,1,Ks,!0)):[]})),Wo=Kr((function(e,t){var n=Jo(t);return Ks(n)&&(n=i),Ks(e)?lr(e,gr(t,1,Ks,!0),so(n,2)):[]})),zo=Kr((function(e,t){var n=Jo(t);return Ks(n)&&(n=i),Ks(e)?lr(e,gr(t,1,Ks,!0),i,n):[]}));function Ho(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=null==n?0:ma(n);return i<0&&(i=vn(r+i,0)),Mt(e,so(t,3),i)}function qo(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r-1;return n!==i&&(o=ma(n),o=n<0?vn(r+o,0):yn(o,r-1)),Mt(e,so(t,3),o,!0)}function Vo(e){return null!=e&&e.length?gr(e,1):[]}function Go(e){return e&&e.length?e[0]:i}var Ko=Kr((function(e){var t=kt(e,mi);return t.length&&t[0]===e[0]?Ir(t):[]})),Yo=Kr((function(e){var t=Jo(e),n=kt(e,mi);return t===Jo(n)?t=i:n.pop(),n.length&&n[0]===e[0]?Ir(n,so(t,2)):[]})),Xo=Kr((function(e){var t=Jo(e),n=kt(e,mi);return(t="function"==typeof t?t:i)&&n.pop(),n.length&&n[0]===e[0]?Ir(n,i,t):[]}));function Jo(e){var t=null==e?0:e.length;return t?e[t-1]:i}var Zo=Kr(Qo);function Qo(e,t){return e&&e.length&&t&&t.length?Hr(e,t):e}var es=eo((function(e,t){var n=null==e?0:e.length,r=or(e,t);return qr(e,kt(t,(function(e){return vo(e,n)?+e:e})).sort(Ci)),r}));function ts(e){return null==e?e:En.call(e)}var ns=Kr((function(e){return ci(gr(e,1,Ks,!0))})),rs=Kr((function(e){var t=Jo(e);return Ks(t)&&(t=i),ci(gr(e,1,Ks,!0),so(t,2))})),is=Kr((function(e){var t=Jo(e);return t="function"==typeof t?t:i,ci(gr(e,1,Ks,!0),i,t)}));function os(e){if(!e||!e.length)return[];var t=0;return e=Et(e,(function(e){if(Ks(e))return t=vn(e.length,t),!0})),Ut(t,(function(t){return kt(e,Ft(t))}))}function ss(e,t){if(!e||!e.length)return[];var n=os(e);return null==t?n:kt(n,(function(e){return vt(t,i,e)}))}var as=Kr((function(e,t){return Ks(e)?lr(e,t):[]})),cs=Kr((function(e){return hi(Et(e,Ks))})),us=Kr((function(e){var t=Jo(e);return Ks(t)&&(t=i),hi(Et(e,Ks),so(t,2))})),ls=Kr((function(e){var t=Jo(e);return t="function"==typeof t?t:i,hi(Et(e,Ks),i,t)})),fs=Kr(os),ps=Kr((function(e){var t=e.length,n=t>1?e[t-1]:i;return n="function"==typeof n?(e.pop(),n):i,ss(e,n)}));function hs(e){var t=Bn(e);return t.__chain__=!0,t}function ds(e,t){return t(e)}var ms=eo((function(e){var t=e.length,n=t?e[0]:0,r=this.__wrapped__,o=function(t){return or(t,e)};return!(t>1||this.__actions__.length)&&r instanceof zn&&vo(n)?((r=r.slice(n,+n+(t?1:0))).__actions__.push({func:ds,args:[o],thisArg:i}),new Wn(r,this.__chain__).thru((function(e){return t&&!e.length&&e.push(i),e}))):this.thru(o)})),gs=Oi((function(e,t,n){Le.call(e,n)?++e[n]:ir(e,n,1)})),vs=Pi(Ho),ys=Pi(qo);function bs(e,t){return(qs(e)?bt:fr)(e,so(t,3))}function ws(e,t){return(qs(e)?wt:pr)(e,so(t,3))}var _s=Oi((function(e,t,n){Le.call(e,n)?e[n].push(t):ir(e,n,[t])})),Es=Kr((function(e,t,n){var i=-1,o="function"==typeof t,s=Gs(e)?r(e.length):[];return fr(e,(function(e){s[++i]=o?vt(t,e,n):Or(e,t,n)})),s})),xs=Oi((function(e,t,n){ir(e,n,t)}));function Cs(e,t){return(qs(e)?kt:Fr)(e,so(t,3))}var ks=Oi((function(e,t,n){e[n?0:1].push(t)}),(function(){return[[],[]]})),Ss=Kr((function(e,t){if(null==e)return[];var n=t.length;return n>1&&yo(e,t[0],t[1])?t=[]:n>2&&yo(t[0],t[1],t[2])&&(t=[t[0]]),Wr(e,gr(t,1),[])})),As=Tt||function(){return ot.Date.now()};function Is(e,t,n){return t=n?i:t,t=e&&null==t?e.length:t,Yi(e,u,i,i,i,i,t)}function Os(e,t){var n;if("function"!=typeof t)throw new Ae(o);return e=ma(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=i),n}}var Ts=Kr((function(e,t,n){var r=1;if(n.length){var i=tn(n,oo(Ts));r|=c}return Yi(e,r,t,n,i)})),Rs=Kr((function(e,t,n){var r=3;if(n.length){var i=tn(n,oo(Rs));r|=c}return Yi(t,r,e,n,i)}));function Ms(e,t,n){var r,s,a,c,u,l,f=0,p=!1,h=!1,d=!0;if("function"!=typeof e)throw new Ae(o);function m(t){var n=r,o=s;return r=s=i,f=t,c=e.apply(o,n)}function g(e){return f=e,u=To(y,t),p?m(e):c}function v(e){var n=e-l;return l===i||n>=t||n<0||h&&e-f>=a}function y(){var e=As();if(v(e))return b(e);u=To(y,function(e){var n=t-(e-l);return h?yn(n,a-(e-f)):n}(e))}function b(e){return u=i,d&&r?m(e):(r=s=i,c)}function w(){var e=As(),n=v(e);if(r=arguments,s=this,l=e,n){if(u===i)return g(l);if(h)return wi(u),u=To(y,t),m(l)}return u===i&&(u=To(y,t)),c}return t=va(t)||0,ta(n)&&(p=!!n.leading,a=(h="maxWait"in n)?vn(va(n.maxWait)||0,t):a,d="trailing"in n?!!n.trailing:d),w.cancel=function(){u!==i&&wi(u),f=0,r=l=s=u=i},w.flush=function(){return u===i?c:b(As())},w}var Ls=Kr((function(e,t){return ur(e,1,t)})),Ns=Kr((function(e,t,n){return ur(e,va(t)||0,n)}));function Ds(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new Ae(o);var n=function(){var r=arguments,i=t?t.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var s=e.apply(this,r);return n.cache=o.set(i,s)||o,s};return n.cache=new(Ds.Cache||Vn),n}function Ps(e){if("function"!=typeof e)throw new Ae(o);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}Ds.Cache=Vn;var Fs=yi((function(e,t){var n=(t=1==t.length&&qs(t[0])?kt(t[0],zt(so())):kt(gr(t,1),zt(so()))).length;return Kr((function(r){for(var i=-1,o=yn(r.length,n);++i<o;)r[i]=t[i].call(this,r[i]);return vt(e,this,r)}))})),js=Kr((function(e,t){var n=tn(t,oo(js));return Yi(e,c,i,t,n)})),Bs=Kr((function(e,t){var n=tn(t,oo(Bs));return Yi(e,64,i,t,n)})),$s=eo((function(e,t){return Yi(e,256,i,i,i,t)}));function Us(e,t){return e===t||e!=e&&t!=t}var Ws=Hi(kr),zs=Hi((function(e,t){return e>=t})),Hs=Tr(function(){return arguments}())?Tr:function(e){return na(e)&&Le.call(e,"callee")&&!et.call(e,"callee")},qs=r.isArray,Vs=ft?zt(ft):function(e){return na(e)&&Cr(e)==R};function Gs(e){return null!=e&&ea(e.length)&&!Zs(e)}function Ks(e){return na(e)&&Gs(e)}var Ys=hn||vc,Xs=pt?zt(pt):function(e){return na(e)&&Cr(e)==y};function Js(e){if(!na(e))return!1;var t=Cr(e);return t==b||"[object DOMException]"==t||"string"==typeof e.message&&"string"==typeof e.name&&!oa(e)}function Zs(e){if(!ta(e))return!1;var t=Cr(e);return t==w||t==_||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Qs(e){return"number"==typeof e&&e==ma(e)}function ea(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=f}function ta(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function na(e){return null!=e&&"object"==typeof e}var ra=ht?zt(ht):function(e){return na(e)&&po(e)==E};function ia(e){return"number"==typeof e||na(e)&&Cr(e)==x}function oa(e){if(!na(e)||Cr(e)!=C)return!1;var t=Ve(e);if(null===t)return!0;var n=Le.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&Me.call(n)==Fe}var sa=dt?zt(dt):function(e){return na(e)&&Cr(e)==S},aa=mt?zt(mt):function(e){return na(e)&&po(e)==A};function ca(e){return"string"==typeof e||!qs(e)&&na(e)&&Cr(e)==I}function ua(e){return"symbol"==typeof e||na(e)&&Cr(e)==O}var la=gt?zt(gt):function(e){return na(e)&&ea(e.length)&&!!Ze[Cr(e)]},fa=Hi(Pr),pa=Hi((function(e,t){return e<=t}));function ha(e){if(!e)return[];if(Gs(e))return ca(e)?sn(e):Ai(e);if(st&&e[st])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[st]());var t=po(e);return(t==E?Qt:t==A?nn:Ua)(e)}function da(e){return e?(e=va(e))===l||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}function ma(e){var t=da(e),n=t%1;return t==t?n?t-n:t:0}function ga(e){return e?sr(ma(e),0,h):0}function va(e){if("number"==typeof e)return e;if(ua(e))return p;if(ta(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=ta(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=Wt(e);var n=de.test(e);return n||ge.test(e)?nt(e.slice(2),n?2:8):he.test(e)?p:+e}function ya(e){return Ii(e,La(e))}function ba(e){return null==e?"":ai(e)}var wa=Ti((function(e,t){if(Eo(t)||Gs(t))Ii(t,Ma(t),e);else for(var n in t)Le.call(t,n)&&er(e,n,t[n])})),_a=Ti((function(e,t){Ii(t,La(t),e)})),Ea=Ti((function(e,t,n,r){Ii(t,La(t),e,r)})),xa=Ti((function(e,t,n,r){Ii(t,Ma(t),e,r)})),Ca=eo(or),ka=Kr((function(e,t){e=Ce(e);var n=-1,r=t.length,o=r>2?t[2]:i;for(o&&yo(t[0],t[1],o)&&(r=1);++n<r;)for(var s=t[n],a=La(s),c=-1,u=a.length;++c<u;){var l=a[c],f=e[l];(f===i||Us(f,Te[l])&&!Le.call(e,l))&&(e[l]=s[l])}return e})),Sa=Kr((function(e){return e.push(i,Ji),vt(Da,i,e)}));function Aa(e,t,n){var r=null==e?i:Er(e,t);return r===i?n:r}function Ia(e,t){return null!=e&&ho(e,t,Ar)}var Oa=Bi((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=Pe.call(t)),e[t]=n}),tc(ic)),Ta=Bi((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=Pe.call(t)),Le.call(e,t)?e[t].push(n):e[t]=[n]}),so),Ra=Kr(Or);function Ma(e){return Gs(e)?Yn(e):Dr(e)}function La(e){return Gs(e)?Yn(e,!0):function(e){if(!ta(e))return function(e){var t=[];if(null!=e)for(var n in Ce(e))t.push(n);return t}(e);var t=Eo(e),n=[];for(var r in e)("constructor"!=r||!t&&Le.call(e,r))&&n.push(r);return n}(e)}var Na=Ti((function(e,t,n){$r(e,t,n)})),Da=Ti((function(e,t,n,r){$r(e,t,n,r)})),Pa=eo((function(e,t){var n={};if(null==e)return n;var r=!1;t=kt(t,(function(t){return t=vi(t,e),r||(r=t.length>1),t})),Ii(e,no(e),n),r&&(n=ar(n,7,Zi));for(var i=t.length;i--;)ui(n,t[i]);return n})),Fa=eo((function(e,t){return null==e?{}:function(e,t){return zr(e,t,(function(t,n){return Ia(e,n)}))}(e,t)}));function ja(e,t){if(null==e)return{};var n=kt(no(e),(function(e){return[e]}));return t=so(t),zr(e,n,(function(e,n){return t(e,n[0])}))}var Ba=Ki(Ma),$a=Ki(La);function Ua(e){return null==e?[]:Ht(e,Ma(e))}var Wa=Ni((function(e,t,n){return t=t.toLowerCase(),e+(n?za(t):t)}));function za(e){return Ja(ba(e).toLowerCase())}function Ha(e){return(e=ba(e))&&e.replace(ye,Yt).replace(qe,"")}var qa=Ni((function(e,t,n){return e+(n?"-":"")+t.toLowerCase()})),Va=Ni((function(e,t,n){return e+(n?" ":"")+t.toLowerCase()})),Ga=Li("toLowerCase"),Ka=Ni((function(e,t,n){return e+(n?"_":"")+t.toLowerCase()})),Ya=Ni((function(e,t,n){return e+(n?" ":"")+Ja(t)})),Xa=Ni((function(e,t,n){return e+(n?" ":"")+t.toUpperCase()})),Ja=Li("toUpperCase");function Za(e,t,n){return e=ba(e),(t=n?i:t)===i?function(e){return Ye.test(e)}(e)?function(e){return e.match(Ge)||[]}(e):function(e){return e.match(ce)||[]}(e):e.match(t)||[]}var Qa=Kr((function(e,t){try{return vt(e,i,t)}catch(e){return Js(e)?e:new _e(e)}})),ec=eo((function(e,t){return bt(t,(function(t){t=jo(t),ir(e,t,Ts(e[t],e))})),e}));function tc(e){return function(){return e}}var nc=Fi(),rc=Fi(!0);function ic(e){return e}function oc(e){return Nr("function"==typeof e?e:ar(e,1))}var sc=Kr((function(e,t){return function(n){return Or(n,e,t)}})),ac=Kr((function(e,t){return function(n){return Or(e,n,t)}}));function cc(e,t,n){var r=Ma(t),i=_r(t,r);null!=n||ta(t)&&(i.length||!r.length)||(n=t,t=e,e=this,i=_r(t,Ma(t)));var o=!(ta(n)&&"chain"in n&&!n.chain),s=Zs(e);return bt(i,(function(n){var r=t[n];e[n]=r,s&&(e.prototype[n]=function(){var t=this.__chain__;if(o||t){var n=e(this.__wrapped__),i=n.__actions__=Ai(this.__actions__);return i.push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,St([this.value()],arguments))})})),e}function uc(){}var lc=Ui(kt),fc=Ui(_t),pc=Ui(Ot);function hc(e){return bo(e)?Ft(jo(e)):function(e){return function(t){return Er(t,e)}}(e)}var dc=zi(),mc=zi(!0);function gc(){return[]}function vc(){return!1}var yc,bc=$i((function(e,t){return e+t}),0),wc=Vi("ceil"),_c=$i((function(e,t){return e/t}),1),Ec=Vi("floor"),xc=$i((function(e,t){return e*t}),1),Cc=Vi("round"),kc=$i((function(e,t){return e-t}),0);return Bn.after=function(e,t){if("function"!=typeof t)throw new Ae(o);return e=ma(e),function(){if(--e<1)return t.apply(this,arguments)}},Bn.ary=Is,Bn.assign=wa,Bn.assignIn=_a,Bn.assignInWith=Ea,Bn.assignWith=xa,Bn.at=Ca,Bn.before=Os,Bn.bind=Ts,Bn.bindAll=ec,Bn.bindKey=Rs,Bn.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return qs(e)?e:[e]},Bn.chain=hs,Bn.chunk=function(e,t,n){t=(n?yo(e,t,n):t===i)?1:vn(ma(t),0);var o=null==e?0:e.length;if(!o||t<1)return[];for(var s=0,a=0,c=r(ln(o/t));s<o;)c[a++]=ti(e,s,s+=t);return c},Bn.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,i=[];++t<n;){var o=e[t];o&&(i[r++]=o)}return i},Bn.concat=function(){var e=arguments.length;if(!e)return[];for(var t=r(e-1),n=arguments[0],i=e;i--;)t[i-1]=arguments[i];return St(qs(n)?Ai(n):[n],gr(t,1))},Bn.cond=function(e){var t=null==e?0:e.length,n=so();return e=t?kt(e,(function(e){if("function"!=typeof e[1])throw new Ae(o);return[n(e[0]),e[1]]})):[],Kr((function(n){for(var r=-1;++r<t;){var i=e[r];if(vt(i[0],this,n))return vt(i[1],this,n)}}))},Bn.conforms=function(e){return function(e){var t=Ma(e);return function(n){return cr(n,e,t)}}(ar(e,1))},Bn.constant=tc,Bn.countBy=gs,Bn.create=function(e,t){var n=$n(e);return null==t?n:rr(n,t)},Bn.curry=function e(t,n,r){var o=Yi(t,8,i,i,i,i,i,n=r?i:n);return o.placeholder=e.placeholder,o},Bn.curryRight=function e(t,n,r){var o=Yi(t,16,i,i,i,i,i,n=r?i:n);return o.placeholder=e.placeholder,o},Bn.debounce=Ms,Bn.defaults=ka,Bn.defaultsDeep=Sa,Bn.defer=Ls,Bn.delay=Ns,Bn.difference=Uo,Bn.differenceBy=Wo,Bn.differenceWith=zo,Bn.drop=function(e,t,n){var r=null==e?0:e.length;return r?ti(e,(t=n||t===i?1:ma(t))<0?0:t,r):[]},Bn.dropRight=function(e,t,n){var r=null==e?0:e.length;return r?ti(e,0,(t=r-(t=n||t===i?1:ma(t)))<0?0:t):[]},Bn.dropRightWhile=function(e,t){return e&&e.length?fi(e,so(t,3),!0,!0):[]},Bn.dropWhile=function(e,t){return e&&e.length?fi(e,so(t,3),!0):[]},Bn.fill=function(e,t,n,r){var o=null==e?0:e.length;return o?(n&&"number"!=typeof n&&yo(e,t,n)&&(n=0,r=o),function(e,t,n,r){var o=e.length;for((n=ma(n))<0&&(n=-n>o?0:o+n),(r=r===i||r>o?o:ma(r))<0&&(r+=o),r=n>r?0:ga(r);n<r;)e[n++]=t;return e}(e,t,n,r)):[]},Bn.filter=function(e,t){return(qs(e)?Et:mr)(e,so(t,3))},Bn.flatMap=function(e,t){return gr(Cs(e,t),1)},Bn.flatMapDeep=function(e,t){return gr(Cs(e,t),l)},Bn.flatMapDepth=function(e,t,n){return n=n===i?1:ma(n),gr(Cs(e,t),n)},Bn.flatten=Vo,Bn.flattenDeep=function(e){return null!=e&&e.length?gr(e,l):[]},Bn.flattenDepth=function(e,t){return null!=e&&e.length?gr(e,t=t===i?1:ma(t)):[]},Bn.flip=function(e){return Yi(e,512)},Bn.flow=nc,Bn.flowRight=rc,Bn.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var i=e[t];r[i[0]]=i[1]}return r},Bn.functions=function(e){return null==e?[]:_r(e,Ma(e))},Bn.functionsIn=function(e){return null==e?[]:_r(e,La(e))},Bn.groupBy=_s,Bn.initial=function(e){return null!=e&&e.length?ti(e,0,-1):[]},Bn.intersection=Ko,Bn.intersectionBy=Yo,Bn.intersectionWith=Xo,Bn.invert=Oa,Bn.invertBy=Ta,Bn.invokeMap=Es,Bn.iteratee=oc,Bn.keyBy=xs,Bn.keys=Ma,Bn.keysIn=La,Bn.map=Cs,Bn.mapKeys=function(e,t){var n={};return t=so(t,3),br(e,(function(e,r,i){ir(n,t(e,r,i),e)})),n},Bn.mapValues=function(e,t){var n={};return t=so(t,3),br(e,(function(e,r,i){ir(n,r,t(e,r,i))})),n},Bn.matches=function(e){return jr(ar(e,1))},Bn.matchesProperty=function(e,t){return Br(e,ar(t,1))},Bn.memoize=Ds,Bn.merge=Na,Bn.mergeWith=Da,Bn.method=sc,Bn.methodOf=ac,Bn.mixin=cc,Bn.negate=Ps,Bn.nthArg=function(e){return e=ma(e),Kr((function(t){return Ur(t,e)}))},Bn.omit=Pa,Bn.omitBy=function(e,t){return ja(e,Ps(so(t)))},Bn.once=function(e){return Os(2,e)},Bn.orderBy=function(e,t,n,r){return null==e?[]:(qs(t)||(t=null==t?[]:[t]),qs(n=r?i:n)||(n=null==n?[]:[n]),Wr(e,t,n))},Bn.over=lc,Bn.overArgs=Fs,Bn.overEvery=fc,Bn.overSome=pc,Bn.partial=js,Bn.partialRight=Bs,Bn.partition=ks,Bn.pick=Fa,Bn.pickBy=ja,Bn.property=hc,Bn.propertyOf=function(e){return function(t){return null==e?i:Er(e,t)}},Bn.pull=Zo,Bn.pullAll=Qo,Bn.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?Hr(e,t,so(n,2)):e},Bn.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?Hr(e,t,i,n):e},Bn.pullAt=es,Bn.range=dc,Bn.rangeRight=mc,Bn.rearg=$s,Bn.reject=function(e,t){return(qs(e)?Et:mr)(e,Ps(so(t,3)))},Bn.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,i=[],o=e.length;for(t=so(t,3);++r<o;){var s=e[r];t(s,r,e)&&(n.push(s),i.push(r))}return qr(e,i),n},Bn.rest=function(e,t){if("function"!=typeof e)throw new Ae(o);return Kr(e,t=t===i?t:ma(t))},Bn.reverse=ts,Bn.sampleSize=function(e,t,n){return t=(n?yo(e,t,n):t===i)?1:ma(t),(qs(e)?Jn:Xr)(e,t)},Bn.set=function(e,t,n){return null==e?e:Jr(e,t,n)},Bn.setWith=function(e,t,n,r){return r="function"==typeof r?r:i,null==e?e:Jr(e,t,n,r)},Bn.shuffle=function(e){return(qs(e)?Zn:ei)(e)},Bn.slice=function(e,t,n){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&yo(e,t,n)?(t=0,n=r):(t=null==t?0:ma(t),n=n===i?r:ma(n)),ti(e,t,n)):[]},Bn.sortBy=Ss,Bn.sortedUniq=function(e){return e&&e.length?oi(e):[]},Bn.sortedUniqBy=function(e,t){return e&&e.length?oi(e,so(t,2)):[]},Bn.split=function(e,t,n){return n&&"number"!=typeof n&&yo(e,t,n)&&(t=n=i),(n=n===i?h:n>>>0)?(e=ba(e))&&("string"==typeof t||null!=t&&!sa(t))&&!(t=ai(t))&&Zt(e)?bi(sn(e),0,n):e.split(t,n):[]},Bn.spread=function(e,t){if("function"!=typeof e)throw new Ae(o);return t=null==t?0:vn(ma(t),0),Kr((function(n){var r=n[t],i=bi(n,0,t);return r&&St(i,r),vt(e,this,i)}))},Bn.tail=function(e){var t=null==e?0:e.length;return t?ti(e,1,t):[]},Bn.take=function(e,t,n){return e&&e.length?ti(e,0,(t=n||t===i?1:ma(t))<0?0:t):[]},Bn.takeRight=function(e,t,n){var r=null==e?0:e.length;return r?ti(e,(t=r-(t=n||t===i?1:ma(t)))<0?0:t,r):[]},Bn.takeRightWhile=function(e,t){return e&&e.length?fi(e,so(t,3),!1,!0):[]},Bn.takeWhile=function(e,t){return e&&e.length?fi(e,so(t,3)):[]},Bn.tap=function(e,t){return t(e),e},Bn.throttle=function(e,t,n){var r=!0,i=!0;if("function"!=typeof e)throw new Ae(o);return ta(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),Ms(e,t,{leading:r,maxWait:t,trailing:i})},Bn.thru=ds,Bn.toArray=ha,Bn.toPairs=Ba,Bn.toPairsIn=$a,Bn.toPath=function(e){return qs(e)?kt(e,jo):ua(e)?[e]:Ai(Fo(ba(e)))},Bn.toPlainObject=ya,Bn.transform=function(e,t,n){var r=qs(e),i=r||Ys(e)||la(e);if(t=so(t,4),null==n){var o=e&&e.constructor;n=i?r?new o:[]:ta(e)&&Zs(o)?$n(Ve(e)):{}}return(i?bt:br)(e,(function(e,r,i){return t(n,e,r,i)})),n},Bn.unary=function(e){return Is(e,1)},Bn.union=ns,Bn.unionBy=rs,Bn.unionWith=is,Bn.uniq=function(e){return e&&e.length?ci(e):[]},Bn.uniqBy=function(e,t){return e&&e.length?ci(e,so(t,2)):[]},Bn.uniqWith=function(e,t){return t="function"==typeof t?t:i,e&&e.length?ci(e,i,t):[]},Bn.unset=function(e,t){return null==e||ui(e,t)},Bn.unzip=os,Bn.unzipWith=ss,Bn.update=function(e,t,n){return null==e?e:li(e,t,gi(n))},Bn.updateWith=function(e,t,n,r){return r="function"==typeof r?r:i,null==e?e:li(e,t,gi(n),r)},Bn.values=Ua,Bn.valuesIn=function(e){return null==e?[]:Ht(e,La(e))},Bn.without=as,Bn.words=Za,Bn.wrap=function(e,t){return js(gi(t),e)},Bn.xor=cs,Bn.xorBy=us,Bn.xorWith=ls,Bn.zip=fs,Bn.zipObject=function(e,t){return di(e||[],t||[],er)},Bn.zipObjectDeep=function(e,t){return di(e||[],t||[],Jr)},Bn.zipWith=ps,Bn.entries=Ba,Bn.entriesIn=$a,Bn.extend=_a,Bn.extendWith=Ea,cc(Bn,Bn),Bn.add=bc,Bn.attempt=Qa,Bn.camelCase=Wa,Bn.capitalize=za,Bn.ceil=wc,Bn.clamp=function(e,t,n){return n===i&&(n=t,t=i),n!==i&&(n=(n=va(n))==n?n:0),t!==i&&(t=(t=va(t))==t?t:0),sr(va(e),t,n)},Bn.clone=function(e){return ar(e,4)},Bn.cloneDeep=function(e){return ar(e,5)},Bn.cloneDeepWith=function(e,t){return ar(e,5,t="function"==typeof t?t:i)},Bn.cloneWith=function(e,t){return ar(e,4,t="function"==typeof t?t:i)},Bn.conformsTo=function(e,t){return null==t||cr(e,t,Ma(t))},Bn.deburr=Ha,Bn.defaultTo=function(e,t){return null==e||e!=e?t:e},Bn.divide=_c,Bn.endsWith=function(e,t,n){e=ba(e),t=ai(t);var r=e.length,o=n=n===i?r:sr(ma(n),0,r);return(n-=t.length)>=0&&e.slice(n,o)==t},Bn.eq=Us,Bn.escape=function(e){return(e=ba(e))&&K.test(e)?e.replace(V,Xt):e},Bn.escapeRegExp=function(e){return(e=ba(e))&&ne.test(e)?e.replace(te,"\\$&"):e},Bn.every=function(e,t,n){var r=qs(e)?_t:hr;return n&&yo(e,t,n)&&(t=i),r(e,so(t,3))},Bn.find=vs,Bn.findIndex=Ho,Bn.findKey=function(e,t){return Rt(e,so(t,3),br)},Bn.findLast=ys,Bn.findLastIndex=qo,Bn.findLastKey=function(e,t){return Rt(e,so(t,3),wr)},Bn.floor=Ec,Bn.forEach=bs,Bn.forEachRight=ws,Bn.forIn=function(e,t){return null==e?e:vr(e,so(t,3),La)},Bn.forInRight=function(e,t){return null==e?e:yr(e,so(t,3),La)},Bn.forOwn=function(e,t){return e&&br(e,so(t,3))},Bn.forOwnRight=function(e,t){return e&&wr(e,so(t,3))},Bn.get=Aa,Bn.gt=Ws,Bn.gte=zs,Bn.has=function(e,t){return null!=e&&ho(e,t,Sr)},Bn.hasIn=Ia,Bn.head=Go,Bn.identity=ic,Bn.includes=function(e,t,n,r){e=Gs(e)?e:Ua(e),n=n&&!r?ma(n):0;var i=e.length;return n<0&&(n=vn(i+n,0)),ca(e)?n<=i&&e.indexOf(t,n)>-1:!!i&&Lt(e,t,n)>-1},Bn.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=null==n?0:ma(n);return i<0&&(i=vn(r+i,0)),Lt(e,t,i)},Bn.inRange=function(e,t,n){return t=da(t),n===i?(n=t,t=0):n=da(n),function(e,t,n){return e>=yn(t,n)&&e<vn(t,n)}(e=va(e),t,n)},Bn.invoke=Ra,Bn.isArguments=Hs,Bn.isArray=qs,Bn.isArrayBuffer=Vs,Bn.isArrayLike=Gs,Bn.isArrayLikeObject=Ks,Bn.isBoolean=function(e){return!0===e||!1===e||na(e)&&Cr(e)==v},Bn.isBuffer=Ys,Bn.isDate=Xs,Bn.isElement=function(e){return na(e)&&1===e.nodeType&&!oa(e)},Bn.isEmpty=function(e){if(null==e)return!0;if(Gs(e)&&(qs(e)||"string"==typeof e||"function"==typeof e.splice||Ys(e)||la(e)||Hs(e)))return!e.length;var t=po(e);if(t==E||t==A)return!e.size;if(Eo(e))return!Dr(e).length;for(var n in e)if(Le.call(e,n))return!1;return!0},Bn.isEqual=function(e,t){return Rr(e,t)},Bn.isEqualWith=function(e,t,n){var r=(n="function"==typeof n?n:i)?n(e,t):i;return r===i?Rr(e,t,i,n):!!r},Bn.isError=Js,Bn.isFinite=function(e){return"number"==typeof e&&dn(e)},Bn.isFunction=Zs,Bn.isInteger=Qs,Bn.isLength=ea,Bn.isMap=ra,Bn.isMatch=function(e,t){return e===t||Mr(e,t,co(t))},Bn.isMatchWith=function(e,t,n){return n="function"==typeof n?n:i,Mr(e,t,co(t),n)},Bn.isNaN=function(e){return ia(e)&&e!=+e},Bn.isNative=function(e){if(_o(e))throw new _e("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Lr(e)},Bn.isNil=function(e){return null==e},Bn.isNull=function(e){return null===e},Bn.isNumber=ia,Bn.isObject=ta,Bn.isObjectLike=na,Bn.isPlainObject=oa,Bn.isRegExp=sa,Bn.isSafeInteger=function(e){return Qs(e)&&e>=-9007199254740991&&e<=f},Bn.isSet=aa,Bn.isString=ca,Bn.isSymbol=ua,Bn.isTypedArray=la,Bn.isUndefined=function(e){return e===i},Bn.isWeakMap=function(e){return na(e)&&po(e)==T},Bn.isWeakSet=function(e){return na(e)&&"[object WeakSet]"==Cr(e)},Bn.join=function(e,t){return null==e?"":mn.call(e,t)},Bn.kebabCase=qa,Bn.last=Jo,Bn.lastIndexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r;return n!==i&&(o=(o=ma(n))<0?vn(r+o,0):yn(o,r-1)),t==t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,o):Mt(e,Dt,o,!0)},Bn.lowerCase=Va,Bn.lowerFirst=Ga,Bn.lt=fa,Bn.lte=pa,Bn.max=function(e){return e&&e.length?dr(e,ic,kr):i},Bn.maxBy=function(e,t){return e&&e.length?dr(e,so(t,2),kr):i},Bn.mean=function(e){return Pt(e,ic)},Bn.meanBy=function(e,t){return Pt(e,so(t,2))},Bn.min=function(e){return e&&e.length?dr(e,ic,Pr):i},Bn.minBy=function(e,t){return e&&e.length?dr(e,so(t,2),Pr):i},Bn.stubArray=gc,Bn.stubFalse=vc,Bn.stubObject=function(){return{}},Bn.stubString=function(){return""},Bn.stubTrue=function(){return!0},Bn.multiply=xc,Bn.nth=function(e,t){return e&&e.length?Ur(e,ma(t)):i},Bn.noConflict=function(){return ot._===this&&(ot._=je),this},Bn.noop=uc,Bn.now=As,Bn.pad=function(e,t,n){e=ba(e);var r=(t=ma(t))?on(e):0;if(!t||r>=t)return e;var i=(t-r)/2;return Wi(fn(i),n)+e+Wi(ln(i),n)},Bn.padEnd=function(e,t,n){e=ba(e);var r=(t=ma(t))?on(e):0;return t&&r<t?e+Wi(t-r,n):e},Bn.padStart=function(e,t,n){e=ba(e);var r=(t=ma(t))?on(e):0;return t&&r<t?Wi(t-r,n)+e:e},Bn.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),wn(ba(e).replace(re,""),t||0)},Bn.random=function(e,t,n){if(n&&"boolean"!=typeof n&&yo(e,t,n)&&(t=n=i),n===i&&("boolean"==typeof t?(n=t,t=i):"boolean"==typeof e&&(n=e,e=i)),e===i&&t===i?(e=0,t=1):(e=da(e),t===i?(t=e,e=0):t=da(t)),e>t){var r=e;e=t,t=r}if(n||e%1||t%1){var o=_n();return yn(e+o*(t-e+tt("1e-"+((o+"").length-1))),t)}return Vr(e,t)},Bn.reduce=function(e,t,n){var r=qs(e)?At:Bt,i=arguments.length<3;return r(e,so(t,4),n,i,fr)},Bn.reduceRight=function(e,t,n){var r=qs(e)?It:Bt,i=arguments.length<3;return r(e,so(t,4),n,i,pr)},Bn.repeat=function(e,t,n){return t=(n?yo(e,t,n):t===i)?1:ma(t),Gr(ba(e),t)},Bn.replace=function(){var e=arguments,t=ba(e[0]);return e.length<3?t:t.replace(e[1],e[2])},Bn.result=function(e,t,n){var r=-1,o=(t=vi(t,e)).length;for(o||(o=1,e=i);++r<o;){var s=null==e?i:e[jo(t[r])];s===i&&(r=o,s=n),e=Zs(s)?s.call(e):s}return e},Bn.round=Cc,Bn.runInContext=e,Bn.sample=function(e){return(qs(e)?Xn:Yr)(e)},Bn.size=function(e){if(null==e)return 0;if(Gs(e))return ca(e)?on(e):e.length;var t=po(e);return t==E||t==A?e.size:Dr(e).length},Bn.snakeCase=Ka,Bn.some=function(e,t,n){var r=qs(e)?Ot:ni;return n&&yo(e,t,n)&&(t=i),r(e,so(t,3))},Bn.sortedIndex=function(e,t){return ri(e,t)},Bn.sortedIndexBy=function(e,t,n){return ii(e,t,so(n,2))},Bn.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=ri(e,t);if(r<n&&Us(e[r],t))return r}return-1},Bn.sortedLastIndex=function(e,t){return ri(e,t,!0)},Bn.sortedLastIndexBy=function(e,t,n){return ii(e,t,so(n,2),!0)},Bn.sortedLastIndexOf=function(e,t){if(null!=e&&e.length){var n=ri(e,t,!0)-1;if(Us(e[n],t))return n}return-1},Bn.startCase=Ya,Bn.startsWith=function(e,t,n){return e=ba(e),n=null==n?0:sr(ma(n),0,e.length),t=ai(t),e.slice(n,n+t.length)==t},Bn.subtract=kc,Bn.sum=function(e){return e&&e.length?$t(e,ic):0},Bn.sumBy=function(e,t){return e&&e.length?$t(e,so(t,2)):0},Bn.template=function(e,t,n){var r=Bn.templateSettings;n&&yo(e,t,n)&&(t=i),e=ba(e),t=Ea({},t,r,Xi);var o,s,a=Ea({},t.imports,r.imports,Xi),c=Ma(a),u=Ht(a,c),l=0,f=t.interpolate||be,p="__p += '",h=ke((t.escape||be).source+"|"+f.source+"|"+(f===J?fe:be).source+"|"+(t.evaluate||be).source+"|$","g"),d="//# sourceURL="+(Le.call(t,"sourceURL")?(t.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Je+"]")+"\n";e.replace(h,(function(t,n,r,i,a,c){return r||(r=i),p+=e.slice(l,c).replace(we,Jt),n&&(o=!0,p+="' +\n__e("+n+") +\n'"),a&&(s=!0,p+="';\n"+a+";\n__p += '"),r&&(p+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=c+t.length,t})),p+="';\n";var m=Le.call(t,"variable")&&t.variable;if(m){if(ue.test(m))throw new _e("Invalid `variable` option passed into `_.template`")}else p="with (obj) {\n"+p+"\n}\n";p=(s?p.replace(W,""):p).replace(z,"$1").replace(H,"$1;"),p="function("+(m||"obj")+") {\n"+(m?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(s?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+p+"return __p\n}";var g=Qa((function(){return Ee(c,d+"return "+p).apply(i,u)}));if(g.source=p,Js(g))throw g;return g},Bn.times=function(e,t){if((e=ma(e))<1||e>f)return[];var n=h,r=yn(e,h);t=so(t),e-=h;for(var i=Ut(r,t);++n<e;)t(n);return i},Bn.toFinite=da,Bn.toInteger=ma,Bn.toLength=ga,Bn.toLower=function(e){return ba(e).toLowerCase()},Bn.toNumber=va,Bn.toSafeInteger=function(e){return e?sr(ma(e),-9007199254740991,f):0===e?e:0},Bn.toString=ba,Bn.toUpper=function(e){return ba(e).toUpperCase()},Bn.trim=function(e,t,n){if((e=ba(e))&&(n||t===i))return Wt(e);if(!e||!(t=ai(t)))return e;var r=sn(e),o=sn(t);return bi(r,Vt(r,o),Gt(r,o)+1).join("")},Bn.trimEnd=function(e,t,n){if((e=ba(e))&&(n||t===i))return e.slice(0,an(e)+1);if(!e||!(t=ai(t)))return e;var r=sn(e);return bi(r,0,Gt(r,sn(t))+1).join("")},Bn.trimStart=function(e,t,n){if((e=ba(e))&&(n||t===i))return e.replace(re,"");if(!e||!(t=ai(t)))return e;var r=sn(e);return bi(r,Vt(r,sn(t))).join("")},Bn.truncate=function(e,t){var n=30,r="...";if(ta(t)){var o="separator"in t?t.separator:o;n="length"in t?ma(t.length):n,r="omission"in t?ai(t.omission):r}var s=(e=ba(e)).length;if(Zt(e)){var a=sn(e);s=a.length}if(n>=s)return e;var c=n-on(r);if(c<1)return r;var u=a?bi(a,0,c).join(""):e.slice(0,c);if(o===i)return u+r;if(a&&(c+=u.length-c),sa(o)){if(e.slice(c).search(o)){var l,f=u;for(o.global||(o=ke(o.source,ba(pe.exec(o))+"g")),o.lastIndex=0;l=o.exec(f);)var p=l.index;u=u.slice(0,p===i?c:p)}}else if(e.indexOf(ai(o),c)!=c){var h=u.lastIndexOf(o);h>-1&&(u=u.slice(0,h))}return u+r},Bn.unescape=function(e){return(e=ba(e))&&G.test(e)?e.replace(q,cn):e},Bn.uniqueId=function(e){var t=++Ne;return ba(e)+t},Bn.upperCase=Xa,Bn.upperFirst=Ja,Bn.each=bs,Bn.eachRight=ws,Bn.first=Go,cc(Bn,(yc={},br(Bn,(function(e,t){Le.call(Bn.prototype,t)||(yc[t]=e)})),yc),{chain:!1}),Bn.VERSION="4.17.21",bt(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(e){Bn[e].placeholder=Bn})),bt(["drop","take"],(function(e,t){zn.prototype[e]=function(n){n=n===i?1:vn(ma(n),0);var r=this.__filtered__&&!t?new zn(this):this.clone();return r.__filtered__?r.__takeCount__=yn(n,r.__takeCount__):r.__views__.push({size:yn(n,h),type:e+(r.__dir__<0?"Right":"")}),r},zn.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}})),bt(["filter","map","takeWhile"],(function(e,t){var n=t+1,r=1==n||3==n;zn.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:so(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}})),bt(["head","last"],(function(e,t){var n="take"+(t?"Right":"");zn.prototype[e]=function(){return this[n](1).value()[0]}})),bt(["initial","tail"],(function(e,t){var n="drop"+(t?"":"Right");zn.prototype[e]=function(){return this.__filtered__?new zn(this):this[n](1)}})),zn.prototype.compact=function(){return this.filter(ic)},zn.prototype.find=function(e){return this.filter(e).head()},zn.prototype.findLast=function(e){return this.reverse().find(e)},zn.prototype.invokeMap=Kr((function(e,t){return"function"==typeof e?new zn(this):this.map((function(n){return Or(n,e,t)}))})),zn.prototype.reject=function(e){return this.filter(Ps(so(e)))},zn.prototype.slice=function(e,t){e=ma(e);var n=this;return n.__filtered__&&(e>0||t<0)?new zn(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==i&&(n=(t=ma(t))<0?n.dropRight(-t):n.take(t-e)),n)},zn.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},zn.prototype.toArray=function(){return this.take(h)},br(zn.prototype,(function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),o=Bn[r?"take"+("last"==t?"Right":""):t],s=r||/^find/.test(t);o&&(Bn.prototype[t]=function(){var t=this.__wrapped__,a=r?[1]:arguments,c=t instanceof zn,u=a[0],l=c||qs(t),f=function(e){var t=o.apply(Bn,St([e],a));return r&&p?t[0]:t};l&&n&&"function"==typeof u&&1!=u.length&&(c=l=!1);var p=this.__chain__,h=!!this.__actions__.length,d=s&&!p,m=c&&!h;if(!s&&l){t=m?t:new zn(this);var g=e.apply(t,a);return g.__actions__.push({func:ds,args:[f],thisArg:i}),new Wn(g,p)}return d&&m?e.apply(this,a):(g=this.thru(f),d?r?g.value()[0]:g.value():g)})})),bt(["pop","push","shift","sort","splice","unshift"],(function(e){var t=Ie[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);Bn.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var i=this.value();return t.apply(qs(i)?i:[],e)}return this[n]((function(n){return t.apply(qs(n)?n:[],e)}))}})),br(zn.prototype,(function(e,t){var n=Bn[t];if(n){var r=n.name+"";Le.call(Tn,r)||(Tn[r]=[]),Tn[r].push({name:t,func:n})}})),Tn[ji(i,2).name]=[{name:"wrapper",func:i}],zn.prototype.clone=function(){var e=new zn(this.__wrapped__);return e.__actions__=Ai(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=Ai(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=Ai(this.__views__),e},zn.prototype.reverse=function(){if(this.__filtered__){var e=new zn(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},zn.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=qs(e),r=t<0,i=n?e.length:0,o=function(e,t,n){for(var r=-1,i=n.length;++r<i;){var o=n[r],s=o.size;switch(o.type){case"drop":e+=s;break;case"dropRight":t-=s;break;case"take":t=yn(t,e+s);break;case"takeRight":e=vn(e,t-s)}}return{start:e,end:t}}(0,i,this.__views__),s=o.start,a=o.end,c=a-s,u=r?a:s-1,l=this.__iteratees__,f=l.length,p=0,h=yn(c,this.__takeCount__);if(!n||!r&&i==c&&h==c)return pi(e,this.__actions__);var d=[];e:for(;c--&&p<h;){for(var m=-1,g=e[u+=t];++m<f;){var v=l[m],y=v.iteratee,b=v.type,w=y(g);if(2==b)g=w;else if(!w){if(1==b)continue e;break e}}d[p++]=g}return d},Bn.prototype.at=ms,Bn.prototype.chain=function(){return hs(this)},Bn.prototype.commit=function(){return new Wn(this.value(),this.__chain__)},Bn.prototype.next=function(){this.__values__===i&&(this.__values__=ha(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?i:this.__values__[this.__index__++]}},Bn.prototype.plant=function(e){for(var t,n=this;n instanceof Un;){var r=$o(n);r.__index__=0,r.__values__=i,t?o.__wrapped__=r:t=r;var o=r;n=n.__wrapped__}return o.__wrapped__=e,t},Bn.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof zn){var t=e;return this.__actions__.length&&(t=new zn(this)),(t=t.reverse()).__actions__.push({func:ds,args:[ts],thisArg:i}),new Wn(t,this.__chain__)}return this.thru(ts)},Bn.prototype.toJSON=Bn.prototype.valueOf=Bn.prototype.value=function(){return pi(this.__wrapped__,this.__actions__)},Bn.prototype.first=Bn.prototype.head,st&&(Bn.prototype[st]=function(){return this}),Bn}();ot._=un,(r=function(){return un}.call(t,n,t,e))===i||(e.exports=r)}.call(this)},5877:(e,t)=>{t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),r=0,i=n.length;r<i;r++){var o=n[r].split("=");t[decodeURIComponent(o[0])]=decodeURIComponent(o[1])}return t}},9026:e=>{var t=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,n=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var r,i,o=e,s=e.indexOf("["),a=e.indexOf("]");-1!=s&&-1!=a&&(e=e.substring(0,s)+e.substring(s,a).replace(/:/g,";")+e.substring(a,e.length));for(var c,u,l=t.exec(e||""),f={},p=14;p--;)f[n[p]]=l[p]||"";return-1!=s&&-1!=a&&(f.source=o,f.host=f.host.substring(1,f.host.length-1).replace(/;/g,":"),f.authority=f.authority.replace("[","").replace("]","").replace(/;/g,":"),f.ipv6uri=!0),f.pathNames=(r=f.path,i=r.replace(/\/{2,9}/g,"/").split("/"),"/"!=r.substr(0,1)&&0!==r.length||i.splice(0,1),"/"==r.substr(r.length-1,1)&&i.splice(i.length-1,1),i),f.queryKey=(c=f.query,u={},c.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(e,t,n){t&&(u[t]=n)})),u),f}},5925:(e,t,n)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,i=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(i=r))})),t.splice(i,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=n(6903)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},6903:(e,t,n)=>{e.exports=function(e){function t(e){let n,i,o,s=null;function a(...e){if(!a.enabled)return;const r=a,i=Number(new Date),o=i-(n||i);r.diff=o,r.prev=n,r.curr=i,n=i,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let s=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,i)=>{if("%%"===n)return"%";s++;const o=t.formatters[i];if("function"==typeof o){const t=e[s];n=o.call(r,t),e.splice(s,1),s--}return n})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=r,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==s?s:(i!==t.namespaces&&(i=t.namespaces,o=t.enabled(e)),o),set:e=>{s=e}}),"function"==typeof t.init&&t.init(a),a}function r(e,n){const r=t(this.namespace+(void 0===n?":":n)+e);return r.log=this.log,r}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(i),...t.skips.map(i).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),i=r.length;for(n=0;n<i;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(119),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((n=>{t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},119:e=>{var t=1e3,n=60*t,r=60*n,i=24*r;function o(e,t,n,r){var i=t>=1.5*n;return Math.round(e/n)+" "+r+(i?"s":"")}e.exports=function(e,s){s=s||{};var a,c,u=typeof e;if("string"===u&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var o=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(o){var s=parseFloat(o[1]);switch((o[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*s;case"weeks":case"week":case"w":return 6048e5*s;case"days":case"day":case"d":return s*i;case"hours":case"hour":case"hrs":case"hr":case"h":return s*r;case"minutes":case"minute":case"mins":case"min":case"m":return s*n;case"seconds":case"second":case"secs":case"sec":case"s":return s*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}}}(e);if("number"===u&&isFinite(e))return s.long?(a=e,(c=Math.abs(a))>=i?o(a,c,i,"day"):c>=r?o(a,c,r,"hour"):c>=n?o(a,c,n,"minute"):c>=t?o(a,c,t,"second"):a+" ms"):function(e){var o=Math.abs(e);return o>=i?Math.round(e/i)+"d":o>=r?Math.round(e/r)+"h":o>=n?Math.round(e/n)+"m":o>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},186:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reconstructPacket=t.deconstructPacket=void 0;const r=n(1503);function i(e,t){if(!e)return e;if(r.isBinary(e)){const n={_placeholder:!0,num:t.length};return t.push(e),n}if(Array.isArray(e)){const n=new Array(e.length);for(let r=0;r<e.length;r++)n[r]=i(e[r],t);return n}if("object"==typeof e&&!(e instanceof Date)){const n={};for(const r in e)e.hasOwnProperty(r)&&(n[r]=i(e[r],t));return n}return e}function o(e,t){if(!e)return e;if(e&&e._placeholder)return t[e.num];if(Array.isArray(e))for(let n=0;n<e.length;n++)e[n]=o(e[n],t);else if("object"==typeof e)for(const n in e)e.hasOwnProperty(n)&&(e[n]=o(e[n],t));return e}t.deconstructPacket=function(e){const t=[],n=e.data,r=e;return r.data=i(n,t),r.attachments=t.length,{packet:r,buffers:t}},t.reconstructPacket=function(e,t){return e.data=o(e.data,t),e.attachments=void 0,e}},3026:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Decoder=t.Encoder=t.PacketType=t.protocol=void 0;const r=n(745),i=n(186),o=n(1503),s=n(1077)("socket.io-parser");var a;t.protocol=5,function(e){e[e.CONNECT=0]="CONNECT",e[e.DISCONNECT=1]="DISCONNECT",e[e.EVENT=2]="EVENT",e[e.ACK=3]="ACK",e[e.CONNECT_ERROR=4]="CONNECT_ERROR",e[e.BINARY_EVENT=5]="BINARY_EVENT",e[e.BINARY_ACK=6]="BINARY_ACK"}(a=t.PacketType||(t.PacketType={})),t.Encoder=class{encode(e){return s("encoding packet %j",e),e.type!==a.EVENT&&e.type!==a.ACK||!o.hasBinary(e)?[this.encodeAsString(e)]:(e.type=e.type===a.EVENT?a.BINARY_EVENT:a.BINARY_ACK,this.encodeAsBinary(e))}encodeAsString(e){let t=""+e.type;return e.type!==a.BINARY_EVENT&&e.type!==a.BINARY_ACK||(t+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(t+=e.nsp+","),null!=e.id&&(t+=e.id),null!=e.data&&(t+=JSON.stringify(e.data)),s("encoded %j as %s",e,t),t}encodeAsBinary(e){const t=i.deconstructPacket(e),n=this.encodeAsString(t.packet),r=t.buffers;return r.unshift(n),r}};class c extends r{constructor(){super()}add(e){let t;if("string"==typeof e)t=this.decodeString(e),t.type===a.BINARY_EVENT||t.type===a.BINARY_ACK?(this.reconstructor=new u(t),0===t.attachments&&super.emit("decoded",t)):super.emit("decoded",t);else{if(!o.isBinary(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");t=this.reconstructor.takeBinaryData(e),t&&(this.reconstructor=null,super.emit("decoded",t))}}decodeString(e){let t=0;const n={type:Number(e.charAt(0))};if(void 0===a[n.type])throw new Error("unknown packet type "+n.type);if(n.type===a.BINARY_EVENT||n.type===a.BINARY_ACK){const r=t+1;for(;"-"!==e.charAt(++t)&&t!=e.length;);const i=e.substring(r,t);if(i!=Number(i)||"-"!==e.charAt(t))throw new Error("Illegal attachments");n.attachments=Number(i)}if("/"===e.charAt(t+1)){const r=t+1;for(;++t&&","!==e.charAt(t)&&t!==e.length;);n.nsp=e.substring(r,t)}else n.nsp="/";const r=e.charAt(t+1);if(""!==r&&Number(r)==r){const r=t+1;for(;++t;){const n=e.charAt(t);if(null==n||Number(n)!=n){--t;break}if(t===e.length)break}n.id=Number(e.substring(r,t+1))}if(e.charAt(++t)){const r=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(t));if(!c.isPayloadValid(n.type,r))throw new Error("invalid payload");n.data=r}return s("decoded %s as %j",e,n),n}static isPayloadValid(e,t){switch(e){case a.CONNECT:return"object"==typeof t;case a.DISCONNECT:return void 0===t;case a.CONNECT_ERROR:return"string"==typeof t||"object"==typeof t;case a.EVENT:case a.BINARY_EVENT:return Array.isArray(t)&&t.length>0;case a.ACK:case a.BINARY_ACK:return Array.isArray(t)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}t.Decoder=c;class u{constructor(e){this.packet=e,this.buffers=[],this.reconPack=e}takeBinaryData(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){const e=i.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}},1503:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasBinary=t.isBinary=void 0;const n="function"==typeof ArrayBuffer,r=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===r.call(Blob),o="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===r.call(File);function s(e){return n&&(e instanceof ArrayBuffer||(e=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer)(e))||i&&e instanceof Blob||o&&e instanceof File}t.isBinary=s,t.hasBinary=function e(t,n){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let n=0,r=t.length;n<r;n++)if(e(t[n]))return!0;return!1}if(s(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return e(t.toJSON(),!0);for(const n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&e(t[n]))return!0;return!1}},1077:(e,t,n)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,i=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(i=r))})),t.splice(i,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=n(2122)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},2122:(e,t,n)=>{e.exports=function(e){function t(e){let n,i,o,s=null;function a(...e){if(!a.enabled)return;const r=a,i=Number(new Date),o=i-(n||i);r.diff=o,r.prev=n,r.curr=i,n=i,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let s=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,i)=>{if("%%"===n)return"%";s++;const o=t.formatters[i];if("function"==typeof o){const t=e[s];n=o.call(r,t),e.splice(s,1),s--}return n})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=r,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==s?s:(i!==t.namespaces&&(i=t.namespaces,o=t.enabled(e)),o),set:e=>{s=e}}),"function"==typeof t.init&&t.init(a),a}function r(e,n){const r=t(this.namespace+(void 0===n?":":n)+e);return r.log=this.log,r}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(i),...t.skips.map(i).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),i=r.length;for(n=0;n<i;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(4813),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((n=>{t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},4813:e=>{var t=1e3,n=60*t,r=60*n,i=24*r;function o(e,t,n,r){var i=t>=1.5*n;return Math.round(e/n)+" "+r+(i?"s":"")}e.exports=function(e,s){s=s||{};var a,c,u=typeof e;if("string"===u&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var o=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(o){var s=parseFloat(o[1]);switch((o[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*s;case"weeks":case"week":case"w":return 6048e5*s;case"days":case"day":case"d":return s*i;case"hours":case"hour":case"hrs":case"hr":case"h":return s*r;case"minutes":case"minute":case"mins":case"min":case"m":return s*n;case"seconds":case"second":case"secs":case"sec":case"s":return s*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}}}(e);if("number"===u&&isFinite(e))return s.long?(a=e,(c=Math.abs(a))>=i?o(a,c,i,"day"):c>=r?o(a,c,r,"hour"):c>=n?o(a,c,n,"minute"):c>=t?o(a,c,t,"second"):a+" ms"):function(e){var o=Math.abs(e);return o>=i?Math.round(e/i)+"d":o>=r?Math.round(e/r)+"h":o>=n?Math.round(e/n)+"m":o>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},9289:e=>{"use strict";var t,n="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),r={},i=0,o=0;function s(e){var t="";do{t=n[e%64]+t,e=Math.floor(e/64)}while(e>0);return t}function a(){var e=s(+new Date);return e!==t?(i=0,t=e):e+"."+s(i++)}for(;o<64;o++)r[n[o]]=o;a.encode=s,a.decode=function(e){var t=0;for(o=0;o<e.length;o++)t=64*t+r[e.charAt(o)];return t},e.exports=a},6399:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50"><g fill="#FF9955" stroke="#FF9955" stroke-width="0"><path d=" M1,25 L30,49 L49,49 L49,46 L31.5,46 L2.5,22 Z"></path><path d=" M3,19 L32,44 L50,44 A16,16 0 0 0 36,28 L28,30 L32,26 L27,22 L31,8 A16,16 0 0 1 12,1 L8,12 Z"></path><line stroke-width="3" x1="0" y1="41" x2="15" y2="41"></line><line stroke-width="3" x1="0" y1="48" x2="20" y2="48"></line></g></svg>'},4066:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50"><g stroke-width="5" stroke="black"><line x1="25" x2="25" y1="5" y2="45"></line><line y1="25" y2="25" x1="5" x2="45"></line></g></svg>'},8077:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50"><g stroke-width="0"><path d="M2,50 L0,27 L17,27 L18,32 L32,32 L33,27 L50,27 L48,50"></path><path d="M0,25 L2,6 L8,3 L42,3 L48,6 L50,25 L33,25 L32,17 L18,17 L17,25"></path><rect x="20" y="19.5" width="10" height="10"></rect></g></svg>'},7179:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50"><g stroke-width="2" fill="gold" stroke="#531"><ellipse cx="13" cy="40" rx="10" ry="7"></ellipse><ellipse cx="13" cy="33" rx="10" ry="7"></ellipse><ellipse cx="13" cy="26" rx="10" ry="7"></ellipse><ellipse cx="12" cy="19" rx="10" ry="7"></ellipse><ellipse cx="12" cy="12" rx="10" ry="7"></ellipse><ellipse cx="35" cy="40" rx="10" ry="7"></ellipse><ellipse cx="36" cy="33" rx="10" ry="7"></ellipse><ellipse cx="36" cy="26" rx="10" ry="7"></ellipse></g></svg>'},2314:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50"><path fill="#93e078" d=" M25,10 a10,10 0 0 1 18,15 l-18,20 l-18,-20 a10,10 0 0 1 18,-15 Z"></path></svg>'},6394:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="-10 -10 70 70"><path fill="#48F" d=" M-5,-10 l60,0 l0,48 l-30,22 l-30,-22 Z"></path><path fill="#FFF" d=" M20,0 L44,0 L28,22 L44,22 L15,47 L22,27 L6,27 Z"></path></svg>'},2608:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50"><path fill="#48F" d=" M20,0 L44,0 L28,22 L44,22 L12,50 L22,27 L6,27 Z"></path></svg>'},2817:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50"><ellipse fill="#EC3" cx="25" cy="25" rx="25" ry="25"></ellipse></svg>'},9773:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50"><ellipse stroke-width="2" stroke="white" cx="25" cy="25" rx="23" ry="23"></ellipse><line stroke="white" stroke-width="6" x1="10" x2="25" y1="25" y2="40"></line><line stroke="white" stroke-width="6" x1="10" x2="35" y1="40" y2="15"></line><polygon fill="white" points="40,10 33,13 37,17"></polygon></svg>'},8050:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50"><ellipse stroke-width="2" stroke="white" cx="25" cy="25" rx="23" ry="23"></ellipse><polygon stroke="white" stroke-width="3" fill="none" points="12,16 16,12 25,21 21,25"></polygon><polygon stroke="white" stroke-width="3" fill="white" points="38,34 34,38 21,25 25,21"></polygon></svg>'},6149:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50"><ellipse stroke-width="2" stroke="white" cx="25" cy="25" rx="23" ry="23"></ellipse><ellipse fill="white" cx="25" cy="25" rx="10" ry="10"></ellipse></svg>'},2582:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50"><ellipse stroke-width="2" stroke="white" cx="25" cy="25" rx="23" ry="23"></ellipse><line stroke-width="4" stroke="white" x1="23" y1="37" x2="37" y2="23"></line> /&gt;<line stroke-width="4" stroke="white" x1="32" y1="32" x2="36" y2="36"></line> /&gt;<polygon fill="white" points="11,11 25,31 31,25"></polygon></svg>'},7843:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="-120 -40 510 450"><path fill="#DD5533" d=" M-80,-60 l430,0 l0,300 l-215,180 l-215,-180 Z"></path><g fill="#FFF"><path d="M63.951,243.575c-1.945-3.578-4.401-6.907-7.363-9.869c-3.106-3.102-6.626-5.633-10.4-7.63 c-4.51-2.387-0.945-7.5-0.945-7.5c4.616-7.023,8.825-14.079,12.305-20.226l-23.363-23.344H11.504c-4.362,0-7.898-3.539-7.898-7.902 c0-4.361,3.536-7.9,7.898-7.9h25.947c2.1,0,4.107,0.832,5.588,2.312l85.379,85.291c1.483,1.483,2.315,3.495,2.315,5.589v26.073 c0,4.365-3.537,7.897-7.9,7.897c-4.367,0-7.904-3.531-7.904-7.897v-22.798l-23.27-23.24c-6.281,3.707-13.582,8.252-20.816,13.25 C70.842,245.679,66.698,248.629,63.951,243.575z"></path><path d="M26.61,237.102c-7.106,0-13.784,2.764-18.812,7.784c-5.019,5.015-7.782,11.686-7.782,18.778 c0,7.097,2.764,13.762,7.782,18.776c5.027,5.016,11.706,7.783,18.812,7.785c7.102,0,13.781-2.77,18.804-7.785 c5.023-5.015,7.79-11.682,7.79-18.776c0-7.093-2.768-13.764-7.79-18.778C40.392,239.866,33.712,237.102,26.61,237.102z"></path><path d="M100.985,182.318c-3.502,3.499-9.232,3.499-12.734,0.001l-8.81-8.801c-3.502-3.498-3.502-9.223,0-12.721L229.832,10.564 c3.502-3.498,10.401-6.727,15.33-7.175l36.862-3.352c4.93-0.448,8.596,3.218,8.148,8.148l-3.346,36.791 c-0.448,4.93-3.68,11.825-7.182,15.324l-150.4,150.251c-3.502,3.498-9.232,3.498-12.734,0l-8.822-8.813 c-3.502-3.498-3.502-9.223,0-12.722L233.608,63.213c1.854-1.848,1.856-4.852,0.003-6.702c-1.848-1.853-4.853-1.853-6.709-0.002 L100.985,182.318z"></path></g></svg>'},1530:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" viewBox="0 0 290.226 290.226" style="enable-background:new 0 0 290.226 290.226;" xml:space="preserve"><g fill="#DD5533"><path d="M63.951,243.575c-1.945-3.578-4.401-6.907-7.363-9.869c-3.106-3.102-6.626-5.633-10.4-7.63 c-4.51-2.387-0.945-7.5-0.945-7.5c4.616-7.023,8.825-14.079,12.305-20.226l-23.363-23.344H11.504c-4.362,0-7.898-3.539-7.898-7.902 c0-4.361,3.536-7.9,7.898-7.9h25.947c2.1,0,4.107,0.832,5.588,2.312l85.379,85.291c1.483,1.483,2.315,3.495,2.315,5.589v26.073 c0,4.365-3.537,7.897-7.9,7.897c-4.367,0-7.904-3.531-7.904-7.897v-22.798l-23.27-23.24c-6.281,3.707-13.582,8.252-20.816,13.25 C70.842,245.679,66.698,248.629,63.951,243.575z"></path><path d="M26.61,237.102c-7.106,0-13.784,2.764-18.812,7.784c-5.019,5.015-7.782,11.686-7.782,18.778 c0,7.097,2.764,13.762,7.782,18.776c5.027,5.016,11.706,7.783,18.812,7.785c7.102,0,13.781-2.77,18.804-7.785 c5.023-5.015,7.79-11.682,7.79-18.776c0-7.093-2.768-13.764-7.79-18.778C40.392,239.866,33.712,237.102,26.61,237.102z"></path><path d="M100.985,182.318c-3.502,3.499-9.232,3.499-12.734,0.001l-8.81-8.801c-3.502-3.498-3.502-9.223,0-12.721L229.832,10.564 c3.502-3.498,10.401-6.727,15.33-7.175l36.862-3.352c4.93-0.448,8.596,3.218,8.148,8.148l-3.346,36.791 c-0.448,4.93-3.68,11.825-7.182,15.324l-150.4,150.251c-3.502,3.498-9.232,3.498-12.734,0l-8.822-8.813 c-3.502-3.498-3.502-9.223,0-12.722L233.608,63.213c1.854-1.848,1.856-4.852,0.003-6.702c-1.848-1.853-4.853-1.853-6.709-0.002 L100.985,182.318z"></path></g></svg>'},4940:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.io=t.Socket=t.Manager=t.protocol=void 0;const r=n(8554),i=n(7361),o=n(5925)("socket.io-client");e.exports=t=a;const s=t.managers={};function a(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};const n=r.url(e,t.path||"/socket.io"),a=n.source,c=n.id,u=n.path,l=s[c]&&u in s[c].nsps;let f;return t.forceNew||t["force new connection"]||!1===t.multiplex||l?(o("ignoring socket cache for %s",a),f=new i.Manager(a,t)):(s[c]||(o("new io instance for %s",a),s[c]=new i.Manager(a,t)),f=s[c]),n.query&&!t.query&&(t.query=n.queryKey),f.socket(n.path,t)}t.io=a;var c=n(3026);Object.defineProperty(t,"protocol",{enumerable:!0,get:function(){return c.protocol}}),t.connect=a;var u=n(7361);Object.defineProperty(t,"Manager",{enumerable:!0,get:function(){return u.Manager}});var l=n(8071);Object.defineProperty(t,"Socket",{enumerable:!0,get:function(){return l.Socket}}),t.default=a},7361:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Manager=void 0;const r=n(7409),i=n(8071),o=n(3026),s=n(4881),a=n(9145),c=n(3285),u=n(5925)("socket.io-client:manager");class l extends c.StrictEventEmitter{constructor(e,t){super(),this.nsps={},this.subs=[],e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.opts=t,this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(t.randomizationFactor||.5),this.backoff=new a({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this._readyState="closed",this.uri=e;const n=t.parser||o;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this._autoConnect=!1!==t.autoConnect,this._autoConnect&&this.open()}reconnection(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection}reconnectionAttempts(e){return void 0===e?this._reconnectionAttempts:(this._reconnectionAttempts=e,this)}reconnectionDelay(e){var t;return void 0===e?this._reconnectionDelay:(this._reconnectionDelay=e,null===(t=this.backoff)||void 0===t||t.setMin(e),this)}randomizationFactor(e){var t;return void 0===e?this._randomizationFactor:(this._randomizationFactor=e,null===(t=this.backoff)||void 0===t||t.setJitter(e),this)}reconnectionDelayMax(e){var t;return void 0===e?this._reconnectionDelayMax:(this._reconnectionDelayMax=e,null===(t=this.backoff)||void 0===t||t.setMax(e),this)}timeout(e){return arguments.length?(this._timeout=e,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(e){if(u("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;u("opening %s",this.uri),this.engine=r(this.uri,this.opts);const t=this.engine,n=this;this._readyState="opening",this.skipReconnect=!1;const i=s.on(t,"open",(function(){n.onopen(),e&&e()})),o=s.on(t,"error",(t=>{u("error"),n.cleanup(),n._readyState="closed",this.emitReserved("error",t),e?e(t):n.maybeReconnectOnOpen()}));if(!1!==this._timeout){const e=this._timeout;u("connect attempt will timeout after %d",e),0===e&&i();const n=setTimeout((()=>{u("connect attempt timed out after %d",e),i(),t.close(),t.emit("error",new Error("timeout"))}),e);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}return this.subs.push(i),this.subs.push(o),this}connect(e){return this.open(e)}onopen(){u("open"),this.cleanup(),this._readyState="open",this.emitReserved("open");const e=this.engine;this.subs.push(s.on(e,"ping",this.onping.bind(this)),s.on(e,"data",this.ondata.bind(this)),s.on(e,"error",this.onerror.bind(this)),s.on(e,"close",this.onclose.bind(this)),s.on(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(e){this.decoder.add(e)}ondecoded(e){this.emitReserved("packet",e)}onerror(e){u("error",e),this.emitReserved("error",e)}socket(e,t){let n=this.nsps[e];return n||(n=new i.Socket(this,e,t),this.nsps[e]=n),n}_destroy(e){const t=Object.keys(this.nsps);for(const e of t)if(this.nsps[e].active)return void u("socket %s is still active, skipping close",e);this._close()}_packet(e){u("writing packet %j",e);const t=this.encoder.encode(e);for(let n=0;n<t.length;n++)this.engine.write(t[n],e.options)}cleanup(){u("cleanup"),this.subs.forEach((e=>e())),this.subs.length=0,this.decoder.destroy()}_close(){u("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,"opening"===this._readyState&&this.cleanup(),this.backoff.reset(),this._readyState="closed",this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(e){u("onclose"),this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const e=this;if(this.backoff.attempts>=this._reconnectionAttempts)u("reconnect failed"),this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const t=this.backoff.duration();u("will wait %dms before reconnect attempt",t),this._reconnecting=!0;const n=setTimeout((()=>{e.skipReconnect||(u("attempting reconnect"),this.emitReserved("reconnect_attempt",e.backoff.attempts),e.skipReconnect||e.open((t=>{t?(u("reconnect attempt error"),e._reconnecting=!1,e.reconnect(),this.emitReserved("reconnect_error",t)):(u("reconnect success"),e.onreconnect())})))}),t);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}}onreconnect(){const e=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",e)}}t.Manager=l},4881:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.on=void 0,t.on=function(e,t,n){return e.on(t,n),function(){e.off(t,n)}}},8071:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Socket=void 0;const r=n(3026),i=n(4881),o=n(3285),s=n(5925)("socket.io-client:socket"),a=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class c extends o.StrictEventEmitter{constructor(e,t,n){super(),this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=e,this.nsp=t,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.auth&&(this.auth=n.auth),this.io._autoConnect&&this.open()}subEvents(){if(this.subs)return;const e=this.io;this.subs=[i.on(e,"open",this.onopen.bind(this)),i.on(e,"packet",this.onpacket.bind(this)),i.on(e,"error",this.onerror.bind(this)),i.on(e,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...e){return e.unshift("message"),this.emit.apply(this,e),this}emit(e,...t){if(a.hasOwnProperty(e))throw new Error('"'+e+'" is a reserved event name');t.unshift(e);const n={type:r.PacketType.EVENT,data:t,options:{}};n.options.compress=!1!==this.flags.compress,"function"==typeof t[t.length-1]&&(s("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),n.id=this.ids++);const i=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return!this.flags.volatile||i&&this.connected?this.connected?this.packet(n):this.sendBuffer.push(n):s("discard packet as the transport is not currently writable"),this.flags={},this}packet(e){e.nsp=this.nsp,this.io._packet(e)}onopen(){s("transport is open - connecting"),"function"==typeof this.auth?this.auth((e=>{this.packet({type:r.PacketType.CONNECT,data:e})})):this.packet({type:r.PacketType.CONNECT,data:this.auth})}onerror(e){this.connected||this.emitReserved("connect_error",e)}onclose(e){s("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emitReserved("disconnect",e)}onpacket(e){if(e.nsp===this.nsp)switch(e.type){case r.PacketType.CONNECT:if(e.data&&e.data.sid){const t=e.data.sid;this.onconnect(t)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case r.PacketType.EVENT:case r.PacketType.BINARY_EVENT:this.onevent(e);break;case r.PacketType.ACK:case r.PacketType.BINARY_ACK:this.onack(e);break;case r.PacketType.DISCONNECT:this.ondisconnect();break;case r.PacketType.CONNECT_ERROR:const t=new Error(e.data.message);t.data=e.data.data,this.emitReserved("connect_error",t)}}onevent(e){const t=e.data||[];s("emitting event %j",t),null!=e.id&&(s("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?this.emitEvent(t):this.receiveBuffer.push(Object.freeze(t))}emitEvent(e){if(this._anyListeners&&this._anyListeners.length){const t=this._anyListeners.slice();for(const n of t)n.apply(this,e)}super.emit.apply(this,e)}ack(e){const t=this;let n=!1;return function(...i){n||(n=!0,s("sending ack %j",i),t.packet({type:r.PacketType.ACK,id:e,data:i}))}}onack(e){const t=this.acks[e.id];"function"==typeof t?(s("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):s("bad ack %s",e.id)}onconnect(e){s("socket connected with id %s",e),this.id=e,this.connected=!0,this.disconnected=!1,this.emitBuffered(),this.emitReserved("connect")}emitBuffered(){this.receiveBuffer.forEach((e=>this.emitEvent(e))),this.receiveBuffer=[],this.sendBuffer.forEach((e=>this.packet(e))),this.sendBuffer=[]}ondisconnect(){s("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((e=>e())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&(s("performing disconnect (%s)",this.nsp),this.packet({type:r.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(e){return this.flags.compress=e,this}get volatile(){return this.flags.volatile=!0,this}onAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}prependAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}offAny(e){if(!this._anyListeners)return this;if(e){const t=this._anyListeners;for(let n=0;n<t.length;n++)if(e===t[n])return t.splice(n,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}}t.Socket=c},3285:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StrictEventEmitter=void 0;const r=n(745);t.StrictEventEmitter=class extends r{on(e,t){return super.on(e,t),this}once(e,t){return super.once(e,t),this}emit(e,...t){return super.emit(e,...t),this}emitReserved(e,...t){return super.emit(e,...t),this}listeners(e){return super.listeners(e)}}},8554:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.url=void 0;const r=n(9026),i=n(5925)("socket.io-client:url");t.url=function(e,t="",n){let o=e;n=n||"undefined"!=typeof location&&location,null==e&&(e=n.protocol+"//"+n.host),"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(i("protocol-less url %s",e),e=void 0!==n?n.protocol+"//"+e:"https://"+e),i("parse %s",e),o=r(e)),o.port||(/^(http|ws)$/.test(o.protocol)?o.port="80":/^(http|ws)s$/.test(o.protocol)&&(o.port="443")),o.path=o.path||"/";const s=-1!==o.host.indexOf(":")?"["+o.host+"]":o.host;return o.id=o.protocol+"://"+s+":"+o.port+t,o.href=o.protocol+"://"+s+(n&&n.port===o.port?"":":"+o.port),o}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{"use strict";var e,t,r,i,o,s,a,c;(c=e||(e={})).MissingApiKey="MISSING_API_KEY",c.ModalNotReady="MODAL_NOT_READY",c.MalformedResponse="MALFORMED_RESPONSE",c.InvalidArgument="INVALID_ARGUMENT",c.ExtensionNotInitialized="EXTENSION_NOT_INITIALIZED",c.IncompatibleExtensions="INCOMPATIBLE_EXTENSIONS",function(e){e.SyncWeb3Method="SYNC_WEB3_METHOD",e.DuplicateIframe="DUPLICATE_IFRAME",e.ReactNativeEndpointConfiguration="REACT_NATIVE_ENDPOINT_CONFIGURATION",e.DeprecationNotice="DEPRECATION_NOTICE"}(t||(t={})),function(e){e[e.ParseError=-32700]="ParseError",e[e.InvalidRequest=-32600]="InvalidRequest",e[e.MethodNotFound=-32601]="MethodNotFound",e[e.InvalidParams=-32602]="InvalidParams",e[e.InternalError=-32603]="InternalError",e[e.MagicLinkFailedVerification=-1e4]="MagicLinkFailedVerification",e[e.MagicLinkExpired=-10001]="MagicLinkExpired",e[e.MagicLinkRateLimited=-10002]="MagicLinkRateLimited",e[e.MagicLinkInvalidRedirectURL=-10006]="MagicLinkInvalidRedirectURL",e[e.UserAlreadyLoggedIn=-10003]="UserAlreadyLoggedIn",e[e.UpdateEmailFailed=-10004]="UpdateEmailFailed",e[e.UserRequestEditEmail=-10005]="UserRequestEditEmail",e[e.InactiveRecipient=-10010]="InactiveRecipient",e[e.AccessDeniedToUser=-10011]="AccessDeniedToUser"}(r||(r={})),function(e){e.LoginWithSms="magic_auth_login_with_sms",e.LoginWithMagicLink="magic_auth_login_with_magic_link",e.LoginWithCredential="magic_auth_login_with_credential",e.GetIdToken="magic_auth_get_id_token",e.GenerateIdToken="magic_auth_generate_id_token",e.GetMetadata="magic_auth_get_metadata",e.IsLoggedIn="magic_auth_is_logged_in",e.Logout="magic_auth_logout",e.UpdateEmail="magic_auth_update_email",e.UserSettings="magic_auth_settings",e.UserSettingsTestMode="magic_auth_settings_testing_mode",e.LoginWithSmsTestMode="magic_auth_login_with_sms_testing_mode",e.LoginWithMagicLinkTestMode="magic_login_with_magic_link_testing_mode",e.LoginWithCredentialTestMode="magic_auth_login_with_credential_testing_mode",e.GetIdTokenTestMode="magic_auth_get_id_token_testing_mode",e.GenerateIdTokenTestMode="magic_auth_generate_id_token_testing_mode",e.GetMetadataTestMode="magic_auth_get_metadata_testing_mode",e.IsLoggedInTestMode="magic_auth_is_logged_in_testing_mode",e.LogoutTestMode="magic_auth_logout_testing_mode",e.UpdateEmailTestMode="magic_auth_update_email_testing_mode"}(i||(i={})),function(e){e.MAGIC_HANDLE_RESPONSE="MAGIC_HANDLE_RESPONSE",e.MAGIC_OVERLAY_READY="MAGIC_OVERLAY_READY",e.MAGIC_SHOW_OVERLAY="MAGIC_SHOW_OVERLAY",e.MAGIC_HIDE_OVERLAY="MAGIC_HIDE_OVERLAY",e.MAGIC_HANDLE_EVENT="MAGIC_HANDLE_EVENT"}(o||(o={})),function(e){e.MAGIC_HANDLE_REQUEST="MAGIC_HANDLE_REQUEST"}(s||(s={})),function(e){e.Harmony="HARMONY"}(a||(a={}));const u={SEMVER_SPEC_VERSION:"2.0.0",MAX_LENGTH:256,MAX_SAFE_INTEGER:Number.MAX_SAFE_INTEGER||9007199254740991,MAX_SAFE_COMPONENT_LENGTH:16},l="object"==typeof process&&process.env&&process.env.NODE_DEBUG&&/\bsemver\b/i.test(process.env.NODE_DEBUG)?(...e)=>console.error("SEMVER",...e):()=>{},f=function(e){const t={exports:{}};return function(e,t){const{MAX_SAFE_COMPONENT_LENGTH:n}=u,r=(t=e.exports={}).re=[],i=t.src=[],o=t.t={};let s=0;const a=(e,t,n)=>{const a=s++;l(a,t),o[e]=a,i[a]=t,r[a]=new RegExp(t,n?"g":void 0)};a("NUMERICIDENTIFIER","0|[1-9]\\d*"),a("NUMERICIDENTIFIERLOOSE","[0-9]+"),a("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),a("MAINVERSION",`(${i[o.NUMERICIDENTIFIER]})\\.(${i[o.NUMERICIDENTIFIER]})\\.(${i[o.NUMERICIDENTIFIER]})`),a("MAINVERSIONLOOSE",`(${i[o.NUMERICIDENTIFIERLOOSE]})\\.(${i[o.NUMERICIDENTIFIERLOOSE]})\\.(${i[o.NUMERICIDENTIFIERLOOSE]})`),a("PRERELEASEIDENTIFIER",`(?:${i[o.NUMERICIDENTIFIER]}|${i[o.NONNUMERICIDENTIFIER]})`),a("PRERELEASEIDENTIFIERLOOSE",`(?:${i[o.NUMERICIDENTIFIERLOOSE]}|${i[o.NONNUMERICIDENTIFIER]})`),a("PRERELEASE",`(?:-(${i[o.PRERELEASEIDENTIFIER]}(?:\\.${i[o.PRERELEASEIDENTIFIER]})*))`),a("PRERELEASELOOSE",`(?:-?(${i[o.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${i[o.PRERELEASEIDENTIFIERLOOSE]})*))`),a("BUILDIDENTIFIER","[0-9A-Za-z-]+"),a("BUILD",`(?:\\+(${i[o.BUILDIDENTIFIER]}(?:\\.${i[o.BUILDIDENTIFIER]})*))`),a("FULLPLAIN",`v?${i[o.MAINVERSION]}${i[o.PRERELEASE]}?${i[o.BUILD]}?`),a("FULL",`^${i[o.FULLPLAIN]}$`),a("LOOSEPLAIN",`[v=\\s]*${i[o.MAINVERSIONLOOSE]}${i[o.PRERELEASELOOSE]}?${i[o.BUILD]}?`),a("LOOSE",`^${i[o.LOOSEPLAIN]}$`),a("GTLT","((?:<|>)?=?)"),a("XRANGEIDENTIFIERLOOSE",`${i[o.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),a("XRANGEIDENTIFIER",`${i[o.NUMERICIDENTIFIER]}|x|X|\\*`),a("XRANGEPLAIN",`[v=\\s]*(${i[o.XRANGEIDENTIFIER]})(?:\\.(${i[o.XRANGEIDENTIFIER]})(?:\\.(${i[o.XRANGEIDENTIFIER]})(?:${i[o.PRERELEASE]})?${i[o.BUILD]}?)?)?`),a("XRANGEPLAINLOOSE",`[v=\\s]*(${i[o.XRANGEIDENTIFIERLOOSE]})(?:\\.(${i[o.XRANGEIDENTIFIERLOOSE]})(?:\\.(${i[o.XRANGEIDENTIFIERLOOSE]})(?:${i[o.PRERELEASELOOSE]})?${i[o.BUILD]}?)?)?`),a("XRANGE",`^${i[o.GTLT]}\\s*${i[o.XRANGEPLAIN]}$`),a("XRANGELOOSE",`^${i[o.GTLT]}\\s*${i[o.XRANGEPLAINLOOSE]}$`),a("COERCE",`(^|[^\\d])(\\d{1,${n}})(?:\\.(\\d{1,${n}}))?(?:\\.(\\d{1,${n}}))?(?:$|[^\\d])`),a("COERCERTL",i[o.COERCE],!0),a("LONETILDE","(?:~>?)"),a("TILDETRIM",`(\\s*)${i[o.LONETILDE]}\\s+`,!0),t.tildeTrimReplace="$1~",a("TILDE",`^${i[o.LONETILDE]}${i[o.XRANGEPLAIN]}$`),a("TILDELOOSE",`^${i[o.LONETILDE]}${i[o.XRANGEPLAINLOOSE]}$`),a("LONECARET","(?:\\^)"),a("CARETTRIM",`(\\s*)${i[o.LONECARET]}\\s+`,!0),t.caretTrimReplace="$1^",a("CARET",`^${i[o.LONECARET]}${i[o.XRANGEPLAIN]}$`),a("CARETLOOSE",`^${i[o.LONECARET]}${i[o.XRANGEPLAINLOOSE]}$`),a("COMPARATORLOOSE",`^${i[o.GTLT]}\\s*(${i[o.LOOSEPLAIN]})$|^$`),a("COMPARATOR",`^${i[o.GTLT]}\\s*(${i[o.FULLPLAIN]})$|^$`),a("COMPARATORTRIM",`(\\s*)${i[o.GTLT]}\\s*(${i[o.LOOSEPLAIN]}|${i[o.XRANGEPLAIN]})`,!0),t.comparatorTrimReplace="$1$2$3",a("HYPHENRANGE",`^\\s*(${i[o.XRANGEPLAIN]})\\s+-\\s+(${i[o.XRANGEPLAIN]})\\s*$`),a("HYPHENRANGELOOSE",`^\\s*(${i[o.XRANGEPLAINLOOSE]})\\s+-\\s+(${i[o.XRANGEPLAINLOOSE]})\\s*$`),a("STAR","(<|>)?=?\\s*\\*"),a("GTE0","^\\s*>=\\s*0.0.0\\s*$"),a("GTE0PRE","^\\s*>=\\s*0.0.0-0\\s*$")}(t,t.exports),t.exports}(),p=/^[0-9]+$/,h=(e,t)=>{const n=p.test(e),r=p.test(t);return n&&r&&(e=+e,t=+t),e===t?0:n&&!r?-1:r&&!n?1:e<t?-1:1},d={compareIdentifiers:h,rcompareIdentifiers:(e,t)=>h(t,e)},{MAX_LENGTH:m,MAX_SAFE_INTEGER:g}=u,{re:v,t:y}=f,{compareIdentifiers:b}=d;class w{constructor(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof w){if(e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease)return e;e=e.version}else if("string"!=typeof e)throw new TypeError(`Invalid Version: ${e}`);if(e.length>m)throw new TypeError(`version is longer than ${m} characters`);l("SemVer",e,t),this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease;const n=e.trim().match(t.loose?v[y.LOOSE]:v[y.FULL]);if(!n)throw new TypeError(`Invalid Version: ${e}`);if(this.raw=e,this.major=+n[1],this.minor=+n[2],this.patch=+n[3],this.major>g||this.major<0)throw new TypeError("Invalid major version");if(this.minor>g||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>g||this.patch<0)throw new TypeError("Invalid patch version");this.prerelease=n[4]?n[4].split(".").map((e=>{if(/^[0-9]+$/.test(e)){const t=+e;if(t>=0&&t<g)return t}return e})):[],this.build=n[5]?n[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(e){if(l("SemVer.compare",this.version,this.options,e),!(e instanceof w)){if("string"==typeof e&&e===this.version)return 0;e=new w(e,this.options)}return e.version===this.version?0:this.compareMain(e)||this.comparePre(e)}compareMain(e){return e instanceof w||(e=new w(e,this.options)),b(this.major,e.major)||b(this.minor,e.minor)||b(this.patch,e.patch)}comparePre(e){if(e instanceof w||(e=new w(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;let t=0;do{const n=this.prerelease[t],r=e.prerelease[t];if(l("prerelease compare",t,n,r),void 0===n&&void 0===r)return 0;if(void 0===r)return 1;if(void 0===n)return-1;if(n!==r)return b(n,r)}while(++t)}compareBuild(e){e instanceof w||(e=new w(e,this.options));let t=0;do{const n=this.build[t],r=e.build[t];if(l("prerelease compare",t,n,r),void 0===n&&void 0===r)return 0;if(void 0===r)return 1;if(void 0===n)return-1;if(n!==r)return b(n,r)}while(++t)}inc(e,t){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t),this.inc("pre",t);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",t),this.inc("pre",t);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else{let e=this.prerelease.length;for(;--e>=0;)"number"==typeof this.prerelease[e]&&(this.prerelease[e]++,e=-2);-1===e&&this.prerelease.push(0)}t&&(this.prerelease[0]===t?isNaN(this.prerelease[1])&&(this.prerelease=[t,0]):this.prerelease=[t,0]);break;default:throw new Error(`invalid increment argument: ${e}`)}return this.format(),this.raw=this.version,this}}const _=(e,t,n)=>new w(e,n).compare(new w(t,n)),E=(e,t,n,r)=>{switch(t){case"===":return"object"==typeof e&&(e=e.version),"object"==typeof n&&(n=n.version),e===n;case"!==":return"object"==typeof e&&(e=e.version),"object"==typeof n&&(n=n.version),e!==n;case"":case"=":case"==":return((e,t,n)=>0===_(e,t,n))(e,n,r);case"!=":return((e,t,n)=>0!==_(e,t,n))(e,n,r);case">":return((e,t,n)=>_(e,t,n)>0)(e,n,r);case">=":return((e,t,n)=>_(e,t,n)>=0)(e,n,r);case"<":return((e,t,n)=>_(e,t,n)<0)(e,n,r);case"<=":return((e,t,n)=>_(e,t,n)<=0)(e,n,r);default:throw new TypeError(`Invalid operator: ${t}`)}},x=Symbol("SemVer ANY");class C{static get ANY(){return x}constructor(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof C){if(e.loose===!!t.loose)return e;e=e.value}l("comparator",e,t),this.options=t,this.loose=!!t.loose,this.parse(e),this.value=this.semver===x?"":this.operator+this.semver.version,l("comp",this)}parse(e){const t=e.match(this.options.loose?k[S.COMPARATORLOOSE]:k[S.COMPARATOR]);if(!t)throw new TypeError(`Invalid comparator: ${e}`);this.operator=void 0!==t[1]?t[1]:"","="===this.operator&&(this.operator=""),this.semver=t[2]?new w(t[2],this.options.loose):x}toString(){return this.value}test(e){if(l("Comparator.test",e,this.options.loose),this.semver===x||e===x)return!0;if("string"==typeof e)try{e=new w(e,this.options)}catch(e){return!1}return E(e,this.operator,this.semver,this.options)}intersects(e,t){if(!(e instanceof C))throw new TypeError("a Comparator is required");if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),""===this.operator)return""===this.value||new A(e.value,t).test(this.value);if(""===e.operator)return""===e.value||new A(this.value,t).test(e.semver);const n=!(">="!==this.operator&&">"!==this.operator||">="!==e.operator&&">"!==e.operator),r=!("<="!==this.operator&&"<"!==this.operator||"<="!==e.operator&&"<"!==e.operator),i=this.semver.version===e.semver.version,o=!(">="!==this.operator&&"<="!==this.operator||">="!==e.operator&&"<="!==e.operator),s=E(this.semver,"<",e.semver,t)&&(">="===this.operator||">"===this.operator)&&("<="===e.operator||"<"===e.operator),a=E(this.semver,">",e.semver,t)&&("<="===this.operator||"<"===this.operator)&&(">="===e.operator||">"===e.operator);return n||r||i&&o||s||a}}const{re:k,t:S}=f;class A{constructor(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof A)return e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease?e:new A(e.raw,t);if(e instanceof C)return this.raw=e.value,this.set=[[e]],this.format(),this;if(this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease,this.raw=e,this.set=e.split(/\s*\|\|\s*/).map((e=>this.parseRange(e.trim()))).filter((e=>e.length)),!this.set.length)throw new TypeError(`Invalid SemVer Range: ${e}`);this.format()}format(){return this.range=this.set.map((e=>e.join(" ").trim())).join("||").trim(),this.range}toString(){return this.range}parseRange(e){const{loose:t}=this.options;e=(e=e.trim()).replace(t?I[O.HYPHENRANGELOOSE]:I[O.HYPHENRANGE],H(this.options.includePrerelease)),l("hyphen replace",e),e=e.replace(I[O.COMPARATORTRIM],T),l("comparator trim",e,I[O.COMPARATORTRIM]),e=(e=(e=e.replace(I[O.TILDETRIM],R)).replace(I[O.CARETTRIM],M)).split(/\s+/).join(" ");const n=t?I[O.COMPARATORLOOSE]:I[O.COMPARATOR];return e.split(" ").map((e=>N(e,this.options))).join(" ").split(/\s+/).map((e=>z(e,this.options))).filter(this.options.loose?e=>!!e.match(n):()=>!0).map((e=>new C(e,this.options)))}intersects(e,t){if(!(e instanceof A))throw new TypeError("a Range is required");return this.set.some((n=>L(n,t)&&e.set.some((e=>L(e,t)&&n.every((n=>e.every((e=>n.intersects(e,t)))))))))}test(e){if(!e)return!1;if("string"==typeof e)try{e=new w(e,this.options)}catch(e){return!1}for(let t=0;t<this.set.length;t++)if(q(this.set[t],e,this.options))return!0;return!1}}const{re:I,t:O,comparatorTrimReplace:T,tildeTrimReplace:R,caretTrimReplace:M}=f,L=(e,t)=>{let n=!0;const r=e.slice();let i=r.pop();for(;n&&r.length;)n=r.every((e=>i.intersects(e,t))),i=r.pop();return n},N=(e,t)=>(l("comp",e,t),e=j(e,t),l("caret",e),e=P(e,t),l("tildes",e),e=$(e,t),l("xrange",e),e=W(e,t),l("stars",e),e),D=e=>!e||"x"===e.toLowerCase()||"*"===e,P=(e,t)=>e.trim().split(/\s+/).map((e=>F(e,t))).join(" "),F=(e,t)=>e.replace(t.loose?I[O.TILDELOOSE]:I[O.TILDE],((t,n,r,i,o)=>{let s;return l("tilde",e,t,n,r,i,o),D(n)?s="":D(r)?s=`>=${n}.0.0 <${+n+1}.0.0-0`:D(i)?s=`>=${n}.${r}.0 <${n}.${+r+1}.0-0`:o?(l("replaceTilde pr",o),s=`>=${n}.${r}.${i}-${o} <${n}.${+r+1}.0-0`):s=`>=${n}.${r}.${i} <${n}.${+r+1}.0-0`,l("tilde return",s),s})),j=(e,t)=>e.trim().split(/\s+/).map((e=>B(e,t))).join(" "),B=(e,t)=>{l("caret",e,t);const n=t.includePrerelease?"-0":"";return e.replace(t.loose?I[O.CARETLOOSE]:I[O.CARET],((t,r,i,o,s)=>{let a;return l("caret",e,t,r,i,o,s),D(r)?a="":D(i)?a=`>=${r}.0.0${n} <${+r+1}.0.0-0`:D(o)?a="0"===r?`>=${r}.${i}.0${n} <${r}.${+i+1}.0-0`:`>=${r}.${i}.0${n} <${+r+1}.0.0-0`:s?(l("replaceCaret pr",s),a="0"===r?"0"===i?`>=${r}.${i}.${o}-${s} <${r}.${i}.${+o+1}-0`:`>=${r}.${i}.${o}-${s} <${r}.${+i+1}.0-0`:`>=${r}.${i}.${o}-${s} <${+r+1}.0.0-0`):(l("no pr"),a="0"===r?"0"===i?`>=${r}.${i}.${o}${n} <${r}.${i}.${+o+1}-0`:`>=${r}.${i}.${o}${n} <${r}.${+i+1}.0-0`:`>=${r}.${i}.${o} <${+r+1}.0.0-0`),l("caret return",a),a}))},$=(e,t)=>(l("replaceXRanges",e,t),e.split(/\s+/).map((e=>U(e,t))).join(" ")),U=(e,t)=>(e=e.trim()).replace(t.loose?I[O.XRANGELOOSE]:I[O.XRANGE],((n,r,i,o,s,a)=>{l("xRange",e,n,r,i,o,s,a);const c=D(i),u=c||D(o),f=u||D(s);return"="===r&&f&&(r=""),a=t.includePrerelease?"-0":"",c?n=">"===r||"<"===r?"<0.0.0-0":"*":r&&f?(u&&(o=0),s=0,">"===r?(r=">=",u?(i=+i+1,o=0,s=0):(o=+o+1,s=0)):"<="===r&&(r="<",u?i=+i+1:o=+o+1),"<"===r&&(a="-0"),n=`${r+i}.${o}.${s}${a}`):u?n=`>=${i}.0.0${a} <${+i+1}.0.0-0`:f&&(n=`>=${i}.${o}.0${a} <${i}.${+o+1}.0-0`),l("xRange return",n),n})),W=(e,t)=>(l("replaceStars",e,t),e.trim().replace(I[O.STAR],"")),z=(e,t)=>(l("replaceGTE0",e,t),e.trim().replace(I[t.includePrerelease?O.GTE0PRE:O.GTE0],"")),H=e=>(t,n,r,i,o,s,a,c,u,l,f,p,h)=>`${n=D(r)?"":D(i)?`>=${r}.0.0${e?"-0":""}`:D(o)?`>=${r}.${i}.0${e?"-0":""}`:s?`>=${n}`:`>=${n}${e?"-0":""}`} ${c=D(u)?"":D(l)?`<${+u+1}.0.0-0`:D(f)?`<${u}.${+l+1}.0-0`:p?`<=${u}.${l}.${f}-${p}`:e?`<${u}.${l}.${+f+1}-0`:`<=${c}`}`.trim(),q=(e,t,n)=>{for(let n=0;n<e.length;n++)if(!e[n].test(t))return!1;if(t.prerelease.length&&!n.includePrerelease){for(let n=0;n<e.length;n++)if(l(e[n].semver),e[n].semver!==C.ANY&&e[n].semver.prerelease.length>0){const r=e[n].semver;if(r.major===t.major&&r.minor===t.minor&&r.patch===t.patch)return!0}return!1}return!0},{MAX_LENGTH:V}=u,{re:G,t:K}=f,{re:Y,t:X}=f;function J(e){return String.fromCharCode(parseInt(e.slice(1),16))}function Z(e){return`%${`00${e.charCodeAt(0).toString(16)}`.slice(-2)}`}function Q(e){return t=JSON.stringify(e),btoa(encodeURIComponent(t).replace(/%[0-9A-F]{2}/g,J));var t}function ee(e){return JSON.parse(decodeURIComponent(Array.from(atob(e),Z).join("")))}function te(e){return void 0===e}function ne(e){return function(e){return null===e}(e)||te(e)}function re(e){if(!e)return!0;for(const t in e)if(Object.hasOwnProperty.call(e,t))return!1;return!0}const ie={},oe={"magic-sdk":"magic-sdk","@magic-sdk/react-native":"magic-sdk-rn"};class se extends Error{constructor(e,t){super(`Magic SDK Error: [${e}] ${t}`),this.code=void 0,this.rawMessage=void 0,this.__proto__=Error,this.code=e,this.rawMessage=t,Object.setPrototypeOf(this,se.prototype)}}class ae extends Error{constructor(e){super(),this.__proto__=Error,this.code=void 0,this.rawMessage=void 0;const t=Number(null==e?void 0:e.code);this.rawMessage=(null==e?void 0:e.message)||"Internal error",this.code=function(e){return!ne(e)&&"number"==typeof e&&Object.values(r).includes(e)}(t)?t:r.InternalError,this.message=`Magic RPC Error: [${this.code}] ${this.rawMessage}`,Object.setPrototypeOf(this,ae.prototype)}}class ce{constructor(e,t){this.code=void 0,this.rawMessage=void 0,this.message=void 0,this.code=e,this.rawMessage=t,this.message=`Magic SDK Warning: [${e}] ${t}`}log(){console.warn(this.message)}}class ue extends Error{constructor(e,t,n,r){super(`Magic Extension Error (${e.name}): [${t}] ${n}`),this.code=void 0,this.rawMessage=void 0,this.data=void 0,this.__proto__=Error,this.code=t,this.rawMessage=n,this.data=r,Object.setPrototypeOf(this,ue.prototype)}}class le{constructor(e,t,n){this.code=void 0,this.rawMessage=void 0,this.message=void 0,this.code=t,this.rawMessage=n,this.message=`Magic Extension Warning (${e.name}): [${t}] ${n}`}log(){console.warn(this.message)}}const fe=function*(){let e=0;for(;;)e<Number.MAX_SAFE_INTEGER?yield++e:e=0}();function pe(){return fe.next().value}const he=Symbol("Payload pre-processed by Magic SDK");function de(e){return Object.defineProperty(e,he,{value:!0,enumerable:!1}),e}function me(e){var t,n,r;return function(e){return!!e[he]}(e)||(e.jsonrpc=null!=(t=e.jsonrpc)?t:"2.0",e.id=pe(),e.method=null!=(n=e.method)?n:"noop",e.params=null!=(r=e.params)?r:[],de(e)),e}function ge(e,t=[]){return de({params:t,method:e,jsonrpc:"2.0",id:pe()})}class ve{constructor(e){this._jsonrpc=void 0,this._id=void 0,this._result=void 0,this._error=void 0,e instanceof ve?(this._jsonrpc=e.payload.jsonrpc,this._id=e.payload.id,this._result=e.payload.result,this._error=e.payload.error):function(e){return!ne(e)&&!(te(e.jsonrpc)||te(e.id)||te(e.result)&&te(e.error))}(e)?(this._jsonrpc=e.jsonrpc,this._id=e.id,this._result=e.result,this._error=e.error):(this._jsonrpc=e.jsonrpc,this._id=e.id,this._result=void 0,this._error=void 0)}applyError(e){return this._error=e,this}applyResult(e){return this._result=e,this}get hasError(){return null!=this._error}get hasResult(){return void 0!==this._result}get payload(){return{jsonrpc:this._jsonrpc,id:this._id,result:this._result,error:this._error}}}var ye,be=(function(e){var t=Object.prototype.hasOwnProperty,n="~";function r(){}function i(e,t,n){this.fn=e,this.context=t,this.once=n||!1}function o(e,t,r,o,s){if("function"!=typeof r)throw new TypeError("The listener must be a function");var a=new i(r,o||e,s),c=n?n+t:t;return e._events[c]?e._events[c].fn?e._events[c]=[e._events[c],a]:e._events[c].push(a):(e._events[c]=a,e._eventsCount++),e}function s(e,t){0==--e._eventsCount?e._events=new r:delete e._events[t]}function a(){this._events=new r,this._eventsCount=0}Object.create&&(r.prototype=Object.create(null),(new r).__proto__||(n=!1)),a.prototype.eventNames=function(){var e,r,i=[];if(0===this._eventsCount)return i;for(r in e=this._events)t.call(e,r)&&i.push(n?r.slice(1):r);return Object.getOwnPropertySymbols?i.concat(Object.getOwnPropertySymbols(e)):i},a.prototype.listeners=function(e){var t=this._events[n?n+e:e];if(!t)return[];if(t.fn)return[t.fn];for(var r=0,i=t.length,o=new Array(i);r<i;r++)o[r]=t[r].fn;return o},a.prototype.listenerCount=function(e){var t=this._events[n?n+e:e];return t?t.fn?1:t.length:0},a.prototype.emit=function(e,t,r,i,o,s){var a=n?n+e:e;if(!this._events[a])return!1;var c,u,l=this._events[a],f=arguments.length;if(l.fn){switch(l.once&&this.removeListener(e,l.fn,void 0,!0),f){case 1:return l.fn.call(l.context),!0;case 2:return l.fn.call(l.context,t),!0;case 3:return l.fn.call(l.context,t,r),!0;case 4:return l.fn.call(l.context,t,r,i),!0;case 5:return l.fn.call(l.context,t,r,i,o),!0;case 6:return l.fn.call(l.context,t,r,i,o,s),!0}for(u=1,c=new Array(f-1);u<f;u++)c[u-1]=arguments[u];l.fn.apply(l.context,c)}else{var p,h=l.length;for(u=0;u<h;u++)switch(l[u].once&&this.removeListener(e,l[u].fn,void 0,!0),f){case 1:l[u].fn.call(l[u].context);break;case 2:l[u].fn.call(l[u].context,t);break;case 3:l[u].fn.call(l[u].context,t,r);break;case 4:l[u].fn.call(l[u].context,t,r,i);break;default:if(!c)for(p=1,c=new Array(f-1);p<f;p++)c[p-1]=arguments[p];l[u].fn.apply(l[u].context,c)}}return!0},a.prototype.on=function(e,t,n){return o(this,e,t,n,!1)},a.prototype.once=function(e,t,n){return o(this,e,t,n,!0)},a.prototype.removeListener=function(e,t,r,i){var o=n?n+e:e;if(!this._events[o])return this;if(!t)return s(this,o),this;var a=this._events[o];if(a.fn)a.fn!==t||i&&!a.once||r&&a.context!==r||s(this,o);else{for(var c=0,u=[],l=a.length;c<l;c++)(a[c].fn!==t||i&&!a[c].once||r&&a[c].context!==r)&&u.push(a[c]);u.length?this._events[o]=1===u.length?u[0]:u:s(this,o)}return this},a.prototype.removeAllListeners=function(e){var t;return e?this._events[t=n?n+e:e]&&s(this,t):(this._events=new r,this._eventsCount=0),this},a.prototype.off=a.prototype.removeListener,a.prototype.addListener=a.prototype.on,a.prefixed=n,a.EventEmitter=a,e.exports=a}(ye={exports:{}}),ye.exports);class we extends be{}function _e(){const e=new we;return{emitter:e,createChainingEmitterMethod:(t,n)=>(...r)=>(e[t].apply(e,r),n),createBoundEmitterMethod:t=>(...n)=>e[t].apply(e,n)}}const Ee=Symbol("isPromiEvent");function xe(e){return!!e[Ee]}function Ce(e){const t=ke(e),{createBoundEmitterMethod:n,createChainingEmitterMethod:r}=_e(),i=Symbol("Promise.then"),o=Symbol("Promise.catch"),s=Symbol("Promise.finally"),a=(e,t)=>(...n)=>{const r=t[e].apply(t,n);return c(r)},c=e=>Object.assign(e,{[Ee]:!0,[i]:e[i]||e.then,[o]:e[o]||e.catch,[s]:e[s]||e.finally,then:a(i,e),catch:a(o,e),finally:a(s,e),on:r("on",e),once:r("once",e),addListener:r("addListener",e),off:r("off",e),removeListener:r("removeListener",e),removeAllListeners:r("removeAllListeners",e),emit:n("emit"),eventNames:n("eventNames"),listeners:n("listeners"),listenerCount:n("listenerCount")}),u=c(t.then((e=>(u.emit("done",e),u.emit("settled"),e)),(e=>{throw u.emit("error",e),u.emit("settled"),e})));return u}function ke(e){return new Promise(((t,n)=>{const r=e(t,n);Promise.resolve(r).catch(n)}))}class Se{constructor(e){this.sdk=void 0,this.sdk=e}get overlay(){return this.sdk.overlay}request(t){const n=this.overlay.post(s.MAGIC_HANDLE_REQUEST,me(t)),r=Ce(((t,r)=>{n.then((n=>{if(i(),n.hasError)r(new ae(n.payload.error));else{if(!n.hasResult)throw new se(e.MalformedResponse,"Response from the Magic iframe is malformed.");t(n.payload.result)}})).catch((e=>{i(),r(e)}))})),i=this.overlay.on(o.MAGIC_HANDLE_EVENT,(e=>{var n;const{response:i}=e.data;if(i.id===t.id&&null!=(n=i.result)&&n.event){const{event:e,params:t=[]}=i.result;r.emit(e,...t)}}));return r}}class Ae extends Se{loginWithMagicLink(e){const{email:t,showUI:n=!0,redirectURI:r}=e,o=ge(this.sdk.testMode?i.LoginWithMagicLinkTestMode:i.LoginWithMagicLink,[{email:t,showUI:n,redirectURI:r}]);return this.request(o)}loginWithSMS(e){const{phoneNumber:t}=e,n=ge(this.sdk.testMode?i.LoginWithSmsTestMode:i.LoginWithSms,[{phoneNumber:t,showUI:!0}]);return this.request(n)}loginWithCredential(e){let t=null!=e?e:"";if(!e&&"web"===ie.platform){t=window.location.search;const e=window.location.origin+window.location.pathname;window.history.replaceState(null,"",e)}const n=ge(this.sdk.testMode?i.LoginWithCredentialTestMode:i.LoginWithCredential,[t]);return this.request(n)}}let Ie;function Oe(e){return async(...t)=>(Ie||(Ie=await ie.configureStorage()),await Ie.ready(),Ie[e](...t))}const Te=Oe("getItem"),Re=Oe("setItem"),Me=Oe("removeItem"),Le=Oe("clear"),Ne=Oe("length"),De=Oe("key"),Pe=Oe("keys"),Fe=Oe("iterate");var je={__proto__:null,getItem:Te,setItem:Re,removeItem:Me,clear:Le,length:Ne,key:De,keys:Pe,iterate:Fe};function Be(){const e=window.crypto.getRandomValues(new Uint8Array(16));e[6]=15&e[6]|64,e[8]=191&e[8]|128;let t="";return t+=e[0].toString(16),t+=e[1].toString(16),t+=e[2].toString(16),t+=e[3].toString(16),t+="-",t+=e[4].toString(16),t+=e[5].toString(16),t+="-",t+=e[6].toString(16),t+=e[7].toString(16),t+="-",t+=e[8].toString(16),t+=e[9].toString(16),t+="-",t+=e[10].toString(16),t+=e[11].toString(16),t+=e[12].toString(16),t+=e[13].toString(16),t+=e[14].toString(16),t+=e[15].toString(16),t}const $e={name:"ECDSA",namedCurve:"P-256"},Ue={name:"ECDSA",namedCurve:"P-256"};function We(e){return ze(function(e){return encodeURIComponent(e).replace(/%([0-9A-F]{2})/g,((e,t)=>String.fromCharCode(parseInt(t,16))))}(e))}function ze(e){return btoa(e).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+/g,"")}class He extends Se{getIdToken(e){const t=ge(this.sdk.testMode?i.GetIdTokenTestMode:i.GetIdToken,[e]);return this.request(t)}generateIdToken(e){const t=ge(this.sdk.testMode?i.GenerateIdTokenTestMode:i.GenerateIdToken,[e]);return this.request(t)}getMetadata(){const e=ge(this.sdk.testMode?i.GetMetadataTestMode:i.GetMetadata);return this.request(e)}updateEmail(e){const{email:t,showUI:n=!0}=e,r=ge(this.sdk.testMode?i.UpdateEmailTestMode:i.UpdateEmail,[{email:t,showUI:n}]);return this.request(r)}isLoggedIn(){const e=ge(this.sdk.testMode?i.IsLoggedInTestMode:i.IsLoggedIn);return this.request(e)}logout(){Me("STORE_KEY_PUBLIC_JWK"),Me("STORE_KEY_PRIVATE_KEY");const e=ge(this.sdk.testMode?i.LogoutTestMode:i.Logout);return this.request(e)}showSettings(){const e=ge(this.sdk.testMode?i.UserSettingsTestMode:i.UserSettings);return this.request(e)}}function qe(){return(qe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}const{createBoundEmitterMethod:Ve,createChainingEmitterMethod:Ge}=_e();class Ke extends Se{constructor(...e){super(...e),this.isMagic=!0,this.on=Ge("on",this),this.once=Ge("once",this),this.addListener=Ge("addListener",this),this.off=Ge("off",this),this.removeListener=Ge("removeListener",this),this.removeAllListeners=Ge("removeAllListeners",this),this.emit=Ve("emit"),this.eventNames=Ve("eventNames"),this.listeners=Ve("listeners"),this.listenerCount=Ve("listenerCount")}sendAsync(t,n){if(!n)throw function(t){return new se(e.InvalidArgument,`Invalid ${(e=>{const t=e+1,n=t%10,r=t%100;return 1===n&&11!==r?`${t}st`:2===n&&12!==r?`${t}nd`:3===n&&13!==r?`${t}rd`:`${t}th`})(t.argument)} argument given to \`${t.procedure}\`.\n  Expected: \`${t.expected}\`\n  Received: \`${t.received}\``)}({procedure:"Magic.rpcProvider.sendAsync",argument:1,expected:"function",received:null===n?"null":typeof n});if(Array.isArray(t))this.overlay.post(s.MAGIC_HANDLE_REQUEST,t.map((e=>{const t=me(e);return this.prefixPayloadMethodForTestMode(t),t}))).then((e=>{n(null,e.map((e=>qe({},e.payload,{error:e.hasError?new ae(e.payload.error):null}))))}));else{const e=me(t);this.prefixPayloadMethodForTestMode(e),this.overlay.post(s.MAGIC_HANDLE_REQUEST,e).then((e=>{n(e.hasError?new ae(e.payload.error):null,e.payload)}))}}send(e,n){if("string"==typeof e){const t=ge(e,Array.isArray(n)?n:[]);return this.request(t)}if(Array.isArray(e)||n)return void this.sendAsync(e,n);const r=new ce(t.SyncWeb3Method,"Non-async web3 methods are deprecated in web3 > 1.0 and are not supported by the Magic web3 provider. Please use an async method instead.");return r.log(),new ve(e).applyError({code:-32603,message:r.rawMessage}).payload}enable(){const e=ge("eth_accounts");return this.request(e)}request(e){return this.prefixPayloadMethodForTestMode(e),super.request(e)}prefixPayloadMethodForTestMode(e){this.sdk.testMode&&(e.method=`testMode/eth/${e.method}`)}}function Ye(e,t){return t?new URL(e,t):new URL(e)}const Xe=["request","overlay","sdk"];function Je(e){let t=Object.getPrototypeOf(e);const n=[t];for(;t!==Se.prototype;)t=Object.getPrototypeOf(t),n.push(t);return n}class Ze extends Se{constructor(){super(void 0),this.__sdk_access_field_descriptors__=new Map,this.__is_initialized__=!1,this.utils={createPromiEvent:Ce,isPromiEvent:xe,encodeJSON:Q,decodeJSON:ee,createJsonRpcRequestPayload:ge,standardizeJsonRpcRequestPayload:me,storage:je};const t=[this,...Je(this)];Xe.forEach((n=>{const r=t.map((e=>Object.getOwnPropertyDescriptor(e,n))),i=r.findIndex((e=>!!e)),o=r[i];o&&(this.__sdk_access_field_descriptors__.set(n,{descriptor:o,isPrototypeField:i>0}),Object.defineProperty(this,n,{configurable:!0,get:()=>{throw function(t){return new se(e.ExtensionNotInitialized,`Extensions must be initialized with a Magic SDK instance before \`Extension.${t}\` can be accessed. Do not invoke \`Extension.${t}\` inside an extension constructor.`)}(n)}}))}))}init(e){this.__is_initialized__||(Xe.forEach((e=>{if(this.__sdk_access_field_descriptors__.has(e)){const{descriptor:t,isPrototypeField:n}=this.__sdk_access_field_descriptors__.get(e);n?delete this[e]:Object.defineProperty(this,e,t)}})),this.sdk=e,this.__is_initialized__=!0)}createDeprecationWarning(e){const{method:t,removalVersion:n,useInstead:r}=e;return new le(this,"DEPRECATION_NOTICE",`\`${t}\` will be removed from this Extension in version \`${n}\`.${r?` Use \`${r}\` instead.`:""}`)}createWarning(e,t){return new le(this,e,t)}createError(e,t,n){return new ue(this,e,t,n)}}class Qe extends Ze{}function et(e){return!e.compat||null==e.compat[ie.sdkName]||("string"==typeof e.compat[ie.sdkName]?((e,t,n)=>{try{t=new A(t,void 0)}catch(e){return!1}return t.test(e)})(((e,t)=>{if(e instanceof w)return e;if("number"==typeof e&&(e=String(e)),"string"!=typeof e)return null;let n=null;if((t=t||{}).rtl){let t;for(;(t=Y[X.COERCERTL].exec(e))&&(!n||n.index+n[0].length!==e.length);)n&&t.index+t[0].length===n.index+n[0].length||(n=t),Y[X.COERCERTL].lastIndex=t.index+t[1].length+t[2].length;Y[X.COERCERTL].lastIndex=-1}else n=e.match(Y[X.COERCE]);return null===n?null:((e,t)=>{if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof w)return e;if("string"!=typeof e)return null;if(e.length>V)return null;if(!(t.loose?G[K.LOOSE]:G[K.FULL]).test(e))return null;try{return new w(e,t)}catch(e){return null}})(`${n[2]}.${n[3]||"0"}.${n[4]||"0"}`,t)})(ie.version),e.compat[ie.sdkName]):!!e.compat[ie.sdkName])}function tt(t){var n;const r=null!=(n=null==t?void 0:t.extensions)?n:[],i={},o=[];if(Array.isArray(r)?r.forEach((e=>{et(e)?(e.init(this),(e.name||e.name!==Qe.Anonymous)&&(this[e.name]=e),e instanceof Qe.Internal&&(re(e.config)||(i[e.name]=e.config))):o.push(e)})):Object.keys(r).forEach((e=>{if(et(r[e])){r[e].init(this);const t=r[e];this[e]=t,t instanceof Qe.Internal&&(re(t.config)||(i[r[e].name]=t.config))}else o.push(r[e])})),o.length)throw function(t){let n=`Some extensions are incompatible with \`${ie.sdkName}@${ie.version}\`:`;return t.filter((e=>null!=e.compat)).forEach((e=>{const t=e.compat[ie.sdkName];"string"==typeof t?n+=`\n  - Extension \`${e.name}\` supports version(s) \`${t}\``:t||(n+=`\n  - Extension \`${e.name}\` does not support ${ie.platform} environments.`)})),new se(e.IncompatibleExtensions,n)}(o);return i}Qe.Internal=class extends Ze{},Qe.Anonymous="anonymous extension";class nt{constructor(n,r){var i;if(this.apiKey=void 0,this.endpoint=void 0,this.parameters=void 0,this.testMode=void 0,this.auth=void 0,this.user=void 0,this.rpcProvider=void 0,this.apiKey=n,!n)throw new se(e.MissingApiKey,"Please provide an API key that you acquired from the Magic developer dashboard.");"react-native"===ie.platform&&null!=r&&r.endpoint&&new ce(t.ReactNativeEndpointConfiguration,`CUSTOM DOMAINS ARE NOT SUPPORTED WHEN USING MAGIC SDK WITH REACT NATIVE! The \`endpoint\` parameter SHOULD NOT be provided. The Magic \`<iframe>\` is automatically wrapped by a WebView pointed at \`${ie.defaultEndpoint}\`. Changing this default behavior will lead to unexpected results and potentially security-threatening bugs.`).log();const{defaultEndpoint:o,version:s}=ie;this.testMode=!(null==r||!r.testMode),this.endpoint=Ye(null!=(i=null==r?void 0:r.endpoint)?i:o).origin,this.auth=new Ae(this),this.user=new He(this),this.rpcProvider=new Ke(this);const a=tt.call(this,r);this.parameters=Q({API_KEY:this.apiKey,DOMAIN_ORIGIN:window.location?window.location.origin:"",ETH_NETWORK:null==r?void 0:r.network,host:Ye(this.endpoint).host,sdk:oe[ie.sdkName],version:s,ext:re(a)?void 0:a,locale:(null==r?void 0:r.locale)||"en_US"})}get overlay(){if(!nt.__overlays__.has(this.parameters)){const e=new ie.ViewController(this.endpoint,this.parameters);e.init(),nt.__overlays__.set(this.parameters,e)}return nt.__overlays__.get(this.parameters)}async preload(){await this.overlay.ready}}nt.__overlays__=new Map;var rt="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function it(e){var t={exports:{}};return e(t,t.exports),t.exports}function ot(e){throw new Error('Could not dynamically require "'+e+'". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.')}var st=it((function(e,t){e.exports=function e(t,n,r){function i(s,a){if(!n[s]){if(!t[s]){if(!a&&ot)return ot(s);if(o)return o(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var u=n[s]={exports:{}};t[s][0].call(u.exports,(function(e){return i(t[s][1][e]||e)}),u,u.exports,e,t,n,r)}return n[s].exports}for(var o=ot,s=0;s<r.length;s++)i(r[s]);return i}({1:[function(e,t,n){(function(e){var n,r,i=e.MutationObserver||e.WebKitMutationObserver;if(i){var o=0,s=new i(l),a=e.document.createTextNode("");s.observe(a,{characterData:!0}),n=function(){a.data=o=++o%2}}else if(e.setImmediate||void 0===e.MessageChannel)n="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){l(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(l,0)};else{var c=new e.MessageChannel;c.port1.onmessage=l,n=function(){c.port2.postMessage(0)}}var u=[];function l(){var e,t;r=!0;for(var n=u.length;n;){for(t=u,u=[],e=-1;++e<n;)t[e]();n=u.length}r=!1}t.exports=function(e){1!==u.push(e)||r||n()}}).call(this,void 0!==rt?rt:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(e,t,n){var r=e(1);function i(){}var o={},s=["REJECTED"],a=["FULFILLED"],c=["PENDING"];function u(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=c,this.queue=[],this.outcome=void 0,e!==i&&h(this,e)}function l(e,t,n){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof n&&(this.onRejected=n,this.callRejected=this.otherCallRejected)}function f(e,t,n){r((function(){var r;try{r=t(n)}catch(t){return o.reject(e,t)}r===e?o.reject(e,new TypeError("Cannot resolve promise with itself")):o.resolve(e,r)}))}function p(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function h(e,t){var n=!1;function r(t){n||(n=!0,o.reject(e,t))}function i(t){n||(n=!0,o.resolve(e,t))}var s=d((function(){t(i,r)}));"error"===s.status&&r(s.value)}function d(e,t){var n={};try{n.value=e(t),n.status="success"}catch(e){n.status="error",n.value=e}return n}t.exports=u,u.prototype.catch=function(e){return this.then(null,e)},u.prototype.then=function(e,t){if("function"!=typeof e&&this.state===a||"function"!=typeof t&&this.state===s)return this;var n=new this.constructor(i);return this.state!==c?f(n,this.state===a?e:t,this.outcome):this.queue.push(new l(n,e,t)),n},l.prototype.callFulfilled=function(e){o.resolve(this.promise,e)},l.prototype.otherCallFulfilled=function(e){f(this.promise,this.onFulfilled,e)},l.prototype.callRejected=function(e){o.reject(this.promise,e)},l.prototype.otherCallRejected=function(e){f(this.promise,this.onRejected,e)},o.resolve=function(e,t){var n=d(p,t);if("error"===n.status)return o.reject(e,n.value);var r=n.value;if(r)h(e,r);else{e.state=a,e.outcome=t;for(var i=-1,s=e.queue.length;++i<s;)e.queue[i].callFulfilled(t)}return e},o.reject=function(e,t){e.state=s,e.outcome=t;for(var n=-1,r=e.queue.length;++n<r;)e.queue[n].callRejected(t);return e},u.resolve=function(e){return e instanceof this?e:o.resolve(new this(i),e)},u.reject=function(e){var t=new this(i);return o.reject(t,e)},u.all=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,r=!1;if(!n)return this.resolve([]);for(var s=new Array(n),a=0,c=-1,u=new this(i);++c<n;)l(e[c],c);return u;function l(e,i){t.resolve(e).then((function(e){s[i]=e,++a!==n||r||(r=!0,o.resolve(u,s))}),(function(e){r||(r=!0,o.reject(u,e))}))}},u.race=function(e){if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var t=e.length,n=!1;if(!t)return this.resolve([]);for(var r=-1,s=new this(i);++r<t;)this.resolve(e[r]).then((function(e){n||(n=!0,o.resolve(s,e))}),(function(e){n||(n=!0,o.reject(s,e))}));return s}},{1:1}],3:[function(e,t,n){(function(t){"function"!=typeof t.Promise&&(t.Promise=e(2))}).call(this,void 0!==rt?rt:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{2:2}],4:[function(e,t,n){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){try{if("undefined"!=typeof indexedDB)return indexedDB;if("undefined"!=typeof webkitIndexedDB)return webkitIndexedDB;if("undefined"!=typeof mozIndexedDB)return mozIndexedDB;if("undefined"!=typeof OIndexedDB)return OIndexedDB;if("undefined"!=typeof msIndexedDB)return msIndexedDB}catch(e){return}}();function o(e,t){e=e||[],t=t||{};try{return new Blob(e,t)}catch(i){if("TypeError"!==i.name)throw i;for(var n=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),r=0;r<e.length;r+=1)n.append(e[r]);return n.getBlob(t.type)}}"undefined"==typeof Promise&&e(3);var s=Promise;function a(e,t){t&&e.then((function(e){t(null,e)}),(function(e){t(e)}))}function c(e,t,n){"function"==typeof t&&e.then(t),"function"==typeof n&&e.catch(n)}function u(e){return"string"!=typeof e&&(console.warn(e+" used as a key, but it is not a string."),e=String(e)),e}function l(){if(arguments.length&&"function"==typeof arguments[arguments.length-1])return arguments[arguments.length-1]}var f="local-forage-detect-blob-support",p=void 0,h={},d=Object.prototype.toString,m="readonly",g="readwrite";function v(e){for(var t=e.length,n=new ArrayBuffer(t),r=new Uint8Array(n),i=0;i<t;i++)r[i]=e.charCodeAt(i);return n}function y(e){var t=h[e.name],n={};n.promise=new s((function(e,t){n.resolve=e,n.reject=t})),t.deferredOperations.push(n),t.dbReady=t.dbReady?t.dbReady.then((function(){return n.promise})):n.promise}function b(e){var t=h[e.name].deferredOperations.pop();if(t)return t.resolve(),t.promise}function w(e,t){var n=h[e.name].deferredOperations.pop();if(n)return n.reject(t),n.promise}function _(e,t){return new s((function(n,r){if(h[e.name]=h[e.name]||{forages:[],db:null,dbReady:null,deferredOperations:[]},e.db){if(!t)return n(e.db);y(e),e.db.close()}var o=[e.name];t&&o.push(e.version);var s=i.open.apply(i,o);t&&(s.onupgradeneeded=function(t){var n=s.result;try{n.createObjectStore(e.storeName),t.oldVersion<=1&&n.createObjectStore(f)}catch(n){if("ConstraintError"!==n.name)throw n;console.warn('The database "'+e.name+'" has been upgraded from version '+t.oldVersion+" to version "+t.newVersion+', but the storage "'+e.storeName+'" already exists.')}}),s.onerror=function(e){e.preventDefault(),r(s.error)},s.onsuccess=function(){n(s.result),b(e)}}))}function E(e){return _(e,!1)}function x(e){return _(e,!0)}function C(e,t){if(!e.db)return!0;var n=!e.db.objectStoreNames.contains(e.storeName),r=e.version>e.db.version;if(e.version<e.db.version&&(e.version!==t&&console.warn('The database "'+e.name+"\" can't be downgraded from version "+e.db.version+" to version "+e.version+"."),e.version=e.db.version),r||n){if(n){var i=e.db.version+1;i>e.version&&(e.version=i)}return!0}return!1}function k(e){return o([v(atob(e.data))],{type:e.type})}function S(e){return e&&e.__local_forage_encoded_blob}function A(e){var t=this,n=t._initReady().then((function(){var e=h[t._dbInfo.name];if(e&&e.dbReady)return e.dbReady}));return c(n,e,e),n}function I(e,t,n,r){void 0===r&&(r=1);try{var i=e.db.transaction(e.storeName,t);n(null,i)}catch(i){if(r>0&&(!e.db||"InvalidStateError"===i.name||"NotFoundError"===i.name))return s.resolve().then((function(){if(!e.db||"NotFoundError"===i.name&&!e.db.objectStoreNames.contains(e.storeName)&&e.version<=e.db.version)return e.db&&(e.version=e.db.version+1),x(e)})).then((function(){return function(e){y(e);for(var t=h[e.name],n=t.forages,r=0;r<n.length;r++){var i=n[r];i._dbInfo.db&&(i._dbInfo.db.close(),i._dbInfo.db=null)}return e.db=null,E(e).then((function(t){return e.db=t,C(e)?x(e):t})).then((function(r){e.db=t.db=r;for(var i=0;i<n.length;i++)n[i]._dbInfo.db=r})).catch((function(t){throw w(e,t),t}))}(e).then((function(){I(e,t,n,r-1)}))})).catch(n);n(i)}}var O={_driver:"asyncStorage",_initStorage:function(e){var t=this,n={db:null};if(e)for(var r in e)n[r]=e[r];var i=h[n.name];i||(h[n.name]=i={forages:[],db:null,dbReady:null,deferredOperations:[]}),i.forages.push(t),t._initReady||(t._initReady=t.ready,t.ready=A);var o=[];function a(){return s.resolve()}for(var c=0;c<i.forages.length;c++){var u=i.forages[c];u!==t&&o.push(u._initReady().catch(a))}var l=i.forages.slice(0);return s.all(o).then((function(){return n.db=i.db,E(n)})).then((function(e){return n.db=e,C(n,t._defaultConfig.version)?x(n):e})).then((function(e){n.db=i.db=e,t._dbInfo=n;for(var r=0;r<l.length;r++){var o=l[r];o!==t&&(o._dbInfo.db=n.db,o._dbInfo.version=n.version)}}))},_support:function(){try{if(!i||!i.open)return!1;var e="undefined"!=typeof openDatabase&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),t="function"==typeof fetch&&-1!==fetch.toString().indexOf("[native code");return(!e||t)&&"undefined"!=typeof indexedDB&&"undefined"!=typeof IDBKeyRange}catch(e){return!1}}(),iterate:function(e,t){var n=this,r=new s((function(t,r){n.ready().then((function(){I(n._dbInfo,m,(function(i,o){if(i)return r(i);try{var s=o.objectStore(n._dbInfo.storeName).openCursor(),a=1;s.onsuccess=function(){var n=s.result;if(n){var r=n.value;S(r)&&(r=k(r));var i=e(r,n.key,a++);void 0!==i?t(i):n.continue()}else t()},s.onerror=function(){r(s.error)}}catch(e){r(e)}}))})).catch(r)}));return a(r,t),r},getItem:function(e,t){var n=this;e=u(e);var r=new s((function(t,r){n.ready().then((function(){I(n._dbInfo,m,(function(i,o){if(i)return r(i);try{var s=o.objectStore(n._dbInfo.storeName).get(e);s.onsuccess=function(){var e=s.result;void 0===e&&(e=null),S(e)&&(e=k(e)),t(e)},s.onerror=function(){r(s.error)}}catch(e){r(e)}}))})).catch(r)}));return a(r,t),r},setItem:function(e,t,n){var r=this;e=u(e);var i=new s((function(n,i){var a;r.ready().then((function(){return a=r._dbInfo,"[object Blob]"===d.call(t)?function(e){return"boolean"==typeof p?s.resolve(p):function(e){return new s((function(t){var n=e.transaction(f,g),r=o([""]);n.objectStore(f).put(r,"key"),n.onabort=function(e){e.preventDefault(),e.stopPropagation(),t(!1)},n.oncomplete=function(){var e=navigator.userAgent.match(/Chrome\/(\d+)/),n=navigator.userAgent.match(/Edge\//);t(n||!e||parseInt(e[1],10)>=43)}})).catch((function(){return!1}))}(e).then((function(e){return p=e}))}(a.db).then((function(e){return e?t:(n=t,new s((function(e,t){var r=new FileReader;r.onerror=t,r.onloadend=function(t){var r=btoa(t.target.result||"");e({__local_forage_encoded_blob:!0,data:r,type:n.type})},r.readAsBinaryString(n)})));var n})):t})).then((function(t){I(r._dbInfo,g,(function(o,s){if(o)return i(o);try{var a=s.objectStore(r._dbInfo.storeName);null===t&&(t=void 0);var c=a.put(t,e);s.oncomplete=function(){void 0===t&&(t=null),n(t)},s.onabort=s.onerror=function(){i(c.error?c.error:c.transaction.error)}}catch(e){i(e)}}))})).catch(i)}));return a(i,n),i},removeItem:function(e,t){var n=this;e=u(e);var r=new s((function(t,r){n.ready().then((function(){I(n._dbInfo,g,(function(i,o){if(i)return r(i);try{var s=o.objectStore(n._dbInfo.storeName).delete(e);o.oncomplete=function(){t()},o.onerror=function(){r(s.error)},o.onabort=function(){r(s.error?s.error:s.transaction.error)}}catch(e){r(e)}}))})).catch(r)}));return a(r,t),r},clear:function(e){var t=this,n=new s((function(e,n){t.ready().then((function(){I(t._dbInfo,g,(function(r,i){if(r)return n(r);try{var o=i.objectStore(t._dbInfo.storeName).clear();i.oncomplete=function(){e()},i.onabort=i.onerror=function(){n(o.error?o.error:o.transaction.error)}}catch(e){n(e)}}))})).catch(n)}));return a(n,e),n},length:function(e){var t=this,n=new s((function(e,n){t.ready().then((function(){I(t._dbInfo,m,(function(r,i){if(r)return n(r);try{var o=i.objectStore(t._dbInfo.storeName).count();o.onsuccess=function(){e(o.result)},o.onerror=function(){n(o.error)}}catch(e){n(e)}}))})).catch(n)}));return a(n,e),n},key:function(e,t){var n=this,r=new s((function(t,r){e<0?t(null):n.ready().then((function(){I(n._dbInfo,m,(function(i,o){if(i)return r(i);try{var s=o.objectStore(n._dbInfo.storeName),a=!1,c=s.openKeyCursor();c.onsuccess=function(){var n=c.result;n?0===e||a?t(n.key):(a=!0,n.advance(e)):t(null)},c.onerror=function(){r(c.error)}}catch(e){r(e)}}))})).catch(r)}));return a(r,t),r},keys:function(e){var t=this,n=new s((function(e,n){t.ready().then((function(){I(t._dbInfo,m,(function(r,i){if(r)return n(r);try{var o=i.objectStore(t._dbInfo.storeName).openKeyCursor(),s=[];o.onsuccess=function(){var t=o.result;t?(s.push(t.key),t.continue()):e(s)},o.onerror=function(){n(o.error)}}catch(e){n(e)}}))})).catch(n)}));return a(n,e),n},dropInstance:function(e,t){t=l.apply(this,arguments);var n=this.config();(e="function"!=typeof e&&e||{}).name||(e.name=e.name||n.name,e.storeName=e.storeName||n.storeName);var r,o=this;if(e.name){var c=e.name===n.name&&o._dbInfo.db?s.resolve(o._dbInfo.db):E(e).then((function(t){var n=h[e.name],r=n.forages;n.db=t;for(var i=0;i<r.length;i++)r[i]._dbInfo.db=t;return t}));r=c.then(e.storeName?function(t){if(t.objectStoreNames.contains(e.storeName)){var n=t.version+1;y(e);var r=h[e.name],o=r.forages;t.close();for(var a=0;a<o.length;a++){var c=o[a];c._dbInfo.db=null,c._dbInfo.version=n}return new s((function(t,r){var o=i.open(e.name,n);o.onerror=function(e){o.result.close(),r(e)},o.onupgradeneeded=function(){o.result.deleteObjectStore(e.storeName)},o.onsuccess=function(){var e=o.result;e.close(),t(e)}})).then((function(e){r.db=e;for(var t=0;t<o.length;t++){var n=o[t];n._dbInfo.db=e,b(n._dbInfo)}})).catch((function(t){throw(w(e,t)||s.resolve()).catch((function(){})),t}))}}:function(t){y(e);var n=h[e.name],r=n.forages;t.close();for(var o=0;o<r.length;o++)r[o]._dbInfo.db=null;return new s((function(t,n){var r=i.deleteDatabase(e.name);r.onerror=r.onblocked=function(e){var t=r.result;t&&t.close(),n(e)},r.onsuccess=function(){var e=r.result;e&&e.close(),t(e)}})).then((function(e){n.db=e;for(var t=0;t<r.length;t++)b(r[t]._dbInfo)})).catch((function(t){throw(w(e,t)||s.resolve()).catch((function(){})),t}))})}else r=s.reject("Invalid arguments");return a(r,t),r}},T="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",R=/^~~local_forage_type~([^~]+)~/,M="__lfsc__:",L=M.length,N="arbf",D="blob",P="si08",F="ui08",j="uic8",B="si16",$="si32",U="ur16",W="ui32",z="fl32",H="fl64",q=L+N.length,V=Object.prototype.toString;function G(e){var t,n,r,i,o,s=.75*e.length,a=e.length,c=0;"="===e[e.length-1]&&(s--,"="===e[e.length-2]&&s--);var u=new ArrayBuffer(s),l=new Uint8Array(u);for(t=0;t<a;t+=4)n=T.indexOf(e[t]),r=T.indexOf(e[t+1]),i=T.indexOf(e[t+2]),o=T.indexOf(e[t+3]),l[c++]=n<<2|r>>4,l[c++]=(15&r)<<4|i>>2,l[c++]=(3&i)<<6|63&o;return u}function K(e){var t,n=new Uint8Array(e),r="";for(t=0;t<n.length;t+=3)r+=T[n[t]>>2],r+=T[(3&n[t])<<4|n[t+1]>>4],r+=T[(15&n[t+1])<<2|n[t+2]>>6],r+=T[63&n[t+2]];return n.length%3==2?r=r.substring(0,r.length-1)+"=":n.length%3==1&&(r=r.substring(0,r.length-2)+"=="),r}var Y={serialize:function(e,t){var n="";if(e&&(n=V.call(e)),e&&("[object ArrayBuffer]"===n||e.buffer&&"[object ArrayBuffer]"===V.call(e.buffer))){var r,i=M;e instanceof ArrayBuffer?(r=e,i+=N):(r=e.buffer,"[object Int8Array]"===n?i+=P:"[object Uint8Array]"===n?i+=F:"[object Uint8ClampedArray]"===n?i+=j:"[object Int16Array]"===n?i+=B:"[object Uint16Array]"===n?i+=U:"[object Int32Array]"===n?i+=$:"[object Uint32Array]"===n?i+=W:"[object Float32Array]"===n?i+=z:"[object Float64Array]"===n?i+=H:t(new Error("Failed to get type for BinaryArray"))),t(i+K(r))}else if("[object Blob]"===n){var o=new FileReader;o.onload=function(){var n="~~local_forage_type~"+e.type+"~"+K(this.result);t("__lfsc__:blob"+n)},o.readAsArrayBuffer(e)}else try{t(JSON.stringify(e))}catch(n){console.error("Couldn't convert value into a JSON string: ",e),t(null,n)}},deserialize:function(e){if(e.substring(0,L)!==M)return JSON.parse(e);var t,n=e.substring(q),r=e.substring(L,q);if(r===D&&R.test(n)){var i=n.match(R);t=i[1],n=n.substring(i[0].length)}var s=G(n);switch(r){case N:return s;case D:return o([s],{type:t});case P:return new Int8Array(s);case F:return new Uint8Array(s);case j:return new Uint8ClampedArray(s);case B:return new Int16Array(s);case U:return new Uint16Array(s);case $:return new Int32Array(s);case W:return new Uint32Array(s);case z:return new Float32Array(s);case H:return new Float64Array(s);default:throw new Error("Unkown type: "+r)}},stringToBuffer:G,bufferToString:K};function X(e,t,n,r){e.executeSql("CREATE TABLE IF NOT EXISTS "+t.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],n,r)}function J(e,t,n,r,i,o){e.executeSql(n,r,i,(function(e,s){s.code===s.SYNTAX_ERR?e.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?",[t.storeName],(function(e,a){a.rows.length?o(e,s):X(e,t,(function(){e.executeSql(n,r,i,o)}),o)}),o):o(e,s)}),o)}function Z(e,t,n,r){var i=this;e=u(e);var o=new s((function(o,s){i.ready().then((function(){void 0===t&&(t=null);var a=t,c=i._dbInfo;c.serializer.serialize(t,(function(t,u){u?s(u):c.db.transaction((function(n){J(n,c,"INSERT OR REPLACE INTO "+c.storeName+" (key, value) VALUES (?, ?)",[e,t],(function(){o(a)}),(function(e,t){s(t)}))}),(function(t){if(t.code===t.QUOTA_ERR){if(r>0)return void o(Z.apply(i,[e,a,n,r-1]));s(t)}}))}))})).catch(s)}));return a(o,n),o}function Q(e){return new s((function(t,n){e.transaction((function(r){r.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'",[],(function(n,r){for(var i=[],o=0;o<r.rows.length;o++)i.push(r.rows.item(o).name);t({db:e,storeNames:i})}),(function(e,t){n(t)}))}),(function(e){n(e)}))}))}var ee={_driver:"webSQLStorage",_initStorage:function(e){var t=this,n={db:null};if(e)for(var r in e)n[r]="string"!=typeof e[r]?e[r].toString():e[r];var i=new s((function(e,r){try{n.db=openDatabase(n.name,String(n.version),n.description,n.size)}catch(e){return r(e)}n.db.transaction((function(i){X(i,n,(function(){t._dbInfo=n,e()}),(function(e,t){r(t)}))}),r)}));return n.serializer=Y,i},_support:"function"==typeof openDatabase,iterate:function(e,t){var n=this,r=new s((function(t,r){n.ready().then((function(){var i=n._dbInfo;i.db.transaction((function(n){J(n,i,"SELECT * FROM "+i.storeName,[],(function(n,r){for(var o=r.rows,s=o.length,a=0;a<s;a++){var c=o.item(a),u=c.value;if(u&&(u=i.serializer.deserialize(u)),void 0!==(u=e(u,c.key,a+1)))return void t(u)}t()}),(function(e,t){r(t)}))}))})).catch(r)}));return a(r,t),r},getItem:function(e,t){var n=this;e=u(e);var r=new s((function(t,r){n.ready().then((function(){var i=n._dbInfo;i.db.transaction((function(n){J(n,i,"SELECT * FROM "+i.storeName+" WHERE key = ? LIMIT 1",[e],(function(e,n){var r=n.rows.length?n.rows.item(0).value:null;r&&(r=i.serializer.deserialize(r)),t(r)}),(function(e,t){r(t)}))}))})).catch(r)}));return a(r,t),r},setItem:function(e,t,n){return Z.apply(this,[e,t,n,1])},removeItem:function(e,t){var n=this;e=u(e);var r=new s((function(t,r){n.ready().then((function(){var i=n._dbInfo;i.db.transaction((function(n){J(n,i,"DELETE FROM "+i.storeName+" WHERE key = ?",[e],(function(){t()}),(function(e,t){r(t)}))}))})).catch(r)}));return a(r,t),r},clear:function(e){var t=this,n=new s((function(e,n){t.ready().then((function(){var r=t._dbInfo;r.db.transaction((function(t){J(t,r,"DELETE FROM "+r.storeName,[],(function(){e()}),(function(e,t){n(t)}))}))})).catch(n)}));return a(n,e),n},length:function(e){var t=this,n=new s((function(e,n){t.ready().then((function(){var r=t._dbInfo;r.db.transaction((function(t){J(t,r,"SELECT COUNT(key) as c FROM "+r.storeName,[],(function(t,n){var r=n.rows.item(0).c;e(r)}),(function(e,t){n(t)}))}))})).catch(n)}));return a(n,e),n},key:function(e,t){var n=this,r=new s((function(t,r){n.ready().then((function(){var i=n._dbInfo;i.db.transaction((function(n){J(n,i,"SELECT key FROM "+i.storeName+" WHERE id = ? LIMIT 1",[e+1],(function(e,n){var r=n.rows.length?n.rows.item(0).key:null;t(r)}),(function(e,t){r(t)}))}))})).catch(r)}));return a(r,t),r},keys:function(e){var t=this,n=new s((function(e,n){t.ready().then((function(){var r=t._dbInfo;r.db.transaction((function(t){J(t,r,"SELECT key FROM "+r.storeName,[],(function(t,n){for(var r=[],i=0;i<n.rows.length;i++)r.push(n.rows.item(i).key);e(r)}),(function(e,t){n(t)}))}))})).catch(n)}));return a(n,e),n},dropInstance:function(e,t){t=l.apply(this,arguments);var n=this.config();(e="function"!=typeof e&&e||{}).name||(e.name=e.name||n.name,e.storeName=e.storeName||n.storeName);var r,i=this;return a(r=e.name?new s((function(t){var r;r=e.name===n.name?i._dbInfo.db:openDatabase(e.name,"","",0),t(e.storeName?{db:r,storeNames:[e.storeName]}:Q(r))})).then((function(e){return new s((function(t,n){e.db.transaction((function(r){function i(e){return new s((function(t,n){r.executeSql("DROP TABLE IF EXISTS "+e,[],(function(){t()}),(function(e,t){n(t)}))}))}for(var o=[],a=0,c=e.storeNames.length;a<c;a++)o.push(i(e.storeNames[a]));s.all(o).then((function(){t()})).catch((function(e){n(e)}))}),(function(e){n(e)}))}))})):s.reject("Invalid arguments"),t),r}};function te(e,t){var n=e.name+"/";return e.storeName!==t.storeName&&(n+=e.storeName+"/"),n}var ne={_driver:"localStorageWrapper",_initStorage:function(e){var t={};if(e)for(var n in e)t[n]=e[n];return t.keyPrefix=te(e,this._defaultConfig),!function(){var e="_localforage_support_test";try{return localStorage.setItem(e,!0),localStorage.removeItem(e),!1}catch(e){return!0}}()||localStorage.length>0?(this._dbInfo=t,t.serializer=Y,s.resolve()):s.reject()},_support:function(){try{return"undefined"!=typeof localStorage&&"setItem"in localStorage&&!!localStorage.setItem}catch(e){return!1}}(),iterate:function(e,t){var n=this,r=n.ready().then((function(){for(var t=n._dbInfo,r=t.keyPrefix,i=r.length,o=localStorage.length,s=1,a=0;a<o;a++){var c=localStorage.key(a);if(0===c.indexOf(r)){var u=localStorage.getItem(c);if(u&&(u=t.serializer.deserialize(u)),void 0!==(u=e(u,c.substring(i),s++)))return u}}}));return a(r,t),r},getItem:function(e,t){var n=this;e=u(e);var r=n.ready().then((function(){var t=n._dbInfo,r=localStorage.getItem(t.keyPrefix+e);return r&&(r=t.serializer.deserialize(r)),r}));return a(r,t),r},setItem:function(e,t,n){var r=this;e=u(e);var i=r.ready().then((function(){void 0===t&&(t=null);var n=t;return new s((function(i,o){var s=r._dbInfo;s.serializer.serialize(t,(function(t,r){if(r)o(r);else try{localStorage.setItem(s.keyPrefix+e,t),i(n)}catch(e){"QuotaExceededError"!==e.name&&"NS_ERROR_DOM_QUOTA_REACHED"!==e.name||o(e),o(e)}}))}))}));return a(i,n),i},removeItem:function(e,t){var n=this;e=u(e);var r=n.ready().then((function(){localStorage.removeItem(n._dbInfo.keyPrefix+e)}));return a(r,t),r},clear:function(e){var t=this,n=t.ready().then((function(){for(var e=t._dbInfo.keyPrefix,n=localStorage.length-1;n>=0;n--){var r=localStorage.key(n);0===r.indexOf(e)&&localStorage.removeItem(r)}}));return a(n,e),n},length:function(e){var t=this.keys().then((function(e){return e.length}));return a(t,e),t},key:function(e,t){var n=this,r=n.ready().then((function(){var t,r=n._dbInfo;try{t=localStorage.key(e)}catch(e){t=null}return t&&(t=t.substring(r.keyPrefix.length)),t}));return a(r,t),r},keys:function(e){var t=this,n=t.ready().then((function(){for(var e=t._dbInfo,n=localStorage.length,r=[],i=0;i<n;i++){var o=localStorage.key(i);0===o.indexOf(e.keyPrefix)&&r.push(o.substring(e.keyPrefix.length))}return r}));return a(n,e),n},dropInstance:function(e,t){if(t=l.apply(this,arguments),!(e="function"!=typeof e&&e||{}).name){var n=this.config();e.name=e.name||n.name,e.storeName=e.storeName||n.storeName}var r,i=this;return a(r=e.name?new s((function(t){t(e.storeName?te(e,i._defaultConfig):e.name+"/")})).then((function(e){for(var t=localStorage.length-1;t>=0;t--){var n=localStorage.key(t);0===n.indexOf(e)&&localStorage.removeItem(n)}})):s.reject("Invalid arguments"),t),r}},re=function(e,t){for(var n=e.length,r=0;r<n;){if((i=e[r])===(o=t)||"number"==typeof i&&"number"==typeof o&&isNaN(i)&&isNaN(o))return!0;r++}var i,o;return!1},ie=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},oe={},se={},ae={INDEXEDDB:O,WEBSQL:ee,LOCALSTORAGE:ne},ce=[ae.INDEXEDDB._driver,ae.WEBSQL._driver,ae.LOCALSTORAGE._driver],ue=["dropInstance"],le=["clear","getItem","iterate","key","keys","length","removeItem","setItem"].concat(ue),fe={description:"",driver:ce.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1};function pe(e,t){e[t]=function(){var n=arguments;return e.ready().then((function(){return e[t].apply(e,n)}))}}function he(){for(var e=1;e<arguments.length;e++){var t=arguments[e];if(t)for(var n in t)t.hasOwnProperty(n)&&(arguments[0][n]=ie(t[n])?t[n].slice():t[n])}return arguments[0]}var de=new(function(){function e(t){for(var n in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),ae)if(ae.hasOwnProperty(n)){var r=ae[n],i=r._driver;this[n]=i,oe[i]||this.defineDriver(r)}this._defaultConfig=he({},fe),this._config=he({},this._defaultConfig,t),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch((function(){}))}return e.prototype.config=function(e){if("object"===(void 0===e?"undefined":r(e))){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var t in e){if("storeName"===t&&(e[t]=e[t].replace(/\W/g,"_")),"version"===t&&"number"!=typeof e[t])return new Error("Database version must be a number.");this._config[t]=e[t]}return!("driver"in e)||!e.driver||this.setDriver(this._config.driver)}return"string"==typeof e?this._config[e]:this._config},e.prototype.defineDriver=function(e,t,n){var r=new s((function(t,n){try{var r=e._driver,i=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");if(!e._driver)return void n(i);for(var o=le.concat("_initStorage"),c=0,u=o.length;c<u;c++){var l=o[c];if((!re(ue,l)||e[l])&&"function"!=typeof e[l])return void n(i)}!function(){for(var t=function(e){return function(){var t=new Error("Method "+e+" is not implemented by the current driver"),n=s.reject(t);return a(n,arguments[arguments.length-1]),n}},n=0,r=ue.length;n<r;n++){var i=ue[n];e[i]||(e[i]=t(i))}}();var f=function(n){oe[r]&&console.info("Redefining LocalForage driver: "+r),oe[r]=e,se[r]=n,t()};"_support"in e?e._support&&"function"==typeof e._support?e._support().then(f,n):f(!!e._support):f(!0)}catch(e){n(e)}}));return c(r,t,n),r},e.prototype.driver=function(){return this._driver||null},e.prototype.getDriver=function(e,t,n){var r=oe[e]?s.resolve(oe[e]):s.reject(new Error("Driver not found."));return c(r,t,n),r},e.prototype.getSerializer=function(e){var t=s.resolve(Y);return c(t,e),t},e.prototype.ready=function(e){var t=this,n=t._driverSet.then((function(){return null===t._ready&&(t._ready=t._initDriver()),t._ready}));return c(n,e,e),n},e.prototype.setDriver=function(e,t,n){var r=this;ie(e)||(e=[e]);var i=this._getSupportedDrivers(e);function o(){r._config.driver=r.driver()}function a(e){return r._extend(e),o(),r._ready=r._initStorage(r._config),r._ready}var u=null!==this._driverSet?this._driverSet.catch((function(){return s.resolve()})):s.resolve();return this._driverSet=u.then((function(){var e=i[0];return r._dbInfo=null,r._ready=null,r.getDriver(e).then((function(e){r._driver=e._driver,o(),r._wrapLibraryMethodsWithReady(),r._initDriver=function(e){return function(){var t=0;return function n(){for(;t<e.length;){var i=e[t];return t++,r._dbInfo=null,r._ready=null,r.getDriver(i).then(a).catch(n)}o();var c=new Error("No available storage method found.");return r._driverSet=s.reject(c),r._driverSet}()}}(i)}))})).catch((function(){o();var e=new Error("No available storage method found.");return r._driverSet=s.reject(e),r._driverSet})),c(this._driverSet,t,n),this._driverSet},e.prototype.supports=function(e){return!!se[e]},e.prototype._extend=function(e){he(this,e)},e.prototype._getSupportedDrivers=function(e){for(var t=[],n=0,r=e.length;n<r;n++){var i=e[n];this.supports(i)&&t.push(i)}return t},e.prototype._wrapLibraryMethodsWithReady=function(){for(var e=0,t=le.length;e<t;e++)pe(this,le[e])},e.prototype.createInstance=function(t){return new e(t)},e}());t.exports=de},{3:3}]},{},[4])(4)})),at=it((function(e,t){"undefined"!=typeof self&&self,function(e){var t=/^~~local_forage_type~([^~]+)~/,n="__lfsc__:".length,r=n+"arbf".length,i=Object.prototype.toString;function o(e){var t=.75*e.length,n=e.length;"="===e[e.length-1]&&(t--,"="===e[e.length-2]&&t--);for(var r=new ArrayBuffer(t),i=new Uint8Array(r),o=0,s=0;o<n;o+=4){var a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(e[o]),c="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(e[o+1]),u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(e[o+2]),l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(e[o+3]);i[s++]=a<<2|c>>4,i[s++]=(15&c)<<4|u>>2,i[s++]=(3&u)<<6|63&l}return r}function s(e){for(var t=new Uint8Array(e),n="",r=0;r<t.length;r+=3)n+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[t[r]>>2],n+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[(3&t[r])<<4|t[r+1]>>4],n+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[(15&t[r+1])<<2|t[r+2]>>6],n+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[63&t[r+2]];return t.length%3==2?n=n.substring(0,n.length-1)+"=":t.length%3==1&&(n=n.substring(0,n.length-2)+"=="),n}function a(e){var t,n;if(null===e||"object"!=typeof e||"isActiveClone"in e)return e;var r=e instanceof Date?new Date(e):e.constructor();try{for(var i=function(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}(Object.keys(e)),o=i.next();!o.done;o=i.next()){var s=o.value;Object.prototype.hasOwnProperty.call(e,s)&&(e.isActiveClone=null,r[s]=a(e[s]),delete e.isActiveClone)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}return r}function c(e,t){return(e.name||t.name)+"/"+(e.storeName||t.storeName)+"/"}function u(e,t){t&&e.then((function(e){t(null,e)}),(function(e){t(e)}))}function l(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(arguments.length&&"function"==typeof arguments[arguments.length-1])return arguments[arguments.length-1]}function f(e,t){var n=this;if(t=l.apply(this,arguments),!(e="function"!=typeof e&&e||{}).name){var r=this.config();e.name=e.name||r.name,e.storeName=e.storeName||r.storeName}return{promise:e.name?new Promise((function(t){t(e.storeName?c(e,n._defaultConfig):e.name+"/")})):Promise.reject("Invalid arguments"),callback:t}}function p(e){return"string"!=typeof e&&(console.warn(e+" used as a key, but it is not a string."),e=String(e)),e}var h={bufferToString:s,deserialize:function(e){if("__lfsc__:"!==e.substring(0,n))return JSON.parse(e);var i,s=e.substring(r),a=e.substring(n,r);if("blob"===a&&t.test(s)){var c=s.match(t);i=c[1],s=s.substring(c[0].length)}var u=o(s);switch(a){case"arbf":return u;case"blob":return function(e,t){e=e||[],t=t||{};try{return new Blob(e,t)}catch(i){if("TypeError"!==i.name)throw i;for(var n=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),r=0;r<e.length;r+=1)n.append(e[r]);return n.getBlob(t.type)}}([u],{type:i});case"si08":return new Int8Array(u);case"ui08":return new Uint8Array(u);case"uic8":return new Uint8ClampedArray(u);case"si16":return new Int16Array(u);case"ur16":return new Uint16Array(u);case"si32":return new Int32Array(u);case"ui32":return new Uint32Array(u);case"fl32":return new Float32Array(u);case"fl64":return new Float64Array(u);default:throw new Error("Unkown type: "+a)}},serialize:function(e,t){var n="";if(e&&(n=i.call(e)),e&&("[object ArrayBuffer]"===n||e.buffer&&"[object ArrayBuffer]"===i.call(e.buffer))){var r=void 0,o="__lfsc__:";e instanceof ArrayBuffer?(r=e,o+="arbf"):(r=e.buffer,"[object Int8Array]"===n?o+="si08":"[object Uint8Array]"===n?o+="ui08":"[object Uint8ClampedArray]"===n?o+="uic8":"[object Int16Array]"===n?o+="si16":"[object Uint16Array]"===n?o+="ur16":"[object Int32Array]"===n?o+="si32":"[object Uint32Array]"===n?o+="ui32":"[object Float32Array]"===n?o+="fl32":"[object Float64Array]"===n?o+="fl64":t(new Error("Failed to get type for BinaryArray"))),t(o+s(r))}else if("[object Blob]"===n){var a=new FileReader;a.onload=function(){var n="~~local_forage_type~"+e.type+"~"+s(this.result);t("__lfsc__:blob"+n)},a.readAsArrayBuffer(e)}else try{t(JSON.stringify(e))}catch(n){console.error("Couldn't convert value into a JSON string: ",e),t(null,n)}},stringToBuffer:o},d={},m=function(){function e(e){this.kp=e,this.data={}}return e.resolve=function(t){return d[t]||(d[t]=new e(t)),d[t]},e.prototype.clear=function(){this.data={}},e.prototype.drop=function(){this.clear(),delete d[this.kp]},e.prototype.get=function(e){return this.data[e]},e.prototype.key=function(e){return this.keys()[e]},e.prototype.keys=function(){return Object.keys(this.data)},e.prototype.rm=function(e){delete this.data[e]},e.prototype.set=function(e,t){this.data[e]=t},e}();e._support=!0,e._driver="localforage-driver-memory",e._initStorage=function(e){var t=e?a(e):{},n=c(t,this._defaultConfig),r=m.resolve(n);return this._dbInfo=t,this._dbInfo.serializer=h,this._dbInfo.keyPrefix=n,this._dbInfo.mStore=r,Promise.resolve()},e.clear=function(e){var t=this,n=this.ready().then((function(){t._dbInfo.mStore.clear()}));return u(n,e),n},e.dropInstance=function(e,t){var n=f.apply(this,arguments),r=n.promise,i=n.callback;return u(r.then((function(e){m.resolve(e).drop()})),i),r},e.getItem=function(e,t){var n=this;e=p(e);var r=this.ready().then((function(){var t=n._dbInfo.mStore.get(e);return null==t?null:n._dbInfo.serializer.deserialize(t)}));return u(r,t),r},e.iterate=function(e,t){var n=this,r=this.ready().then((function(){for(var t=n._dbInfo.mStore,r=t.keys(),i=0;i<r.length;i++){var o=t.get(r[i]);if(o&&(o=n._dbInfo.serializer.deserialize(o)),void 0!==(o=e(o,r[i],i+1)))return o}}));return u(r,t),r},e.key=function(e,t){var n=this,r=this.ready().then((function(){var t;try{void 0===(t=n._dbInfo.mStore.key(e))&&(t=null)}catch(e){t=null}return t}));return u(r,t),r},e.keys=function(e){var t=this,n=this.ready().then((function(){return t._dbInfo.mStore.keys()}));return u(n,e),n},e.length=function(e){var t=this.keys().then((function(e){return e.length}));return u(t,e),t},e.removeItem=function(e,t){var n=this;e=p(e);var r=this.ready().then((function(){n._dbInfo.mStore.rm(e)}));return u(r,t),r},e.setItem=function(e,t,n){var r=this;e=p(e);var i=this.ready().then((function(){void 0===t&&(t=null);var n=t;return new Promise((function(i,o){r._dbInfo.serializer.serialize(t,(function(t,s){if(s)o(s);else try{r._dbInfo.mStore.set(e,t),i(n)}catch(e){o(e)}}))}))}));return u(i,n),i},Object.defineProperty(e,"__esModule",{value:!0})}(t)})),ct=function(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}(at),ut=Object.assign(Object.create(null),at,{default:ct});const lt={display:"none",position:"fixed",top:"0",right:"0",width:"100%",height:"100%",borderRadius:"0",border:"none",zIndex:"2147483647"},ft=function(e,t){return Object.assign(ie,t),e}(nt,{platform:"web",sdkName:"magic-sdk",version:"6.2.1",defaultEndpoint:"https://auth.magic.link/",ViewController:class extends class{constructor(e,t){this.endpoint=void 0,this.parameters=void 0,this.ready=void 0,this.messageHandlers=new Set,this.endpoint=e,this.parameters=t,this.ready=this.waitForReady(),this.listen()}async post(e,t){var n=this;return ke((async function(r){await n.ready;const i=[],s=Array.isArray(t)?t.map((e=>e.id)):[],a=await async function(e,t){const n=await Te("rt");let r;if("web"===ie.platform)try{r=await async function(){const e=await async function(){if(function(){const e="undefined"!=typeof window&&!!window.crypto,t=e&&!!window.crypto.subtle;return e&&t}())return await Te("STORE_KEY_PUBLIC_JWK")||await async function(){let e=null;const{subtle:t}=window.crypto,n=await t.generateKey($e,!0,["sign"]),r=await t.exportKey("jwk",n.privateKey);e=await t.exportKey("jwk",n.publicKey);const i=await t.importKey("jwk",r,Ue,!1,["sign"]);await Re("STORE_KEY_PRIVATE_KEY",i),await Re("STORE_KEY_PUBLIC_JWK",e)}(),Te("STORE_KEY_PUBLIC_JWK");console.info("webcrypto is not supported")}();if(!e)return void console.info("unable to create public key or webcrypto is unsupported");const{subtle:t}=window.crypto,n=await Te("STORE_KEY_PRIVATE_KEY");if(!n||!t)return void console.info("unable to find private key or webcrypto unsupported");const r={iat:Math.floor((new Date).getTime()/1e3),jti:Be()},i=We(JSON.stringify({typ:"dpop+jwt",alg:"ES256",jwk:e})),o=We(JSON.stringify(r)),s=(a=`${i}.${o}`,(new TextEncoder).encode(a));var a;return`${i}.${o}.${function(e){let t="";return e.forEach((e=>{t+=String.fromCharCode(e)})),ze(t)}(new Uint8Array(await t.sign({name:"ECDSA",hash:{name:"SHA-256"}},n,s)))}`}()}catch(e){console.error("webcrypto error",e)}return r?n?{msgType:e,payload:t,jwt:r,rt:n}:{msgType:e,payload:t,jwt:r}:{msgType:e,payload:t}}(`${e}-${n.parameters}`,t);await n._post(a);const c=n.on(o.MAGIC_HANDLE_RESPONSE,(u=()=>c(),e=>{const{id:n,response:o}=function(e,t){var n;const r=null==(n=t.data.response)?void 0:n.id,i=function(e,t){return t&&Array.isArray(e)?e.find((e=>e.id===t)):e}(e,r);return r&&i?{id:r,response:new ve(i).applyResult(t.data.response.result).applyError(t.data.response.error)}:{}}(t,e);!async function(e){e.data.rt&&await Re("rt",e.data.rt)}(e),n&&o&&Array.isArray(t)&&s.includes(n)?(i.push(o),i.length===t.length&&(u(),r(i))):n&&o&&!Array.isArray(t)&&n===t.id&&(u(),r(o))}));var u}))}on(e,t){const n=t.bind(window),r=t=>{t.data.msgType===`${e}-${this.parameters}`&&n(t)};return this.messageHandlers.add(r),()=>this.messageHandlers.delete(r)}waitForReady(){return new Promise((e=>{this.on(o.MAGIC_OVERLAY_READY,(()=>e()))}))}listen(){this.on(o.MAGIC_HIDE_OVERLAY,(()=>{this.hideOverlay()})),this.on(o.MAGIC_SHOW_OVERLAY,(()=>{this.showOverlay()}))}}{constructor(...e){super(...e),this.iframe=void 0,this.activeElement=null}init(){this.test="hello",this.iframe=new Promise((e=>{const n=()=>{if(function(e){const t=[].slice.call(document.querySelectorAll(".magic-iframe"));return Boolean(t.find((t=>t.src.includes(e))))}(encodeURIComponent(this.parameters)))new ce(t.DuplicateIframe,"Duplicate iframes found.").log();else{const t=document.createElement("iframe");t.classList.add("magic-iframe"),t.dataset.magicIframeLabel=Ye(this.endpoint).host,t.title="Secure Modal",t.src=Ye(`/send?params=${encodeURIComponent(this.parameters)}`,this.endpoint).href,function(e){for(const[t,n]of Object.entries(lt))e.style[t]=n}(t),document.body.appendChild(t),e(t)}};["loaded","interactive","complete"].includes(document.readyState)?n():window.addEventListener("load",n,!1)})),window.addEventListener("message",(e=>{if(e.origin===this.endpoint&&e.data&&e.data.msgType&&this.messageHandlers.size){var t;e.data.response=null!=(t=e.data.response)?t:{};for(const t of this.messageHandlers.values())t(e)}}))}async showOverlay(){const e=await this.iframe;e.style.display="block",this.activeElement=document.activeElement,e.focus()}async hideOverlay(){var e;(await this.iframe).style.display="none",null!==(e=this.activeElement)&&void 0!==e&&e.focus&&this.activeElement.focus(),this.activeElement=null}async _post(t){const n=await this.iframe;if(!n||!n.contentWindow)throw new se(e.ModalNotReady,"Modal is not ready.");n.contentWindow.postMessage(t,this.endpoint)}},configureStorage:async()=>{const e=st.createInstance({name:"MagicAuthLocalStorageDB",storeName:"MagicAuthLocalStorage"});return await e.defineDriver(ut),await e.setDriver([st.INDEXEDDB,st.LOCALSTORAGE,at._driver]),e}});var pt,ht=Object.create,dt=Object.defineProperty,mt=Object.getOwnPropertyDescriptor,gt=Object.getOwnPropertyNames,vt=Object.getPrototypeOf,yt=Object.prototype.hasOwnProperty,bt=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),wt=(e,t)=>((e,t,n,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let n of gt(t))!yt.call(e,n)&&"default"!==n&&dt(e,n,{get:()=>t[n],enumerable:!(r=mt(t,n))||r.enumerable});return e})((e=>dt(e,"__esModule",{value:!0}))(dt(null!=e?ht(vt(e)):{},"default",!t&&e&&e.__esModule?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e),_t=(e,t,n)=>new Promise(((r,i)=>{var o=e=>{try{a(n.next(e))}catch(e){i(e)}},s=e=>{try{a(n.throw(e))}catch(e){i(e)}},a=e=>e.done?r(e.value):Promise.resolve(e.value).then(o,s);a((n=n.apply(e,t)).next())})),Et=bt(((e,t)=>{!function(n,r){"object"==typeof e?t.exports=e=r():"function"==typeof define&&define.amd?define([],r):n.CryptoJS=r()}(e,(function(){var e=e||function(e,t){var n=Object.create||function(){function e(){}return function(t){var n;return e.prototype=t,n=new e,e.prototype=null,n}}(),r={},i=r.lib={},o=i.Base={extend:function(e){var t=n(this);return e&&t.mixIn(e),(!t.hasOwnProperty("init")||this.init===t.init)&&(t.init=function(){t.$super.init.apply(this,arguments)}),t.init.prototype=t,t.$super=this,t},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},s=i.WordArray=o.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:4*e.length},toString:function(e){return(e||c).stringify(this)},concat:function(e){var t=this.words,n=e.words,r=this.sigBytes,i=e.sigBytes;if(this.clamp(),r%4)for(var o=0;o<i;o++){var s=n[o>>>2]>>>24-o%4*8&255;t[r+o>>>2]|=s<<24-(r+o)%4*8}else for(o=0;o<i;o+=4)t[r+o>>>2]=n[o>>>2];return this.sigBytes+=i,this},clamp:function(){var t=this.words,n=this.sigBytes;t[n>>>2]&=4294967295<<32-n%4*8,t.length=e.ceil(n/4)},clone:function(){var e=o.clone.call(this);return e.words=this.words.slice(0),e},random:function(t){for(var n,r=[],i=function(t){var n=987654321,r=4294967295;return function(){var i=((n=36969*(65535&n)+(n>>16)&r)<<16)+(t=18e3*(65535&t)+(t>>16)&r)&r;return i/=4294967296,(i+=.5)*(e.random()>.5?1:-1)}},o=0;o<t;o+=4){var a=i(4294967296*(n||e.random()));n=987654071*a(),r.push(4294967296*a()|0)}return new s.init(r,t)}}),a=r.enc={},c=a.Hex={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],i=0;i<n;i++){var o=t[i>>>2]>>>24-i%4*8&255;r.push((o>>>4).toString(16)),r.push((15&o).toString(16))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r+=2)n[r>>>3]|=parseInt(e.substr(r,2),16)<<24-r%8*4;return new s.init(n,t/2)}},u=a.Latin1={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],i=0;i<n;i++){var o=t[i>>>2]>>>24-i%4*8&255;r.push(String.fromCharCode(o))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r++)n[r>>>2]|=(255&e.charCodeAt(r))<<24-r%4*8;return new s.init(n,t)}},l=a.Utf8={stringify:function(e){try{return decodeURIComponent(escape(u.stringify(e)))}catch{throw new Error("Malformed UTF-8 data")}},parse:function(e){return u.parse(unescape(encodeURIComponent(e)))}},f=i.BufferedBlockAlgorithm=o.extend({reset:function(){this._data=new s.init,this._nDataBytes=0},_append:function(e){"string"==typeof e&&(e=l.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(t){var n=this._data,r=n.words,i=n.sigBytes,o=this.blockSize,a=i/(4*o),c=(a=t?e.ceil(a):e.max((0|a)-this._minBufferSize,0))*o,u=e.min(4*c,i);if(c){for(var l=0;l<c;l+=o)this._doProcessBlock(r,l);var f=r.splice(0,c);n.sigBytes-=u}return new s.init(f,u)},clone:function(){var e=o.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),p=(i.Hasher=f.extend({cfg:o.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){f.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,n){return new e.init(n).finalize(t)}},_createHmacHelper:function(e){return function(t,n){return new p.HMAC.init(e,n).finalize(t)}}}),r.algo={});return r}(Math);return e}))})),xt=bt(((e,t)=>{!function(n,r){"object"==typeof e?t.exports=e=r(Et()):"function"==typeof define&&define.amd?define(["./core"],r):r(n.CryptoJS)}(e,(function(e){return function(t){var n=e,r=n.lib,i=r.WordArray,o=r.Hasher,s=n.algo,a=[],c=[];!function(){function e(e){for(var n=t.sqrt(e),r=2;r<=n;r++)if(!(e%r))return!1;return!0}function n(e){return 4294967296*(e-(0|e))|0}for(var r=2,i=0;i<64;)e(r)&&(i<8&&(a[i]=n(t.pow(r,.5))),c[i]=n(t.pow(r,1/3)),i++),r++}();var u=[],l=s.SHA256=o.extend({_doReset:function(){this._hash=new i.init(a.slice(0))},_doProcessBlock:function(e,t){for(var n=this._hash.words,r=n[0],i=n[1],o=n[2],s=n[3],a=n[4],l=n[5],f=n[6],p=n[7],h=0;h<64;h++){if(h<16)u[h]=0|e[t+h];else{var d=u[h-15],m=(d<<25|d>>>7)^(d<<14|d>>>18)^d>>>3,g=u[h-2],v=(g<<15|g>>>17)^(g<<13|g>>>19)^g>>>10;u[h]=m+u[h-7]+v+u[h-16]}var y=r&i^r&o^i&o,b=(r<<30|r>>>2)^(r<<19|r>>>13)^(r<<10|r>>>22),w=p+((a<<26|a>>>6)^(a<<21|a>>>11)^(a<<7|a>>>25))+(a&l^~a&f)+c[h]+u[h];p=f,f=l,l=a,a=s+w|0,s=o,o=i,i=r,r=w+(b+y)|0}n[0]=n[0]+r|0,n[1]=n[1]+i|0,n[2]=n[2]+o|0,n[3]=n[3]+s|0,n[4]=n[4]+a|0,n[5]=n[5]+l|0,n[6]=n[6]+f|0,n[7]=n[7]+p|0},_doFinalize:function(){var e=this._data,n=e.words,r=8*this._nDataBytes,i=8*e.sigBytes;return n[i>>>5]|=128<<24-i%32,n[14+(i+64>>>9<<4)]=t.floor(r/4294967296),n[15+(i+64>>>9<<4)]=r,e.sigBytes=4*n.length,this._process(),this._hash},clone:function(){var e=o.clone.call(this);return e._hash=this._hash.clone(),e}});n.SHA256=o._createHelper(l),n.HmacSHA256=o._createHmacHelper(l)}(Math),e.SHA256}))})),Ct=bt(((e,t)=>{!function(n,r){"object"==typeof e?t.exports=e=r(Et()):"function"==typeof define&&define.amd?define(["./core"],r):r(n.CryptoJS)}(e,(function(e){return function(){var t=e,n=t.lib.WordArray;t.enc.Base64={stringify:function(e){var t=e.words,n=e.sigBytes,r=this._map;e.clamp();for(var i=[],o=0;o<n;o+=3)for(var s=(t[o>>>2]>>>24-o%4*8&255)<<16|(t[o+1>>>2]>>>24-(o+1)%4*8&255)<<8|t[o+2>>>2]>>>24-(o+2)%4*8&255,a=0;a<4&&o+.75*a<n;a++)i.push(r.charAt(s>>>6*(3-a)&63));var c=r.charAt(64);if(c)for(;i.length%4;)i.push(c);return i.join("")},parse:function(e){var t=e.length,r=this._map,i=this._reverseMap;if(!i){i=this._reverseMap=[];for(var o=0;o<r.length;o++)i[r.charCodeAt(o)]=o}var s=r.charAt(64);if(s){var a=e.indexOf(s);-1!==a&&(t=a)}return function(e,t,r){for(var i=[],o=0,s=0;s<t;s++)if(s%4){var a=r[e.charCodeAt(s-1)]<<s%4*2,c=r[e.charCodeAt(s)]>>>6-s%4*2;i[o>>>2]|=(a|c)<<24-o%4*8,o++}return n.create(i,o)}(e,t,i)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}}(),e.enc.Base64}))})),kt=((pt=kt||{}).ParseRedirectResult="magic_oauth_parse_redirect_result",pt),St=(e=>(e.InvalidRequest="invalid_request",e.InvalidClient="invalid_client",e.InvalidScope="invalid_scope",e.InvalidGrant="invalid_grant",e.UnauthorizedClient="unauthorized_client",e.UnsupportedResponseType="unsupported_response_type",e.UnsupportedGrantType="unsupported_grant_type",e.UnsupportedTokenType="unsupported_token_type",e.AccessDenied="access_denied",e.ServerError="server_error",e.TemporarilyUnavailable="temporarily_unavailable",e))(St||{}),At=wt(xt()),It=wt(Ct()),Ot="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~",Tt="undefined"!=typeof window&&!!window.crypto,Rt=Tt&&!!window.crypto.subtle;function Mt(e){let t=e=>e.replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"");if(e instanceof ArrayBuffer){let n=new Uint8Array(e),r=Array.from(n).map((e=>String.fromCharCode(e))).join("");return t(btoa(r))}return t(It.default.stringify(e))}function Lt(e){let t=new Uint8Array(e);if(Tt)window.crypto.getRandomValues(t);else for(let n=0;n<e;n+=1)t[n]=Math.floor(Math.random()*Math.floor(255));return function(e){return Array.from(e).map((e=>Ot[e%Ot.length])).join("")}(t)}var Nt=class extends Qe.Internal{constructor(){super(...arguments),this.name="oauth",this.config={},this.compat={"magic-sdk":">=2.4.6","@magic-sdk/react-native":!1}}loginWithRedirect(e){return this.utils.createPromiEvent((t=>_t(this,null,(function*(){let{provider:n,query:r}=yield Pt.call(this,e);window.location.href=new URL(`/v1/oauth2/${n}/start?${r}`,this.sdk.endpoint).href,t()}))))}getRedirectResult(){let e=window.location.search,t=window.location.origin+window.location.pathname;return window.history.replaceState(null,"",t),Ft.call(this,e)}},Dt="oauth_redirect_metadata";function Pt(e){return _t(this,null,(function*(){yield this.utils.storage.removeItem(Dt);let{provider:t,redirectURI:n,scope:r,loginHint:i}=e,{verifier:o,challenge:s,state:a}=yield function(){return _t(this,null,(function*(){let e=Lt(128),t=Lt(128),n=yield function(e){return _t(this,null,(function*(){if(Rt){let t=(new TextEncoder).encode(e);return crypto.subtle.digest("SHA-256",t).then(Mt)}return Mt((0,At.default)(e))}))}(t);return{verifier:t,challenge:n,state:e}}))}(),c=JSON.stringify({verifier:o,state:a});return yield this.utils.storage.setItem(Dt,c),{query:[`magic_api_key=${encodeURIComponent(this.sdk.apiKey)}`,`magic_challenge=${encodeURIComponent(s)}`,`state=${encodeURIComponent(a)}`,`platform=${encodeURIComponent("web")}`,r&&`scope=${encodeURIComponent(r.join(" "))}`,n&&`redirect_uri=${encodeURIComponent(n)}`,i&&`login_hint=${encodeURIComponent(i)}`].reduce(((e,t)=>t?`${e}&${t}`:e)),provider:t,redirectURI:n}}))}function Ft(e){return this.utils.createPromiEvent(((t,n)=>_t(this,null,(function*(){var r;let i=yield this.utils.storage.getItem(Dt),{verifier:o,state:s}=JSON.parse(i);this.utils.storage.removeItem(Dt);let a=this.utils.createJsonRpcRequestPayload("magic_oauth_parse_redirect_result",[e,o,s]),c=yield this.request(a),u=c,l=c;l.error&&n(this.createError(l.error,null!=(r=l.error_description)?r:"An error occurred.",{errorURI:l.error_uri,provider:l.provider})),t(u)}))))}const jt=document.querySelector("body > #loader");class Bt extends HTMLFormElement{_inputs;_errorMessage;submitButton;constructor(e){super(),e={async:!1,action:"",submitText:"Submit",success:()=>{},customFetch:!1,fullscreenLoading:!1,extraData:{},html:"",...e},this.options=e,this.classList.add("di-form"),this.innerHTML=`\n<div class="inputs">${e.html}</div>\n<div class="bottom">\n  <button type="submit"></button>\n  <div class="error-message hidden"></div>\n</div>\n`,this._inputs=this.querySelector(".inputs"),this.submitButton=this.querySelector("button"),this.submitButton.textContent=e.submitText,this._errorMessage=this.querySelector(".error-message"),e.action&&this.setAttribute("action",e.action),e.async&&this.addEventListener("submit",(async t=>{t.preventDefault(),this._loading();const n=e.action instanceof Function?await e.action():await async function(e,t=null){let n,r;try{const i={method:"post",headers:{"Content-Type":"application/json"}};return t&&(i.body=JSON.stringify(t)),n=await fetch(e,i),r=await n.text(),r?JSON.parse(r):{}}catch(t){return!n||n.status>=400?r?{error:r}:{error:t||`An error occurred during fizzetch of ${e}`}:{}}}(e.action,this.data());this._loadingFinished(),n.error?this.error(n.error):(e.success(n),this.dispatchEvent(new Event("success")))}))}data(){const e=new FormData(this),t={};Array.from(e.entries()).forEach((([e,n])=>t[e]=n));let n=this.options.extraData;return n="function"==typeof n?n():n,n=n||{},{...t,...n}}addInput(e,t=null){const n=document.createElement("input");for(let t in e)n.setAttribute(t,e[t]);this._addInput(n,t)}_addInput(e,t=null){const n=document.createElement("label");if(t){const e=document.createElement("span");e.textContent=t,n.appendChild(e)}n.appendChild(e),this._inputs.appendChild(n)}addSelect(e){e={label:null,name:"",optionsList:[],...e};const t=document.createElement("label");if(t.classList.add("flex-between"),e.label){const n=document.createElement("span");n.textContent=e.label,t.appendChild(n)}const n=document.createElement("select");return n.setAttribute("name",e.name),e.optionsList.forEach((({value:e,name:t})=>{const r=document.createElement("option");r.value=e,r.textContent=t,n.appendChild(r)})),t.appendChild(n),this._inputs.appendChild(t),n}error(e){e?.message&&(e=e.message),this._errorMessage.textContent=e,this._errorMessage.classList.remove("hidden")}_loading(){if(this.options.fullscreenLoading)return function(e=""){jt.querySelector(".message").textContent=e,jt.classList.add("show")}(this.options.fullscreenLoading.message??"");this._errorMessage.classList.add("hidden"),this.submitButton.disabled=!0,this.submitButton.innerHTML='<span class="spin-effect">DI</span>'}_loadingFinished(){this.options.fullscreenLoading?jt.classList.remove("show"):(this.submitButton.disabled=!1,this.submitButton.textContent=this.options.submitText)}}customElements.define("di-form",Bt,{extends:"form"});const $t=[{name:"Caves",color:"#ebdad4",texture:"caves.png"},{name:"Woods",color:"#def5ce",texture:"crypt.png"},{name:"Crypt",color:"#eeecec",texture:"crypt.png"},{name:"Swamp",color:"#dce5d8",texture:"swamp.png"},{name:"Water World",color:"#d2e8fd",texture:"crypt.png"},{name:"SUPER Zone",color:"#f1c4f8",texture:"maze-white.png"}];var Ut,Wt=new Uint8Array(16);function zt(){if(!Ut&&!(Ut="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return Ut(Wt)}const Ht=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,qt=function(e){return"string"==typeof e&&Ht.test(e)};for(var Vt=[],Gt=0;Gt<256;++Gt)Vt.push((Gt+256).toString(16).substr(1));const Kt=function(e,t,n){var r=(e=e||{}).random||(e.rng||zt)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(var i=0;i<16;++i)t[n+i]=r[i];return t}return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(Vt[e[t+0]]+Vt[e[t+1]]+Vt[e[t+2]]+Vt[e[t+3]]+"-"+Vt[e[t+4]]+Vt[e[t+5]]+"-"+Vt[e[t+6]]+Vt[e[t+7]]+"-"+Vt[e[t+8]]+Vt[e[t+9]]+"-"+Vt[e[t+10]]+Vt[e[t+11]]+Vt[e[t+12]]+Vt[e[t+13]]+Vt[e[t+14]]+Vt[e[t+15]]).toLowerCase();if(!qt(n))throw TypeError("Stringified UUID is invalid");return n}(r)};var Yt=n(3974);function Xt(e){if(!e)return"";let t="",n=!1,r=!1;for(let i=0;i<e.length;i++){let o=e[i],s=0===i||r;r=!1,o===o.toUpperCase()?(o.toUpperCase()===o.toLowerCase()?r=!0:n&&(t+=" ",s=!0),n=!1):n=!0,t+=s?o.toUpperCase():o}return t}function Jt(e,t){const n=Math.pow(10,t);return e*=n,(e=Math.round(e))/n}function Zt(e,t){const n=t*Math.round(e/t);return t<1?Jt(n,Math.ceil(-Math.log10(t))):n}function Qt(e,t={}){return t.allowHTML?en({content:e,...t}):en({text:e,...t})}function en(e={}){e={elementType:"div",text:null,content:null,class:null,...e};const t=document.createElement(e.elementType);if(e.content?e.content instanceof HTMLElement?t.appendChild(e.content):t.innerHTML=e.content:e.text&&(t.textContent=e.text),e.class){const n=Array.isArray(e.class)?e.class:e.class.split(" ");t.classList.add(...n)}return t}function tn(e,t){const n=[];for(let r=0;r<t;r++)n.push(e(r));return n}function nn(){return Kt()}function rn(e,t,n){return Math.max(e,Math.min(n,t))}function on(e,t){if((e=Math.ceil(e))<Math.pow(10,t))return e;e+="";const n=Math.pow(10,e.length-t);return Math.ceil(e/n)*n}function sn(e){const t=Yt.isArray(e)?[]:{};for(let n in e)Yt.isNumber(e[n])?t[n]=Jt(e[n],2):Yt.isObject(e[n])?t[n]=sn(e[n]):t[n]=e[n];return t}function an(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function cn(e){return e instanceof an(e).Element||e instanceof Element}function un(e){return e instanceof an(e).HTMLElement||e instanceof HTMLElement}function ln(e){return"undefined"!=typeof ShadowRoot&&(e instanceof an(e).ShadowRoot||e instanceof ShadowRoot)}var fn=Math.max,pn=Math.min,hn=Math.round;function dn(e,t){void 0===t&&(t=!1);var n=e.getBoundingClientRect(),r=1,i=1;if(un(e)&&t){var o=e.offsetHeight,s=e.offsetWidth;s>0&&(r=hn(n.width)/s||1),o>0&&(i=hn(n.height)/o||1)}return{width:n.width/r,height:n.height/i,top:n.top/i,right:n.right/r,bottom:n.bottom/i,left:n.left/r,x:n.left/r,y:n.top/i}}function mn(e){var t=an(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function gn(e){return e?(e.nodeName||"").toLowerCase():null}function vn(e){return((cn(e)?e.ownerDocument:e.document)||window.document).documentElement}function yn(e){return dn(vn(e)).left+mn(e).scrollLeft}function bn(e){return an(e).getComputedStyle(e)}function wn(e){var t=bn(e),n=t.overflow,r=t.overflowX,i=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+i+r)}function _n(e,t,n){void 0===n&&(n=!1);var r,i,o=un(t),s=un(t)&&function(e){var t=e.getBoundingClientRect(),n=hn(t.width)/e.offsetWidth||1,r=hn(t.height)/e.offsetHeight||1;return 1!==n||1!==r}(t),a=vn(t),c=dn(e,s),u={scrollLeft:0,scrollTop:0},l={x:0,y:0};return(o||!o&&!n)&&(("body"!==gn(t)||wn(a))&&(u=(r=t)!==an(r)&&un(r)?{scrollLeft:(i=r).scrollLeft,scrollTop:i.scrollTop}:mn(r)),un(t)?((l=dn(t,!0)).x+=t.clientLeft,l.y+=t.clientTop):a&&(l.x=yn(a))),{x:c.left+u.scrollLeft-l.x,y:c.top+u.scrollTop-l.y,width:c.width,height:c.height}}function En(e){var t=dn(e),n=e.offsetWidth,r=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-r)<=1&&(r=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:r}}function xn(e){return"html"===gn(e)?e:e.assignedSlot||e.parentNode||(ln(e)?e.host:null)||vn(e)}function Cn(e){return["html","body","#document"].indexOf(gn(e))>=0?e.ownerDocument.body:un(e)&&wn(e)?e:Cn(xn(e))}function kn(e,t){var n;void 0===t&&(t=[]);var r=Cn(e),i=r===(null==(n=e.ownerDocument)?void 0:n.body),o=an(r),s=i?[o].concat(o.visualViewport||[],wn(r)?r:[]):r,a=t.concat(s);return i?a:a.concat(kn(xn(s)))}function Sn(e){return["table","td","th"].indexOf(gn(e))>=0}function An(e){return un(e)&&"fixed"!==bn(e).position?e.offsetParent:null}function In(e){for(var t=an(e),n=An(e);n&&Sn(n)&&"static"===bn(n).position;)n=An(n);return n&&("html"===gn(n)||"body"===gn(n)&&"static"===bn(n).position)?t:n||function(e){var t=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&un(e)&&"fixed"===bn(e).position)return null;for(var n=xn(e);un(n)&&["html","body"].indexOf(gn(n))<0;){var r=bn(n);if("none"!==r.transform||"none"!==r.perspective||"paint"===r.contain||-1!==["transform","perspective"].indexOf(r.willChange)||t&&"filter"===r.willChange||t&&r.filter&&"none"!==r.filter)return n;n=n.parentNode}return null}(e)||t}var On="top",Tn="bottom",Rn="right",Mn="left",Ln="auto",Nn=[On,Tn,Rn,Mn],Dn="start",Pn="end",Fn="viewport",jn="popper",Bn=Nn.reduce((function(e,t){return e.concat([t+"-"+Dn,t+"-"+Pn])}),[]),$n=[].concat(Nn,[Ln]).reduce((function(e,t){return e.concat([t,t+"-"+Dn,t+"-"+Pn])}),[]),Un=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function Wn(e){var t=new Map,n=new Set,r=[];function i(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var r=t.get(e);r&&i(r)}})),r.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||i(e)})),r}var zn={placement:"bottom",modifiers:[],strategy:"absolute"};function Hn(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function qn(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,r=void 0===n?[]:n,i=t.defaultOptions,o=void 0===i?zn:i;return function(e,t,n){void 0===n&&(n=o);var i,s,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},zn,o),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},c=[],u=!1,l={state:a,setOptions:function(n){var i="function"==typeof n?n(a.options):n;f(),a.options=Object.assign({},o,a.options,i),a.scrollParents={reference:cn(e)?kn(e):e.contextElement?kn(e.contextElement):[],popper:kn(t)};var s,u,p=function(e){var t=Wn(e);return Un.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((s=[].concat(r,a.options.modifiers),u=s.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{}),Object.keys(u).map((function(e){return u[e]}))));return a.orderedModifiers=p.filter((function(e){return e.enabled})),a.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,r=void 0===n?{}:n,i=e.effect;if("function"==typeof i){var o=i({state:a,name:t,instance:l,options:r});c.push(o||function(){})}})),l.update()},forceUpdate:function(){if(!u){var e=a.elements,t=e.reference,n=e.popper;if(Hn(t,n)){a.rects={reference:_n(t,In(n),"fixed"===a.options.strategy),popper:En(n)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(e){return a.modifiersData[e.name]=Object.assign({},e.data)}));for(var r=0;r<a.orderedModifiers.length;r++)if(!0!==a.reset){var i=a.orderedModifiers[r],o=i.fn,s=i.options,c=void 0===s?{}:s,f=i.name;"function"==typeof o&&(a=o({state:a,options:c,name:f,instance:l})||a)}else a.reset=!1,r=-1}}},update:(i=function(){return new Promise((function(e){l.forceUpdate(),e(a)}))},function(){return s||(s=new Promise((function(e){Promise.resolve().then((function(){s=void 0,e(i())}))}))),s}),destroy:function(){f(),u=!0}};if(!Hn(e,t))return l;function f(){c.forEach((function(e){return e()})),c=[]}return l.setOptions(n).then((function(e){!u&&n.onFirstUpdate&&n.onFirstUpdate(e)})),l}}var Vn={passive:!0};function Gn(e){return e.split("-")[0]}function Kn(e){return e.split("-")[1]}function Yn(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function Xn(e){var t,n=e.reference,r=e.element,i=e.placement,o=i?Gn(i):null,s=i?Kn(i):null,a=n.x+n.width/2-r.width/2,c=n.y+n.height/2-r.height/2;switch(o){case On:t={x:a,y:n.y-r.height};break;case Tn:t={x:a,y:n.y+n.height};break;case Rn:t={x:n.x+n.width,y:c};break;case Mn:t={x:n.x-r.width,y:c};break;default:t={x:n.x,y:n.y}}var u=o?Yn(o):null;if(null!=u){var l="y"===u?"height":"width";switch(s){case Dn:t[u]=t[u]-(n[l]/2-r[l]/2);break;case Pn:t[u]=t[u]+(n[l]/2-r[l]/2)}}return t}var Jn={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Zn(e){var t,n=e.popper,r=e.popperRect,i=e.placement,o=e.variation,s=e.offsets,a=e.position,c=e.gpuAcceleration,u=e.adaptive,l=e.roundOffsets,f=e.isFixed,p=s.x,h=void 0===p?0:p,d=s.y,m=void 0===d?0:d,g="function"==typeof l?l({x:h,y:m}):{x:h,y:m};h=g.x,m=g.y;var v=s.hasOwnProperty("x"),y=s.hasOwnProperty("y"),b=Mn,w=On,_=window;if(u){var E=In(n),x="clientHeight",C="clientWidth";E===an(n)&&"static"!==bn(E=vn(n)).position&&"absolute"===a&&(x="scrollHeight",C="scrollWidth"),(i===On||(i===Mn||i===Rn)&&o===Pn)&&(w=Tn,m-=(f&&_.visualViewport?_.visualViewport.height:E[x])-r.height,m*=c?1:-1),i!==Mn&&(i!==On&&i!==Tn||o!==Pn)||(b=Rn,h-=(f&&_.visualViewport?_.visualViewport.width:E[C])-r.width,h*=c?1:-1)}var k,S=Object.assign({position:a},u&&Jn),A=!0===l?function(e){var t=e.x,n=e.y,r=window.devicePixelRatio||1;return{x:hn(t*r)/r||0,y:hn(n*r)/r||0}}({x:h,y:m}):{x:h,y:m};return h=A.x,m=A.y,c?Object.assign({},S,((k={})[w]=y?"0":"",k[b]=v?"0":"",k.transform=(_.devicePixelRatio||1)<=1?"translate("+h+"px, "+m+"px)":"translate3d("+h+"px, "+m+"px, 0)",k)):Object.assign({},S,((t={})[w]=y?m+"px":"",t[b]=v?h+"px":"",t.transform="",t))}const Qn={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},r=t.attributes[e]||{},i=t.elements[e];un(i)&&gn(i)&&(Object.assign(i.style,n),Object.keys(r).forEach((function(e){var t=r[e];!1===t?i.removeAttribute(e):i.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var r=t.elements[e],i=t.attributes[e]||{},o=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});un(r)&&gn(r)&&(Object.assign(r.style,o),Object.keys(i).forEach((function(e){r.removeAttribute(e)})))}))}},requires:["computeStyles"]},er={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,r=e.name,i=n.offset,o=void 0===i?[0,0]:i,s=$n.reduce((function(e,n){return e[n]=function(e,t,n){var r=Gn(e),i=[Mn,On].indexOf(r)>=0?-1:1,o="function"==typeof n?n(Object.assign({},t,{placement:e})):n,s=o[0],a=o[1];return s=s||0,a=(a||0)*i,[Mn,Rn].indexOf(r)>=0?{x:a,y:s}:{x:s,y:a}}(n,t.rects,o),e}),{}),a=s[t.placement],c=a.x,u=a.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=c,t.modifiersData.popperOffsets.y+=u),t.modifiersData[r]=s}};var tr={left:"right",right:"left",bottom:"top",top:"bottom"};function nr(e){return e.replace(/left|right|bottom|top/g,(function(e){return tr[e]}))}var rr={start:"end",end:"start"};function ir(e){return e.replace(/start|end/g,(function(e){return rr[e]}))}function or(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&ln(n)){var r=t;do{if(r&&e.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function sr(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function ar(e,t){return t===Fn?sr(function(e){var t=an(e),n=vn(e),r=t.visualViewport,i=n.clientWidth,o=n.clientHeight,s=0,a=0;return r&&(i=r.width,o=r.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(s=r.offsetLeft,a=r.offsetTop)),{width:i,height:o,x:s+yn(e),y:a}}(e)):cn(t)?function(e){var t=dn(e);return t.top=t.top+e.clientTop,t.left=t.left+e.clientLeft,t.bottom=t.top+e.clientHeight,t.right=t.left+e.clientWidth,t.width=e.clientWidth,t.height=e.clientHeight,t.x=t.left,t.y=t.top,t}(t):sr(function(e){var t,n=vn(e),r=mn(e),i=null==(t=e.ownerDocument)?void 0:t.body,o=fn(n.scrollWidth,n.clientWidth,i?i.scrollWidth:0,i?i.clientWidth:0),s=fn(n.scrollHeight,n.clientHeight,i?i.scrollHeight:0,i?i.clientHeight:0),a=-r.scrollLeft+yn(e),c=-r.scrollTop;return"rtl"===bn(i||n).direction&&(a+=fn(n.clientWidth,i?i.clientWidth:0)-o),{width:o,height:s,x:a,y:c}}(vn(e)))}function cr(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function ur(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}function lr(e,t){void 0===t&&(t={});var n=t,r=n.placement,i=void 0===r?e.placement:r,o=n.boundary,s=void 0===o?"clippingParents":o,a=n.rootBoundary,c=void 0===a?Fn:a,u=n.elementContext,l=void 0===u?jn:u,f=n.altBoundary,p=void 0!==f&&f,h=n.padding,d=void 0===h?0:h,m=cr("number"!=typeof d?d:ur(d,Nn)),g=l===jn?"reference":jn,v=e.rects.popper,y=e.elements[p?g:l],b=function(e,t,n){var r="clippingParents"===t?function(e){var t=kn(xn(e)),n=["absolute","fixed"].indexOf(bn(e).position)>=0&&un(e)?In(e):e;return cn(n)?t.filter((function(e){return cn(e)&&or(e,n)&&"body"!==gn(e)})):[]}(e):[].concat(t),i=[].concat(r,[n]),o=i[0],s=i.reduce((function(t,n){var r=ar(e,n);return t.top=fn(r.top,t.top),t.right=pn(r.right,t.right),t.bottom=pn(r.bottom,t.bottom),t.left=fn(r.left,t.left),t}),ar(e,o));return s.width=s.right-s.left,s.height=s.bottom-s.top,s.x=s.left,s.y=s.top,s}(cn(y)?y:y.contextElement||vn(e.elements.popper),s,c),w=dn(e.elements.reference),_=Xn({reference:w,element:v,strategy:"absolute",placement:i}),E=sr(Object.assign({},v,_)),x=l===jn?E:w,C={top:b.top-x.top+m.top,bottom:x.bottom-b.bottom+m.bottom,left:b.left-x.left+m.left,right:x.right-b.right+m.right},k=e.modifiersData.offset;if(l===jn&&k){var S=k[i];Object.keys(C).forEach((function(e){var t=[Rn,Tn].indexOf(e)>=0?1:-1,n=[On,Tn].indexOf(e)>=0?"y":"x";C[e]+=S[n]*t}))}return C}const fr={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,r=e.name;if(!t.modifiersData[r]._skip){for(var i=n.mainAxis,o=void 0===i||i,s=n.altAxis,a=void 0===s||s,c=n.fallbackPlacements,u=n.padding,l=n.boundary,f=n.rootBoundary,p=n.altBoundary,h=n.flipVariations,d=void 0===h||h,m=n.allowedAutoPlacements,g=t.options.placement,v=Gn(g),y=c||(v!==g&&d?function(e){if(Gn(e)===Ln)return[];var t=nr(e);return[ir(e),t,ir(t)]}(g):[nr(g)]),b=[g].concat(y).reduce((function(e,n){return e.concat(Gn(n)===Ln?function(e,t){void 0===t&&(t={});var n=t,r=n.placement,i=n.boundary,o=n.rootBoundary,s=n.padding,a=n.flipVariations,c=n.allowedAutoPlacements,u=void 0===c?$n:c,l=Kn(r),f=l?a?Bn:Bn.filter((function(e){return Kn(e)===l})):Nn,p=f.filter((function(e){return u.indexOf(e)>=0}));0===p.length&&(p=f);var h=p.reduce((function(t,n){return t[n]=lr(e,{placement:n,boundary:i,rootBoundary:o,padding:s})[Gn(n)],t}),{});return Object.keys(h).sort((function(e,t){return h[e]-h[t]}))}(t,{placement:n,boundary:l,rootBoundary:f,padding:u,flipVariations:d,allowedAutoPlacements:m}):n)}),[]),w=t.rects.reference,_=t.rects.popper,E=new Map,x=!0,C=b[0],k=0;k<b.length;k++){var S=b[k],A=Gn(S),I=Kn(S)===Dn,O=[On,Tn].indexOf(A)>=0,T=O?"width":"height",R=lr(t,{placement:S,boundary:l,rootBoundary:f,altBoundary:p,padding:u}),M=O?I?Rn:Mn:I?Tn:On;w[T]>_[T]&&(M=nr(M));var L=nr(M),N=[];if(o&&N.push(R[A]<=0),a&&N.push(R[M]<=0,R[L]<=0),N.every((function(e){return e}))){C=S,x=!1;break}E.set(S,N)}if(x)for(var D=function(e){var t=b.find((function(t){var n=E.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return C=t,"break"},P=d?3:1;P>0&&"break"!==D(P);P--);t.placement!==C&&(t.modifiersData[r]._skip=!0,t.placement=C,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function pr(e,t,n){return fn(e,pn(t,n))}const hr={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,r=e.name,i=n.mainAxis,o=void 0===i||i,s=n.altAxis,a=void 0!==s&&s,c=n.boundary,u=n.rootBoundary,l=n.altBoundary,f=n.padding,p=n.tether,h=void 0===p||p,d=n.tetherOffset,m=void 0===d?0:d,g=lr(t,{boundary:c,rootBoundary:u,padding:f,altBoundary:l}),v=Gn(t.placement),y=Kn(t.placement),b=!y,w=Yn(v),_="x"===w?"y":"x",E=t.modifiersData.popperOffsets,x=t.rects.reference,C=t.rects.popper,k="function"==typeof m?m(Object.assign({},t.rects,{placement:t.placement})):m,S="number"==typeof k?{mainAxis:k,altAxis:k}:Object.assign({mainAxis:0,altAxis:0},k),A=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,I={x:0,y:0};if(E){if(o){var O,T="y"===w?On:Mn,R="y"===w?Tn:Rn,M="y"===w?"height":"width",L=E[w],N=L+g[T],D=L-g[R],P=h?-C[M]/2:0,F=y===Dn?x[M]:C[M],j=y===Dn?-C[M]:-x[M],B=t.elements.arrow,$=h&&B?En(B):{width:0,height:0},U=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},W=U[T],z=U[R],H=pr(0,x[M],$[M]),q=b?x[M]/2-P-H-W-S.mainAxis:F-H-W-S.mainAxis,V=b?-x[M]/2+P+H+z+S.mainAxis:j+H+z+S.mainAxis,G=t.elements.arrow&&In(t.elements.arrow),K=G?"y"===w?G.clientTop||0:G.clientLeft||0:0,Y=null!=(O=null==A?void 0:A[w])?O:0,X=L+V-Y,J=pr(h?pn(N,L+q-Y-K):N,L,h?fn(D,X):D);E[w]=J,I[w]=J-L}if(a){var Z,Q="x"===w?On:Mn,ee="x"===w?Tn:Rn,te=E[_],ne="y"===_?"height":"width",re=te+g[Q],ie=te-g[ee],oe=-1!==[On,Mn].indexOf(v),se=null!=(Z=null==A?void 0:A[_])?Z:0,ae=oe?re:te-x[ne]-C[ne]-se+S.altAxis,ce=oe?te+x[ne]+C[ne]-se-S.altAxis:ie,ue=h&&oe?function(e,t,n){var r=pr(e,t,n);return r>n?n:r}(ae,te,ce):pr(h?ae:re,te,h?ce:ie);E[_]=ue,I[_]=ue-te}t.modifiersData[r]=I}},requiresIfExists:["offset"]};function dr(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function mr(e){return[On,Rn,Tn,Mn].some((function(t){return e[t]>=0}))}var gr=qn({defaultModifiers:[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,r=e.options,i=r.scroll,o=void 0===i||i,s=r.resize,a=void 0===s||s,c=an(t.elements.popper),u=[].concat(t.scrollParents.reference,t.scrollParents.popper);return o&&u.forEach((function(e){e.addEventListener("scroll",n.update,Vn)})),a&&c.addEventListener("resize",n.update,Vn),function(){o&&u.forEach((function(e){e.removeEventListener("scroll",n.update,Vn)})),a&&c.removeEventListener("resize",n.update,Vn)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=Xn({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,r=n.gpuAcceleration,i=void 0===r||r,o=n.adaptive,s=void 0===o||o,a=n.roundOffsets,c=void 0===a||a,u={placement:Gn(t.placement),variation:Kn(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:i,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,Zn(Object.assign({},u,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:s,roundOffsets:c})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,Zn(Object.assign({},u,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:c})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}},Qn,er,fr,hr,{name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,r=e.name,i=e.options,o=n.elements.arrow,s=n.modifiersData.popperOffsets,a=Gn(n.placement),c=Yn(a),u=[Mn,Rn].indexOf(a)>=0?"height":"width";if(o&&s){var l=function(e,t){return cr("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:ur(e,Nn))}(i.padding,n),f=En(o),p="y"===c?On:Mn,h="y"===c?Tn:Rn,d=n.rects.reference[u]+n.rects.reference[c]-s[c]-n.rects.popper[u],m=s[c]-n.rects.reference[c],g=In(o),v=g?"y"===c?g.clientHeight||0:g.clientWidth||0:0,y=d/2-m/2,b=l[p],w=v-f[u]-l[h],_=v/2-f[u]/2+y,E=pr(b,_,w),x=c;n.modifiersData[r]=((t={})[x]=E,t.centerOffset=E-_,t)}},effect:function(e){var t=e.state,n=e.options.element,r=void 0===n?"[data-popper-arrow]":n;null!=r&&("string"!=typeof r||(r=t.elements.popper.querySelector(r)))&&or(t.elements.popper,r)&&(t.elements.arrow=r)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]},{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,r=t.rects.reference,i=t.rects.popper,o=t.modifiersData.preventOverflow,s=lr(t,{elementContext:"reference"}),a=lr(t,{altBoundary:!0}),c=dr(s,r),u=dr(a,i,o),l=mr(c),f=mr(u);t.modifiersData[n]={referenceClippingOffsets:c,popperEscapeOffsets:u,isReferenceHidden:l,hasPopperEscaped:f},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":l,"data-popper-escaped":f})}}]}),vr="tippy-content",yr="tippy-arrow",br="tippy-svg-arrow",wr={passive:!0,capture:!0},_r=function(){return document.body};function Er(e,t,n){if(Array.isArray(e)){var r=e[t];return null==r?Array.isArray(n)?n[t]:n:r}return e}function xr(e,t){var n={}.toString.call(e);return 0===n.indexOf("[object")&&n.indexOf(t+"]")>-1}function Cr(e,t){return"function"==typeof e?e.apply(void 0,t):e}function kr(e,t){return 0===t?e:function(r){clearTimeout(n),n=setTimeout((function(){e(r)}),t)};var n}function Sr(e){return[].concat(e)}function Ar(e,t){-1===e.indexOf(t)&&e.push(t)}function Ir(e){return[].slice.call(e)}function Or(e){return Object.keys(e).reduce((function(t,n){return void 0!==e[n]&&(t[n]=e[n]),t}),{})}function Tr(){return document.createElement("div")}function Rr(e){return["Element","Fragment"].some((function(t){return xr(e,t)}))}function Mr(e,t){e.forEach((function(e){e&&(e.style.transitionDuration=t+"ms")}))}function Lr(e,t){e.forEach((function(e){e&&e.setAttribute("data-state",t)}))}function Nr(e,t,n){var r=t+"EventListener";["transitionend","webkitTransitionEnd"].forEach((function(t){e[r](t,n)}))}function Dr(e,t){for(var n=t;n;){var r;if(e.contains(n))return!0;n=null==n.getRootNode||null==(r=n.getRootNode())?void 0:r.host}return!1}var Pr={isTouch:!1},Fr=0;function jr(){Pr.isTouch||(Pr.isTouch=!0,window.performance&&document.addEventListener("mousemove",Br))}function Br(){var e=performance.now();e-Fr<20&&(Pr.isTouch=!1,document.removeEventListener("mousemove",Br)),Fr=e}function $r(){var e,t=document.activeElement;if((e=t)&&e._tippy&&e._tippy.reference===e){var n=t._tippy;t.blur&&!n.state.isVisible&&t.blur()}}var Ur=!("undefined"==typeof window||"undefined"==typeof document||!window.msCrypto),Wr=Object.assign({appendTo:_r,aria:{content:"auto",expanded:"auto"},delay:0,duration:[300,250],getReferenceClientRect:null,hideOnClick:!0,ignoreAttributes:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,moveTransition:"",offset:[0,10],onAfterUpdate:function(){},onBeforeUpdate:function(){},onCreate:function(){},onDestroy:function(){},onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},onTrigger:function(){},onUntrigger:function(){},onClickOutside:function(){},placement:"top",plugins:[],popperOptions:{},render:null,showOnCreate:!1,touch:!0,trigger:"mouseenter focus",triggerTarget:null},{animateFill:!1,followCursor:!1,inlinePositioning:!1,sticky:!1},{allowHTML:!1,animation:"fade",arrow:!0,content:"",inertia:!1,maxWidth:350,role:"tooltip",theme:"",zIndex:9999}),zr=Object.keys(Wr);function Hr(e){var t=(e.plugins||[]).reduce((function(t,n){var r,i=n.name,o=n.defaultValue;return i&&(t[i]=void 0!==e[i]?e[i]:null!=(r=Wr[i])?r:o),t}),{});return Object.assign({},e,t)}function qr(e,t){var n=Object.assign({},t,{content:Cr(t.content,[e])},t.ignoreAttributes?{}:function(e,t){return(t?Object.keys(Hr(Object.assign({},Wr,{plugins:t}))):zr).reduce((function(t,n){var r=(e.getAttribute("data-tippy-"+n)||"").trim();if(!r)return t;if("content"===n)t[n]=r;else try{t[n]=JSON.parse(r)}catch(e){t[n]=r}return t}),{})}(e,t.plugins));return n.aria=Object.assign({},Wr.aria,n.aria),n.aria={expanded:"auto"===n.aria.expanded?t.interactive:n.aria.expanded,content:"auto"===n.aria.content?t.interactive?null:"describedby":n.aria.content},n}function Vr(e,t){e.innerHTML=t}function Gr(e){var t=Tr();return!0===e?t.className=yr:(t.className=br,Rr(e)?t.appendChild(e):Vr(t,e)),t}function Kr(e,t){Rr(t.content)?(Vr(e,""),e.appendChild(t.content)):"function"!=typeof t.content&&(t.allowHTML?Vr(e,t.content):e.textContent=t.content)}function Yr(e){var t=e.firstElementChild,n=Ir(t.children);return{box:t,content:n.find((function(e){return e.classList.contains(vr)})),arrow:n.find((function(e){return e.classList.contains(yr)||e.classList.contains(br)})),backdrop:n.find((function(e){return e.classList.contains("tippy-backdrop")}))}}function Xr(e){var t=Tr(),n=Tr();n.className="tippy-box",n.setAttribute("data-state","hidden"),n.setAttribute("tabindex","-1");var r=Tr();function i(n,r){var i=Yr(t),o=i.box,s=i.content,a=i.arrow;r.theme?o.setAttribute("data-theme",r.theme):o.removeAttribute("data-theme"),"string"==typeof r.animation?o.setAttribute("data-animation",r.animation):o.removeAttribute("data-animation"),r.inertia?o.setAttribute("data-inertia",""):o.removeAttribute("data-inertia"),o.style.maxWidth="number"==typeof r.maxWidth?r.maxWidth+"px":r.maxWidth,r.role?o.setAttribute("role",r.role):o.removeAttribute("role"),n.content===r.content&&n.allowHTML===r.allowHTML||Kr(s,e.props),r.arrow?a?n.arrow!==r.arrow&&(o.removeChild(a),o.appendChild(Gr(r.arrow))):o.appendChild(Gr(r.arrow)):a&&o.removeChild(a)}return r.className=vr,r.setAttribute("data-state","hidden"),Kr(r,e.props),t.appendChild(n),n.appendChild(r),i(e.props,e.props),{popper:t,onUpdate:i}}Xr.$$tippy=!0;var Jr=1,Zr=[],Qr=[];function ei(e,t){var n,r,i,o,s,a,c,u,l=qr(e,Object.assign({},Wr,Hr(Or(t)))),f=!1,p=!1,h=!1,d=!1,m=[],g=kr(G,l.interactiveDebounce),v=Jr++,y=(u=l.plugins).filter((function(e,t){return u.indexOf(e)===t})),b={id:v,reference:e,popper:Tr(),popperInstance:null,props:l,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},plugins:y,clearDelayTimeouts:function(){clearTimeout(n),clearTimeout(r),cancelAnimationFrame(i)},setProps:function(t){if(!b.state.isDestroyed){L("onBeforeUpdate",[b,t]),q();var n=b.props,r=qr(e,Object.assign({},n,Or(t),{ignoreAttributes:!0}));b.props=r,H(),n.interactiveDebounce!==r.interactiveDebounce&&(P(),g=kr(G,r.interactiveDebounce)),n.triggerTarget&&!r.triggerTarget?Sr(n.triggerTarget).forEach((function(e){e.removeAttribute("aria-expanded")})):r.triggerTarget&&e.removeAttribute("aria-expanded"),D(),M(),E&&E(n,r),b.popperInstance&&(J(),Q().forEach((function(e){requestAnimationFrame(e._tippy.popperInstance.forceUpdate)}))),L("onAfterUpdate",[b,t])}},setContent:function(e){b.setProps({content:e})},show:function(){var e=b.state.isVisible,t=b.state.isDestroyed,n=!b.state.isEnabled,r=Pr.isTouch&&!b.props.touch,i=Er(b.props.duration,0,Wr.duration);if(!(e||t||n||r||I().hasAttribute("disabled")||(L("onShow",[b],!1),!1===b.props.onShow(b)))){if(b.state.isVisible=!0,A()&&(_.style.visibility="visible"),M(),$(),b.state.isMounted||(_.style.transition="none"),A()){var o=T();Mr([o.box,o.content],0)}var s,c,u;a=function(){var e;if(b.state.isVisible&&!d){if(d=!0,_.offsetHeight,_.style.transition=b.props.moveTransition,A()&&b.props.animation){var t=T(),n=t.box,r=t.content;Mr([n,r],i),Lr([n,r],"visible")}N(),D(),Ar(Qr,b),null==(e=b.popperInstance)||e.forceUpdate(),L("onMount",[b]),b.props.animation&&A()&&function(e,t){W(e,(function(){b.state.isShown=!0,L("onShown",[b])}))}(i)}},c=b.props.appendTo,u=I(),(s=b.props.interactive&&c===_r||"parent"===c?u.parentNode:Cr(c,[u])).contains(_)||s.appendChild(_),b.state.isMounted=!0,J()}},hide:function(){var e=!b.state.isVisible,t=b.state.isDestroyed,n=!b.state.isEnabled,r=Er(b.props.duration,1,Wr.duration);if(!(e||t||n)&&(L("onHide",[b],!1),!1!==b.props.onHide(b))){if(b.state.isVisible=!1,b.state.isShown=!1,d=!1,f=!1,A()&&(_.style.visibility="hidden"),P(),U(),M(!0),A()){var i=T(),o=i.box,s=i.content;b.props.animation&&(Mr([o,s],r),Lr([o,s],"hidden"))}N(),D(),b.props.animation?A()&&function(e,t){W(e,(function(){!b.state.isVisible&&_.parentNode&&_.parentNode.contains(_)&&t()}))}(r,b.unmount):b.unmount()}},hideWithInteractivity:function(e){O().addEventListener("mousemove",g),Ar(Zr,g),g(e)},enable:function(){b.state.isEnabled=!0},disable:function(){b.hide(),b.state.isEnabled=!1},unmount:function(){b.state.isVisible&&b.hide(),b.state.isMounted&&(Z(),Q().forEach((function(e){e._tippy.unmount()})),_.parentNode&&_.parentNode.removeChild(_),Qr=Qr.filter((function(e){return e!==b})),b.state.isMounted=!1,L("onHidden",[b]))},destroy:function(){b.state.isDestroyed||(b.clearDelayTimeouts(),b.unmount(),q(),delete e._tippy,b.state.isDestroyed=!0,L("onDestroy",[b]))}};if(!l.render)return b;var w=l.render(b),_=w.popper,E=w.onUpdate;_.setAttribute("data-tippy-root",""),_.id="tippy-"+b.id,b.popper=_,e._tippy=b,_._tippy=b;var x=y.map((function(e){return e.fn(b)})),C=e.hasAttribute("aria-expanded");return H(),D(),M(),L("onCreate",[b]),l.showOnCreate&&ee(),_.addEventListener("mouseenter",(function(){b.props.interactive&&b.state.isVisible&&b.clearDelayTimeouts()})),_.addEventListener("mouseleave",(function(){b.props.interactive&&b.props.trigger.indexOf("mouseenter")>=0&&O().addEventListener("mousemove",g)})),b;function k(){var e=b.props.touch;return Array.isArray(e)?e:[e,0]}function S(){return"hold"===k()[0]}function A(){var e;return!(null==(e=b.props.render)||!e.$$tippy)}function I(){return c||e}function O(){var e,t,n=I().parentNode;return n?null!=(t=Sr(n)[0])&&null!=(e=t.ownerDocument)&&e.body?t.ownerDocument:document:document}function T(){return Yr(_)}function R(e){return b.state.isMounted&&!b.state.isVisible||Pr.isTouch||o&&"focus"===o.type?0:Er(b.props.delay,e?0:1,Wr.delay)}function M(e){void 0===e&&(e=!1),_.style.pointerEvents=b.props.interactive&&!e?"":"none",_.style.zIndex=""+b.props.zIndex}function L(e,t,n){var r;void 0===n&&(n=!0),x.forEach((function(n){n[e]&&n[e].apply(n,t)})),n&&(r=b.props)[e].apply(r,t)}function N(){var t=b.props.aria;if(t.content){var n="aria-"+t.content,r=_.id;Sr(b.props.triggerTarget||e).forEach((function(e){var t=e.getAttribute(n);if(b.state.isVisible)e.setAttribute(n,t?t+" "+r:r);else{var i=t&&t.replace(r,"").trim();i?e.setAttribute(n,i):e.removeAttribute(n)}}))}}function D(){!C&&b.props.aria.expanded&&Sr(b.props.triggerTarget||e).forEach((function(e){b.props.interactive?e.setAttribute("aria-expanded",b.state.isVisible&&e===I()?"true":"false"):e.removeAttribute("aria-expanded")}))}function P(){O().removeEventListener("mousemove",g),Zr=Zr.filter((function(e){return e!==g}))}function F(t){if(!Pr.isTouch||!h&&"mousedown"!==t.type){var n=t.composedPath&&t.composedPath()[0]||t.target;if(!b.props.interactive||!Dr(_,n)){if(Sr(b.props.triggerTarget||e).some((function(e){return Dr(e,n)}))){if(Pr.isTouch)return;if(b.state.isVisible&&b.props.trigger.indexOf("click")>=0)return}else L("onClickOutside",[b,t]);!0===b.props.hideOnClick&&(b.clearDelayTimeouts(),b.hide(),p=!0,setTimeout((function(){p=!1})),b.state.isMounted||U())}}}function j(){h=!0}function B(){h=!1}function $(){var e=O();e.addEventListener("mousedown",F,!0),e.addEventListener("touchend",F,wr),e.addEventListener("touchstart",B,wr),e.addEventListener("touchmove",j,wr)}function U(){var e=O();e.removeEventListener("mousedown",F,!0),e.removeEventListener("touchend",F,wr),e.removeEventListener("touchstart",B,wr),e.removeEventListener("touchmove",j,wr)}function W(e,t){var n=T().box;function r(e){e.target===n&&(Nr(n,"remove",r),t())}if(0===e)return t();Nr(n,"remove",s),Nr(n,"add",r),s=r}function z(t,n,r){void 0===r&&(r=!1),Sr(b.props.triggerTarget||e).forEach((function(e){e.addEventListener(t,n,r),m.push({node:e,eventType:t,handler:n,options:r})}))}function H(){var e;S()&&(z("touchstart",V,{passive:!0}),z("touchend",K,{passive:!0})),(e=b.props.trigger,e.split(/\s+/).filter(Boolean)).forEach((function(e){if("manual"!==e)switch(z(e,V),e){case"mouseenter":z("mouseleave",K);break;case"focus":z(Ur?"focusout":"blur",Y);break;case"focusin":z("focusout",Y)}}))}function q(){m.forEach((function(e){var t=e.node,n=e.eventType,r=e.handler,i=e.options;t.removeEventListener(n,r,i)})),m=[]}function V(e){var t,n=!1;if(b.state.isEnabled&&!X(e)&&!p){var r="focus"===(null==(t=o)?void 0:t.type);o=e,c=e.currentTarget,D(),!b.state.isVisible&&xr(e,"MouseEvent")&&Zr.forEach((function(t){return t(e)})),"click"===e.type&&(b.props.trigger.indexOf("mouseenter")<0||f)&&!1!==b.props.hideOnClick&&b.state.isVisible?n=!0:ee(e),"click"===e.type&&(f=!n),n&&!r&&te(e)}}function G(e){var t=e.target,n=I().contains(t)||_.contains(t);if("mousemove"!==e.type||!n){var r=Q().concat(_).map((function(e){var t,n=null==(t=e._tippy.popperInstance)?void 0:t.state;return n?{popperRect:e.getBoundingClientRect(),popperState:n,props:l}:null})).filter(Boolean);(function(e,t){var n=t.clientX,r=t.clientY;return e.every((function(e){var t=e.popperRect,i=e.popperState,o=e.props.interactiveBorder,s=i.placement.split("-")[0],a=i.modifiersData.offset;if(!a)return!0;var c="bottom"===s?a.top.y:0,u="top"===s?a.bottom.y:0,l="right"===s?a.left.x:0,f="left"===s?a.right.x:0,p=t.top-r+c>o,h=r-t.bottom-u>o,d=t.left-n+l>o,m=n-t.right-f>o;return p||h||d||m}))})(r,e)&&(P(),te(e))}}function K(e){X(e)||b.props.trigger.indexOf("click")>=0&&f||(b.props.interactive?b.hideWithInteractivity(e):te(e))}function Y(e){b.props.trigger.indexOf("focusin")<0&&e.target!==I()||b.props.interactive&&e.relatedTarget&&_.contains(e.relatedTarget)||te(e)}function X(e){return!!Pr.isTouch&&S()!==e.type.indexOf("touch")>=0}function J(){Z();var t=b.props,n=t.popperOptions,r=t.placement,i=t.offset,o=t.getReferenceClientRect,s=t.moveTransition,c=A()?Yr(_).arrow:null,u=o?{getBoundingClientRect:o,contextElement:o.contextElement||I()}:e,l=[{name:"offset",options:{offset:i}},{name:"preventOverflow",options:{padding:{top:2,bottom:2,left:5,right:5}}},{name:"flip",options:{padding:5}},{name:"computeStyles",options:{adaptive:!s}},{name:"$$tippy",enabled:!0,phase:"beforeWrite",requires:["computeStyles"],fn:function(e){var t=e.state;if(A()){var n=T().box;["placement","reference-hidden","escaped"].forEach((function(e){"placement"===e?n.setAttribute("data-placement",t.placement):t.attributes.popper["data-popper-"+e]?n.setAttribute("data-"+e,""):n.removeAttribute("data-"+e)})),t.attributes.popper={}}}}];A()&&c&&l.push({name:"arrow",options:{element:c,padding:3}}),l.push.apply(l,(null==n?void 0:n.modifiers)||[]),b.popperInstance=gr(u,_,Object.assign({},n,{placement:r,onFirstUpdate:a,modifiers:l}))}function Z(){b.popperInstance&&(b.popperInstance.destroy(),b.popperInstance=null)}function Q(){return Ir(_.querySelectorAll("[data-tippy-root]"))}function ee(e){b.clearDelayTimeouts(),e&&L("onTrigger",[b,e]),$();var t=R(!0),r=k(),i=r[0],o=r[1];Pr.isTouch&&"hold"===i&&o&&(t=o),t?n=setTimeout((function(){b.show()}),t):b.show()}function te(e){if(b.clearDelayTimeouts(),L("onUntrigger",[b,e]),b.state.isVisible){if(!(b.props.trigger.indexOf("mouseenter")>=0&&b.props.trigger.indexOf("click")>=0&&["mouseleave","mousemove"].indexOf(e.type)>=0&&f)){var t=R(!1);t?r=setTimeout((function(){b.state.isVisible&&b.hide()}),t):i=requestAnimationFrame((function(){b.hide()}))}}else U()}}function ti(e,t){void 0===t&&(t={});var n=Wr.plugins.concat(t.plugins||[]);document.addEventListener("touchstart",jr,wr),window.addEventListener("blur",$r);var r,i=Object.assign({},t,{plugins:n}),o=(r=e,Rr(r)?[r]:function(e){return xr(e,"NodeList")}(r)?Ir(r):Array.isArray(r)?r:Ir(document.querySelectorAll(r))).reduce((function(e,t){var n=t&&ei(t,i);return n&&e.push(n),e}),[]);return Rr(e)?o[0]:o}ti.defaultProps=Wr,ti.setDefaultProps=function(e){Object.keys(e).forEach((function(t){Wr[t]=e[t]}))},ti.currentInput=Pr,Object.assign({},Qn,{effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow)}}),ti.setDefaultProps({render:Xr});const ni=ti;var ri=n(2817);n(6399),n(4066),n(8077),n(7179),n(2314),n(6394),n(2608),n(7843),n(1530);const ii={fighter:n(9773),mage:n(8050),paladin:n(6149),rogue:n(2582)};function oi(e,t={}){const n=document.createElement("div");n.innerHTML=e;const r=n.querySelector("svg");for(let e in t)r.setAttribute(e,t[e]);return r.outerHTML}n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p;const si={fighter:{description:"Some description",color:"#BB3300"},mage:{description:"Some description",color:"#4779da"},paladin:{description:"Some description",color:"#d2a200"},rogue:{description:"Some description",color:"#7a7a7a"}};for(let e in si){const t=si[e];t.className=e,t.displayName=Xt(e),t.icon=oi(ii[e],{class:"orb-icon",fill:t.color})}Object.values(si);class ai{constructor(e={},t={}){this._maxOrbs=ci(e),this._usedOrbs=ci(t)}get maxOrbs(){return this._maxOrbs}get classes(){const e={};return Object.keys(this._maxOrbs).forEach((t=>e[t]=1)),Object.keys(this._usedOrbs).forEach((t=>e[t]=1)),Object.keys(e)}get isValid(){return!this.list.find((e=>e.remaining<0))}get list(){return this.classes.map((e=>this.get(e)))}get total(){return Yt.sum(Object.values(this._maxOrbs))}get(e){const t={className:e,used:this._usedOrbs[e]||0,max:this._maxOrbs[e]||0};return t.remaining=t.max-t.used,t}}function ci(e){Array.isArray(e)&&(e=e.reduce(((e,t)=>{for(let n in t)e[n]||(e[n]=0),e[n]+=t[n];return e}),{}));for(let t in e)e[t]=Math.max(0,e[t]);return e||{}}var ui=n(1590);class li extends HTMLElement{constructor(){super(),this.events=new ui.EventEmitter,this._options={...this.defaultOptions}}get defaultOptions(){return{}}get parentPage(){return this.closest(".page")}setOptions(e={}){const t=function(e,t){const n={...e};for(let e in t)e in n&&(n[e]=t[e]);return n}(this._options,e);return Yt.isEqual(t,this._options)||(this._options=t,this._update()),this}setTooltip(e=null){this._tippy||ni(this,{theme:"light"}),e?(this._tippy.enable(),this._tippy.setContent(e)):this._tippy.disable()}_update(){}}customElements.define("di-orb-row",class extends li{_orbsData=null;get defaultOptions(){return{style:0,tooltip:1,allowNegatives:!1}}setData(e){return this._orbsData=e instanceof ai?e:new ai(e),this._update(),this}_update(){this.classList.toggle("no-tooltips",0===this._options.tooltip),this.innerHTML="",this._orbsData&&this._orbsData.list.forEach((e=>{this.appendChild(new fi(e,this._options))}))}});class fi extends HTMLElement{constructor(e,{style:t,allowNegatives:n,tooltip:r}){let i;super();let o=l(e.used),s=l(e.max);1===t?(i=`${o}/${s}`,this.classList.toggle("error",e.remaining<0)):i=2===t?(s>=0?"+":"")+s:3===t?""+s:""+o;const a=(c=e.className,{...si[c]});var c;this.style.color=a.color,this.innerHTML=((e,t)=>`\n  <span>${t}</span> ${e}\n`)(a.icon||ri,i);const u=2===r?"Spend this many orbs to equip this item.":`${a.displayName} orbs`;function l(e){return n?e:Math.max(0,e)}ni(this,{theme:"light",content:u})}}customElements.define("di-orb-entry",fi);const pi={0:function(e,t){const n=di(e);if(n.all.pct.length)throw"Flat stats can not have percentage values";if(n.all.multi.length)throw"Flat stats can not have multiplier values";return{value:n.all.flat.reduce(((e,t)=>e+t),t),mods:n}},1:function(e,t=1){const n=di(e);if(n.all.flat.length)throw"Multiplier stats can not have flat values";if(n.all.multi.length)throw"Multiplier stats can not have multiplier values (lol)";let r=n.positive.pct.reduce(((e,t)=>e+t),100);return r=n.negative.pct.sort().reduce(((e,t)=>e+t>100?e+t:e<100?e*(1+t/100):e+t),r),r=t*r/100,{value:r,mods:n}},2:function(e,t){const n=di(e);if(n.all.flat.length)throw"Percentage stats can not have flat values";if(n.all.multi.length)throw"Percentage stats can not have multiplier values";let r=n.positive.pct.reduce(((e,t)=>{if(t>100)throw"Percentage stats can not have values over 100";return e+t/100*(1-e)}),t);return r=n.negative.pct.reduce(((e,t)=>{if(n<-100)throw"Percentage stats can not have values under 100";return e*(1+t/100)}),r),{value:r,mods:n}},3:function(e,t){const n=di(e);let r=n.all.flat.reduce(((e,t)=>e+t),t),i=n.positive.pct.reduce(((e,t)=>e+t),100);return i=n.negative.pct.sort().reduce(((e,t)=>e+t>100?e+t:e<100?e*(1+t/100):e+t),i),r*=i/100,r=n.all.multi.reduce(((e,t)=>e*t),r),{value:r,mods:n}}};function hi(e){e+="";let t=parseFloat(e);return"x"===e.charAt(e.length-1)?{suffix:"x",value:t}:"%"===e.charAt(e.length-1)?{suffix:"%",value:t}:{suffix:"",value:t}}function di(e){const t={flat:[],pct:[],multi:[]},n={flat:[],pct:[],multi:[]},r={flat:[],pct:[],multi:[]};return e.forEach((e=>{const{value:i,suffix:o}=hi(e);"%"===o?(t.pct.push(i),(i>=0?n:r).pct.push(i)):"x"===o?(t.multi.push(i),(i>=1?n:r).multi.push(i)):(t.flat.push(i),(i>=0?n:r).flat.push(i))})),{all:t,positive:n,negative:r}}const mi={type:1},gi={roundingDecimals:0,defaultValue:1,minValue:1},vi={type:2},yi={type:1},bi={type:1},wi={type:2},_i={minValue:0,maxValue:1},Ei={type:1},xi={minValue:0},Ci={type:1},ki={type:1,inverted:!0},Si={type:2},Ai={inverted:!0},Ii={roundingDecimals:0},Oi={minValue:0},Ti={type:2},Ri={minValue:0,roundingDecimals:0},Mi={type:2,inverted:!0},Li={type:2},Ni={minValue:0,roundingDecimals:0},Di={inverted:!0,minValue:0},Pi={type:0,roundingDecimals:0},Fi={roundingDecimals:0,minValue:0,type:0};mi.name="attackDamage",mi.group="definitions",gi.name="attacks",gi.group="definitions",vi.name="blockChance",vi.group="definitions",yi.name="chestLevel",yi.group="definitions",bi.name="combatXP",bi.group="definitions",wi.name="cooldownReduction",wi.group="definitions",_i.name="critChance",_i.group="definitions",Ei.name="critDamage",Ei.group="definitions",xi.name="critLifesteal",xi.group="definitions",Ci.name="damageDealt",Ci.group="definitions",ki.name="damageTaken",ki.group="definitions",Si.name="dodgeChance",Si.group="definitions",Ai.name="enemyCritChance",Ai.group="definitions",Ii.name="hpMax",Ii.group="definitions",Oi.name="lifesteal",Oi.group="definitions",Ti.name="magicDef",Ti.group="definitions",Ri.name="magicPower",Ri.group="definitions",Mi.name="missChance",Mi.group="definitions",Li.name="physDef",Li.group="definitions",Ni.name="physPower",Ni.group="definitions",Di.name="slow",Di.group="definitions",Pi.name="speed",Pi.group="definitions",Fi.name="startingFood",Fi.group="definitions";const ji={attackDamage:mi,attacks:gi,blockChance:vi,chestLevel:yi,combatXP:bi,cooldownReduction:wi,critChance:_i,critDamage:Ei,critLifesteal:xi,damageDealt:Ci,damageTaken:ki,dodgeChance:Si,enemyCritChance:Ai,hpMax:Ii,lifesteal:Oi,magicDef:Ti,magicPower:Ri,missChance:Mi,physDef:Li,physPower:Ni,slow:Di,speed:Pi,startingFood:Fi},Bi={type:3,minValue:void 0,maxValue:void 0,defaultValue:void 0,roundingDecimals:3,inverted:!1};class $i{_scaleFn;baseAffectors=[];additionalAffectors=[];constructor(e=null,t=null){this.baseAffectors=Ui(e),this.additionalAffectors=Ui(t)}get affectors(){return this.baseAffectors.concat(this.additionalAffectors)}get scale(){return this._scaleFn?this._scaleFn():1}set scaleFn(e){this._scaleFn=e}get(e){const t=e.name??e,n=function(e){const t=ji[e];if(!t)throw"Unknown stat name: "+e;return{...Bi,...t,name:e,defaultValue:(n=t,Yt.isNumber(n.defaultValue)?n.defaultValue:1===n.type?1:0)};var n}(t),r=pi[n.type];if(!r)throw"Missing value function for stat type: "+n.type;const i=r(s(this.baseAffectors,t),n.defaultValue);n.baseValue=a(i.value),n.baseMods=i.mods;const o=r(s(this.affectors,t),n.defaultValue);return n.value=a(o.value*this.scale),n.mods=o.mods,n.diff=function({defaultValue:e,baseValue:t,value:n,inverted:r=!1}){return t===n?0:t===e?i(n>e)?3:4:i(n>t)?1:2;function i(e){return r?!e:e}}(n),n;function s(e,t){return e.map((e=>e[t]||null)).filter((e=>e))}function a(e){return Yt.isNumber(n.minValue)&&(e=Math.max(n.minValue,e)),Yt.isNumber(n.maxValue)&&(e=Math.min(n.maxValue,e)),Jt(e,n.roundingDecimals)}}getAll(e=[]){const t={};e.forEach((e=>t[e]=!0)),this.affectors.forEach((e=>{Object.keys(e).forEach((e=>{t[e]=!0}))}));const n={};return Object.keys(t).forEach((e=>{const t=this.get(e);n[e]=t})),n}serialize(){const e={};return Object.entries(this.getAll()).forEach((([t,n])=>{e[t]=n.value})),e}}function Ui(e){if(!e)return[];const t=Array.isArray(e)?e:[e],n=[];return t.forEach((e=>{e instanceof $i?n.push(...e.affectors):n.push(e)})),n}const Wi={},zi={},Hi={description:"Guards the stairs to the next zone. Higher rewards!"},qi={},Vi={},Gi={description:"Will try to rest at the next opportunity."},Ki={description:"Basic attack deals magic damage & scales with magic power."},Yi={},Xi={description:"No basic attack"},Ji={},Zi={description:"Can only use basic attacks."},Qi={description:"Begin combat with full action bar."};Wi.name="doubleStrike",Wi.group="fighter",zi.name="dualWield",zi.group="fighter",Hi.name="boss",Hi.group="generic",qi.name="freezeActionBar",qi.group="generic",Vi.name="freezeCooldowns",Vi.group="generic",Gi.name="hungry",Gi.group="generic",Ki.name="magicAttack",Ki.group="generic",Yi.name="magicScaling",Yi.group="generic",Xi.name="noBasicAttack",Xi.group="generic",Ji.name="physScaling",Ji.group="generic",Zi.name="silenced",Zi.group="generic",Qi.name="sneakAttack",Qi.group="generic";const eo={fighter:{doubleStrike:Wi,dualWield:zi},generic:{boss:Hi,freezeActionBar:qi,freezeCooldowns:Vi,hungry:Gi,magicAttack:Ki,magicScaling:Yi,noBasicAttack:Xi,physScaling:Ji,silenced:Zi,sneakAttack:Qi}};function to(e,t){t={hpMax:0,hpMissingPct:0,hp:0,magicPower:0,physPower:0,flat:0,...t};let n=0;return n+=e.hpMax*t.hpMax,n+=(e.hpMax-e.hp)*t.hpMissingPct,n+=e.hp*t.hp,n+=e.magicPower*t.magicPower,n+=e.physPower*t.physPower,n+=t.flat,n}const no={stateParamsFn:({sourceEffect:e,params:t={}})=>({barrierPoints:Math.ceil(to(e.owner,t))}),defFn:e=>({stacking:"replace",isBuff:!0,displayName:"Barrier",barrier:{points:e.barrierPoints}})},ro={stateParamsFn:({sourceEffect:e,params:t})=>({slot:("opposing"===t.slot?e.slot:t.slot)??-1}),defFn:e=>({stacking:"replace",description:`Slot ${e.slot} item is disabled.`,disarmedItemSlot:e.slot})},io={stacking:!0,persisting:!0,description:"Reduced phys & magic power.",displayName:"Diseased",stats:{physPower:"0.85x",magicPower:"0.85x"}},oo={isBuff:!0,stats:{dodgeChance:"+100%"}};function so(e){return{cancelReason:null,...e,type:"cancel"}}const ao={abilities:{beforeActive:{actions:[{type:"removeThisStatusEffect"},so({cancelReason:"Stand Up"})]}}};function co(e){return{damageType:"phys",scaling:{},ignoreDefense:!1,...e,type:"takeDamage"}}const uo={stateParamsFn:({sourceEffect:e,params:t={}})=>{if(!t.damage)throw'Missing mandatory param "damage".';const n=t.damageType??"magic";return{dps:Jt(e.owner[n+"Power"]*t.damage,1),damageType:n}},defFn:(e,{stacks:t=1})=>({stacking:!0,description:"Taking damage over time.",abilities:{tick:{initialCooldown:1e3,actions:[co({scaling:{flat:e.dps*t},damageType:e.damageType})]}}})},lo={name:"Stunned",displayName:"Stunned",stacking:"extend",mods:["freezeActionBar"]},fo={stats:{dodgeChance:"+100%",regen:"5%"},mods:["freezeActionBar"],isBuff:!0};no.name="barrier",no.group="generic",ro.name="disarmed",ro.group="generic",io.name="diseased",io.group="generic",oo.name="dodging",oo.group="generic",ao.name="knockedDown",ao.group="generic",uo.name="poisoned",uo.group="generic",lo.name="stunned",lo.group="generic",fo.name="vanished",fo.group="generic";const po={barrier:no,disarmed:ro,diseased:io,dodging:oo,knockedDown:ao,poisoned:uo,stunned:lo,vanished:fo};class ho{constructor(e,t,n){this._abilityDef=e,this._parentEffect=n,this._state=t??{}}get parentEffect(){return this._parentEffect}get name(){return this._abilityDef.name}get description(){return this._abilityDef.description??null}get actions(){return this._abilityDef.actions}get fighterInstance(){return this._parentEffect.owner}get state(){return{...this._state}}set state(e){this._state={...e}}get isPositive(){return this._abilityDef.isPositive??this._parentEffect.isBuff??!0}get cooldownRemaining(){return this.cooldown?this.cooldown*(1-this.cooldownElapsedPct):0}set cooldownRemaining(e){this.cooldownElapsedPct=1-e/this.cooldown}get cooldownElapsedPct(){return this.cooldown?(void 0===this._state.cooldownElapsedPct&&(this._state.cooldownElapsedPct=1-this.initialCooldown/this.cooldown),this._state.cooldownElapsedPct):1}set cooldownElapsedPct(e){this.cooldown&&(this._state.cooldownElapsedPct=Math.min(e,1))}get cooldown(){return(1-this._parentEffect.exclusiveStats.get("cooldownReduction").value)*this._abilityDef.cooldown||this.initialCooldown}get initialCooldown(){return(this._abilityDef.initialCooldown??0)*(1-this._parentEffect.exclusiveStats.get("cooldownReduction").value)}get uses(){return this._abilityDef.uses??0}get timesUsed(){return this._state.timesUsed??0}get conditions(){return this._abilityDef.conditions??null}get ready(){return!this.cooldownRemaining&&this.enabled}get enabled(){return!(this.uses&&this._state.timesUsed>=this.uses)&&this.fighterInstance.meetsConditions(this.conditions)}get nextTurnOffset(){return this._abilityDef.nextTurnOffset}get cooldownRefreshing(){return this.cooldown&&(!this.uses||this.timesUsed<this.uses)}get phantom(){return this._abilityDef.phantom??!1}shouldTrigger(){return!(this.cooldownRemaining||!this.enabled||this._abilityDef.chance&&Math.random()>this._abilityDef.chance)}advanceTime(e){this.cooldownRefreshing&&(this.cooldownRemaining=Math.max(0,this.cooldownRemaining-e))}use(){return this.cooldown&&(this.cooldownElapsedPct=0),this._state.timesUsed=(this._state.timesUsed??0)+1,this}}class mo{_owner;instances;constructor(e,t,n){this._owner=n,this.instances={};for(let r in e)this.instances[r]=new ho(e[r],t[r],n)}get stateVal(){const e={};for(let t in this.instances)e[t]=this.instances[t].state;return e}set stateVal(e){for(let t in e)this.instances[t].state=e[t]}advanceTime(e){for(let t in this.instances)this.instances[t].advanceTime(e);return this}refreshCooldowns(e=null){const t=e?e.amountPct:1,n=e?e.amountFlat:0;for(let e in this.instances)this.instances[e].cooldownRemaining-=n,this.instances[e].cooldownRemaining*=1-t}}class go{constructor(){const e=[...arguments].map(vo).flat(1/0);this._mods={},e.forEach((e=>{var t;("string"==typeof(t=e)||t instanceof String)&&(e={name:e}),e.group=e.group??"generic",this._mods[e.group]||(this._mods[e.group]=[]),this._mods[e.group].push(e)}))}get list(){const e=[];return Object.keys(this._mods).forEach((t=>{e.push(...this._mods[t].map((e=>eo[e.group][e.name])))})),e}contains({group:e="generic",name:t}){return!!this._mods[e]?.find((e=>e.name===t))}}function vo(e){return e instanceof go?e.list:Yt.isArray(e)?e.map(vo):e}new $i;class yo{owner;_state={};effectId="";constructor(e,t={}){this.owner=e,this._state=t}get effectData(){throw"effectData getter not defined"}get displayName(){return this.effectData.displayName??Xt(this.effectData.name)}get description(){return this.effectData.description??""}get disabled(){return!!this.owner&&!!this.owner.isEffectDisabled(this)}get stats(){if(this.disabled)return new $i;const e=this.effectData.scaledStats;return new $i(e?function(e,t,n){let r=rn(0,n[t.property],1);t.inverted&&(r=1-r);const i={};return Object.entries(e).forEach((([e,t])=>{const{suffix:n,value:o}=hi(t);i[e]=n?o*r+n:parseFloat(o*r)})),i}(e.stats,e.scaling,this.owner):this.effectData.stats)}get exclusiveStats(){return this.owner?.statsForEffect(this)??new $i}get state(){return this.fixState(),JSON.parse(JSON.stringify(this._state))}get mods(){return this.disabled?new go:new go(this.effectData.mods||[])}set state(e){this._state={...e},this.fixState()}get hasAbilities(){return Object.keys(this.effectData.abilities??{}).length>0}get abilities(){return this.generateAbilitiesData().instances}get enabledAbilities(){return this.disabled?{}:this.abilities}get slotEffect(){return this.effectData.slotEffect??null}get isValid(){return!!this.effectData}generateAbilitiesData(){return new mo(this.effectData.abilities,this._state?.abilities??{},this)}getAbility(e){return this.generateAbilitiesData().instances[e]}useAbility(e){const t=this.generateAbilitiesData(),n=t.instances[e];if(n.use(),this._state.abilities=t.stateVal,n.nextTurnOffset){let e=0;n.nextTurnOffset.pct&&(e+=this.owner.turnTime*n.nextTurnOffset.pct),this.owner.nextTurnOffset+=e}}shouldTrigger(e){return!this.disabled&&!!this.getAbility(e)?.shouldTrigger()}advanceTime(e){const t=this.generateAbilitiesData();t.advanceTime(e),this._state.abilities=t.stateVal}refreshCooldown(e=null){const t=this.generateAbilitiesData();t.refreshCooldowns(e),this._state.abilities=t.stateVal}fixState(){this._state={abilities:this.generateAbilitiesData().stateVal,...this._state}}}class bo extends yo{constructor(e,t,n={}){super(t,n),this._data=e,this.effectId=n.effectId??"statusEffect-"+nn()}get phantom(){return!this.effectData.displayName}get data(){return this._data}get effectData(){if(!this._data.name)return this.data;let e;const t=po[this._data.name];return e=t.defFn?{name:t.name,group:t.group,displayName:Xt(t.name),...t.defFn(this._data.params,this._state)}:t,{...e,...this.data}}get stacking(){return this.effectData.stacking??!1}get isBuff(){return this.effectData.isBuff??!1}get stacks(){return this._state.stacks??1}get stats(){return new $i(Array(this.stacks).fill(super.stats))}get duration(){return this.effectData.duration+(this._state.extendedDuration??0)}get durationRemaining(){return Math.max(0,this.duration-this.time)}get expired(){return!(!Number.isFinite(this.duration)||this.durationRemaining)||!(!this.barrier||this.barrierPointsRemaining)||0===this.stacks||!!(this.turns&&this.turnsTaken>=this.turns)}get time(){return this._state.time??0}get state(){const e=super.state;return e.data=this._data,e.effectId=this.effectId,e}get barrier(){return this.effectData.barrier??null}get barrierDamage(){return this._state.barrierDamage??0}get barrierPointsRemaining(){return this.barrier?this.barrier.points-this.barrierDamage:0}get turns(){return this.effectData.turns??null}get turnsTaken(){return this._state.turnsTaken??0}get persisting(){return this.effectData.persisting??!1}extend(e){return this.duration&&(this._state.extendedDuration=(this._state.extendedDuration??0)+e),this}refresh(){return this.barrier&&(this._state.barrierDamage=0),this._state.time=0,this}addStack(){return this.effectData.stacking&&(this._state.stacks=this.stacks+1),this}removeStack(){return this.effectData.stacking&&(this._state.stacks=Math.max(0,this.stacks-1)),this}advanceTime(e){super.advanceTime(e),this._state.time=this.time+e}nextTurn(){this.turns&&(this._state.turnsTaken=this.turnsTaken+1)}reduceBarrierPoints(e){if(!this.barrier)return 0;const t=Math.min(e,this.barrierPointsRemaining);return this._state.barrierDamage=Jt(this.barrierDamage+t,2),t}}class wo{_instances=[];constructor(e){this._fighterInstance=e}get instances(){return[...this._instances]}get stateVal(){return this._instances.map((e=>e.state))}set stateVal(e){this._instances=[],e&&(e=JSON.parse(JSON.stringify(e))).forEach((e=>{this._instances.push(new bo(e.data,this._fighterInstance,e))}))}advanceTime(e){this._instances.forEach((t=>{t.advanceTime(e)})),this.cleanupExpired()}nextTurn(){this._instances.forEach((e=>e.nextTurn())),this.cleanupExpired()}ownerTakingDamage(e){let t=e;const n={};return this._instances.forEach((e=>{t&&e.barrier&&(t-=n[e.effectId]=e.reduceBarrierPoints(t))})),n.hp=t,this.cleanupExpired(),n}cleanupExpired(){this._instances=this._instances.filter((e=>!(!this._fighterInstance.inCombat&&!e.persisting||e.expired)))}add(e){const{existing:t,index:n}=this._getExisting(e);if(t){if("replace"===t.stacking){const t=new bo(e,this._fighterInstance);return this._instances[n]=t,t}if("extend"===t.stacking)return t.extend(new bo(e,this._fighterInstance).duration);if(!0===t.stacking)return t.addStack().refresh()}const r=new bo(e,this._fighterInstance);return this._instances.push(r),r}remove(e){var t;t=e,e=Array.isArray(t)?t:[t],this._instances=this._instances.filter((t=>!(e.indexOf(t)>-1)))}getById(e){return e?this._instances.find((t=>t.id===e)):[]}getByType(e){return this._instances.filter((t=>t.type===e))}hasType(e){return!!this._instances.find((t=>t.type===e))}_getExisting(e){const t=this._instances.findIndex((t=>!(!e.stackingId||e.stackingId!==t.effectData.stackingId)||e.sourceEffectId===t.data.sourceEffectId));return{index:t,existing:this._instances[t]}}}class _o extends yo{constructor(e,t={},n=null){super(n,t),this.itemData=e}get effectData(){return this.itemData}get slot(){return this.owner?this.owner.itemInstances.indexOf(this):-1}get slotTags(){return[]}get isBasic(){return!0}get activeAbility(){return this.getAbility("active")}get applicableSlotEffects(){return this.owner?.getSlotEffectsFor(this.slot)??[]}}new $i;const Eo={inCombat:!1};class xo{_fighterData;_state;_itemInstances;constructor(e,t={}){this._fighterData=e,this._itemInstances=[];for(let t=0;t<8;t++)e.items[t]?(this._itemInstances[t]=new this.ItemClass(e.items[t],null,this),this._itemInstances[t].effectId=this.uniqueID+"-item-"+t):this._itemInstances[t]=null;this.statusEffectsData=new wo(this),this.setState(t)}get level(){throw"Not implemented"}get fighterData(){return this._fighterData}get displayName(){throw"Not implemented"}get ItemClass(){throw"Not implemented"}get uniqueID(){return this.fighterData._id.toString()}get itemInstances(){return this._itemInstances}get baseHp(){throw"Not implemented"}get basePower(){throw"Not implemented"}get baseStats(){throw"Not implemented"}get stats(){const e={physPower:this.basePower,magicPower:this.basePower,hpMax:this.baseHp},t=this.baseStats,n=this.itemInstances.filter((e=>e)).map((e=>e.stats)),r=this.statusEffectsData.instances.map((e=>e.stats));return new $i([e,...t,...n],r)}get baseMods(){return[]}get effectInstances(){return[...this.itemInstances.filter((e=>e)),...this.statusEffectsData.instances]}get mods(){return new go(this.effectInstances.map((e=>e.mods)).filter((e=>e)))}get orbs(){throw"Not implemented"}get state(){const e={...this._state};return e.itemStates=this._itemInstances.map((e=>e?e.state:null)),e.effects=this.statusEffectsData.stateVal,{...e}}get turnTime(){const e=this.stats.get("speed").value;let t;return t=e>=0?100/(e+100)*3e3:3e3*(1+e/-100),t}get nextActionTime(){return this.turnTime}get timeUntilNextUpdate(){let e=1/0;return this.effectInstances.forEach((t=>{const n=t.getAbility("tick");n&&(e=Math.min(e,n.cooldownRemaining)),t.durationRemaining&&(e=Math.min(e,t.durationRemaining))})),Math.min(this.timeUntilNextAction,e)}get timeSinceLastAction(){return this._state.timeSinceLastAction??0}set timeSinceLastAction(e){this._state.timeSinceLastAction=e}get timeUntilNextAction(){return Math.ceil(Math.max(0,this.nextActionTime-this.timeSinceLastAction))}set timeUntilNextAction(e){this._state.timeSinceLastAction=this.nextActionTime-Math.max(0,e)}get actionReady(){return this.hp>0&&!this.timeUntilNextAction}get hp(){return Math.ceil(this.hpPct*this.hpMax)}set hp(e){isNaN(e),this.hpPct=e/this.hpMax}get hpMax(){return Math.ceil(this.stats.get("hpMax").value)}get hpPct(){return this._state.hpPct??1}set hpPct(e){this._state.hpPct=rn(0,e,1)}get basicAttackType(){return this.mods.contains(Ki)?"magic":"phys"}get magicPower(){return Math.ceil(this.stats.get("magicPower").value)}get physPower(){return Math.ceil(this.stats.get("physPower").value)}get inCombat(){return this._state.inCombat}set inCombat(e){this._state.inCombat=e}get nextTurnOffset(){return this._state.nextTurnOffset??0}set nextTurnOffset(e){this._state.nextTurnOffset=e}setState(e){const t=e.itemStates??[];this.itemInstances.forEach(((e,n)=>{e&&(e.state=t[n])})),this.statusEffectsData.stateVal=e.effects,this._state={...Eo,...e},delete this._state.itemStates,delete this._state.effects}advanceTime(e){!this.mods.contains(qi)&&this.inCombat&&(this._state.timeSinceLastAction+=e),this.mods.contains(Vi)||this.itemInstances.forEach((t=>{t&&t.advanceTime(e)})),this.statusEffectsData.advanceTime(e),this.inCombat&&(this._state.combatTime+=e)}nextActiveItemIndex(){return this.mods.contains(Zi)?-1:this.itemInstances.findIndex((e=>{const t=e?.getAbility("active");if(t?.ready)return!0}))}triggeredEffects(e){const t=[];return this.effectInstances.forEach((n=>{n?.shouldTrigger(e)&&t.push(n)})),t}nextTurn(){this._state.timeSinceLastAction=this._state.nextTurnOffset??0,delete this._state.nextTurnOffset,this.statusEffectsData.nextTurn()}meetsConditions(e){return!e||Object.keys(e).every((t=>{if("hpPctBelow"===t)return this.hpPct<=e[t];if("debuffed"===t)return this.statusEffectsData.instances.some((e=>!e.isBuff&&!e.expired&&!e.phantom));if("combatTimeAbove"===t)return this._state.combatTime>=e[t];throw`Undefined condition: ${t}`}))}cleanupState(){this.statusEffectsData.cleanupExpired()}startCombat(){this.inCombat=!0,this._state.combatTime=0,this._state.timeSinceLastAction=this.mods.contains(Qi)?this.nextActionTime-1:0}endCombat(){this.inCombat=!1,delete this._state.combatTime,delete this._state.timeSinceLastAction,this.cleanupState()}isEffectDisabled(e){return!(!e.effectData.conditions||this.meetsConditions(e.effectData.conditions))||!!(e instanceof _o&&this.statusEffectsData.instances.find((t=>t.effectData.disarmedItemSlot===e.slot)))}getSlotEffectsFor(e){const t=this.itemInstances[e];if(!t)return[];const n=[];return this.effectInstances.forEach((r=>{r.slotEffect&&(r.slotEffect.slotIndex===e||t.slotTags.indexOf(r.slotEffect.slotTag)>=0)&&n.push(r.slotEffect)})),n}statsForEffect(e){return e&&e.applicableSlotEffects?new $i([this.stats,...e.applicableSlotEffects.map((e=>e.stats??{}))]):this.stats}}const Co={levelFn:e=>{const t=`+${18+2*e}%`;return{abilities:{attackHit:{description:`After attacking, gain [SphysPower${t}] until end of combat. (Stacks)`,actions:[{type:"statusEffect",affects:"self",effect:{displayName:"Berserk",stacking:!0,isBuff:!0,stats:{[Ni.name]:t}}}]}}}},displayName:"Berserker's Gauntlet",orbs:5,rarity:1};function ko(e,t,n=1,r=null){if((t=Math.round(t))<=0)return 0;const i=n*(Math.pow(1+e,t)-1)/e;return r?Zt(i,r):i}function So(e,t,n=0){if(Yt.isString(e)&&(e=parseFloat(e)/100),e<0||e>1)throw"Exponential percentage out of range, probably a bug";if(n<0||n>1)throw"Aaaaa";return Zt(100*(1-Math.pow(1-e,t)*(1-n)),.1)+"%"}function Ao(e,t,n){return`+${e+n*t}%`}const Io={levelFn:e=>({stats:{physPower:Ao(50,10,e),hpMax:Ao(25,5,e),lifesteal:.1+.02*e}}),rarity:2,displayName:"Vampiric Blade",orbs:12};function Oo(e){if(!e.effect&&!e.base)throw"effect or base not provided to statusEffect action, probably a bug";const t=e.effect??{};return e.base&&(t.name=e.base.name),{affects:"self",effect:t,...e,type:"statusEffect"}}const To={levelFn:e=>{const t=22+3*e;return{stats:{startingFood:e},abilities:{rest:{description:`After resting, gain [Sspeed${t}] for 20 seconds.`,actions:[Oo({effect:{isBuff:!0,displayName:"Caffeine Rush",persisting:!0,stacking:"extend",duration:2e4,stats:{[Pi.name]:t}}})]}}}},orbs:4},Ro={levelFn:e=>({stats:{physPower:Ao(60,20,e),hpMax:Ao(60,20,e),speed:-40-10*e}}),orbs:8,rarity:1,displayName:"Mega Hammer"},Mo={levelFn:e=>({stats:{physPower:Ao(7,3,e)}}),displayName:"Short Sword",orbs:1};function Lo(e){return sn({damageType:"phys",damageMulti:1,damageScaling:"auto",targetHpPct:0,targetMaxHpPct:0,extraCritChance:0,extraCritDamage:0,range:null,...e,type:"attack"})}const No={levelFn:e=>({abilities:{active:{initialCooldown:18e3+2e3*e,actions:[Lo({damageMulti:2.5+.5*e})]}},mods:[Ji]}),orbs:3,rarity:1},Do={levelFn:e=>{const t=.75+.25*e;return{description:`Attacks deal extra damage to enemies with high magic power, up to +${Math.round(100*t)}%.`,damageDealtModifier:e=>1+rn(0,3*(e.magicPower/e.basePower-1),t),stats:{magicDef:So(.1,e-1,.5),physPower:Ao(40,10,e)}}},orbs:10,rarity:2},Po={levelFn:e=>({stats:{physDef:So(.05,e-1,.1),speed:18+2*e}}),displayName:"Lightweight Armor",orbs:3},Fo={levelFn:e=>({abilities:{active:{cooldown:12e3,actions:[Lo({damageMulti:1.4+.1*e})]}},mods:[Ji]}),orbs:1},jo={levelFn:e=>({abilities:{active:{cooldown:9e3+1e3*e,description:`Attack ${3+e} times for [physAttack0.5] damage.`,actions:tn((()=>[Lo({damageMulti:.5})]),3+e)}},mods:[Ji]}),orbs:6,rarity:1},Bo={levelFn:e=>{const t=8e3+2e3*e;return{abilities:{startOfCombat:{description:`Prevent all damage taken for the first ${Math.round(t/1e3)}s of combat.`,actions:[Oo({effect:{isBuff:!0,duration:t,displayName:"Angelic Guard",stacking:"extend",stackingId:"angelicguard",stats:{damageTaken:"-100%"}}})]}}}},orbs:12,rarity:2};function $o(e={}){return{affects:"self",count:1,isBuff:!1,order:"newest",...e,type:"removeStatusEffect"}}const Uo={levelFn:e=>({stats:{startingFood:e},abilities:{rest:{description:`Cleanse ${1===e?"a debuff":e+" debuffs"} after resting.`,actions:[$o({count:e})]}}}),orbs:3},Wo={levelFn:e=>({stats:{hpMax:Ao(3,2,e),blockChance:So(.03,e-1,.1)}}),orbs:1},zo={levelFn:e=>{const t=Ao(18,2,e);return{abilities:{attacked:{description:`After attacked, gain [SphysPower${t}] and [SmagicPower${t}] for rest of combat.`,actions:[Oo({effect:{isBuff:!0,displayName:"Courage",stacking:!0,stats:{magicPower:t+"%",physPower:t+"%"}}})]}}}},orbs:8,rarity:1};function Ho(e){return{scaling:{},affects:"self",...e,type:"gainHealth"}}const qo={levelFn:e=>({mods:[Yi],abilities:{active:{initialCooldown:4e4,description:"{A0} Cleanse all debuffs. Only use this when health is below 50%.",conditions:{hpPctBelow:.5},actions:[Ho({scaling:{magicPower:2.3+.2*e}}),$o({count:"all"})]}}}),orbs:7,rarity:1},Vo={levelFn:e=>{const t=.6+.1*e;return{stats:{blockChance:So(.08,e-1,.2),magicPower:Ao(15,5,e)},abilities:{block:{description:`When you block an attack, the attacker takes [magicScaling${t}] magic damage.`,actions:[(n={damageType:"magic",scaling:{magicPower:t}},{affects:"enemy",damageType:"phys",scaling:{},range:null,ignoreDefense:!1,...n,type:"dealDamage"})]}}};var n},orbs:10,rarity:2},Go={levelFn:e=>{const t=1900+100*e;return{displayName:"Inquisitor's Mace",stats:{physPower:Ao(30,10,e)},abilities:{attackHit:{description:`After landing an attack, 20% chance to stun for ${Jt(t/1e3,1)} seconds.`,chance:.2,actions:[Oo({base:lo,affects:"enemy",effect:{stacking:"extend",stackingId:"macestun",duration:t}})]}}}},orbs:6,rarity:1},Ko={levelFn:e=>({mods:[Yi],abilities:{active:{initialCooldown:2e4,description:"{A0} Your next turn is 50% faster.",nextTurnOffset:{pct:.5},actions:[Ho({scaling:{magicPower:.7+.1*e}})]}}}),orbs:3},Yo={levelFn:e=>({stats:{hpMax:Ao(40,10,e),physDef:So(.1,e-1,.4),speed:-40-10*e}}),orbs:5,rarity:1},Xo={levelFn:e=>{const t=.65+.05*e;return{abilities:{active:{cooldown:7500+500*e,actions:[[Lo({damageType:"phys",damageMulti:t})],[Lo({damageType:"magic",damageMulti:t})]]}},mods:[Yi]}},orbs:2},Jo={levelFn:e=>{const t=1.6+.1*e;return{abilities:{active:{cooldown:2e4,description:`Gain a persisting barrier which absorbs [magicScaling${t}] damage.`,actions:[Oo({base:no,effect:{persisting:!0,params:{magicPower:t}}})]}},mods:[Yi]}},orbs:4},Zo={levelFn:e=>{const t=1+.2*e,n=t/5;return{abilities:{active:{cooldown:2e4,description:`{A0} Burn the opponent for [magicScaling${n}] magic damage per second.`,actions:[Lo({damageMulti:t,damageType:"magic"}),Oo({base:uo,affects:"enemy",effect:{displayName:"Burned",params:{damage:n}}})]}},mods:[Yi]}},orbs:7,rarity:1},Qo={levelFn:e=>{const t=.9+.1*e,n=40+10*e;return{abilities:{active:{cooldown:15e3,description:`Deal [magicAttack${t}] magic damage and reduce the opponent's speed by ${n}.`,actions:[Lo({damageMulti:t,damageScaling:"magic"}),Oo({affects:"enemy",effect:{stacking:!0,displayName:"Iced",stats:{speed:-n}}})]}},mods:[Yi]}},orbs:5,rarity:1},es={levelFn:e=>({stats:{[Ri.name]:Ao(80,20,e),[wi.name]:So(.08,e-1,.25)}}),orbs:11,rarity:2},ts={levelFn:e=>{const t=8e3+2e3*e;return{abilities:{active:{description:`Refresh your other cooldowns by ${Math.round(t/1e3)}s.`,initialCooldown:25e3,actions:[(n={amountFlat:t,excludeSelf:!0},{amountFlat:0,amountPct:0,excludeSelf:!1,...n,type:"refreshCooldowns"})]}}};var n},orbs:4,rarity:1},ns={levelFn:e=>({stats:{[Ri.name]:Ao(20,5,e),[bi.name]:Ao(20,5,e)}}),orbs:3},rs={levelFn:e=>({abilities:{active:{cooldown:5e3,actions:[Lo({damageMulti:2.25+.25*e,range:[0,1],damageType:"magic"})]}},mods:[Yi]}),orbs:2},is={levelFn:e=>({abilities:{attacked:{cooldown:Zt(25e3*Math.pow(.9,e-1),100),description:"Automatically dodge an attack.",actions:[so({cancelReason:"dodged"})]}}}),orbs:7,rarity:1},os={levelFn:e=>({abilities:{active:{cooldown:45e3,description:`Stop time for the opponent for ${8+2*e}s.`,actions:[Oo({affects:"enemy",effect:{displayName:"Stopped",duration:8e3+2e3*e,mods:[qi,Vi]}})]}},mods:[Yi]}),orbs:9,rarity:2},ss={levelFn:e=>({stats:{magicPower:Ao(7,3,e)},mods:[Ki]}),orbs:1},as={levelFn:e=>{const t={mods:[Qi]};return e>1&&(t.stats={physPower:Ao(0,10,e)}),t},orbs:3,rarity:1},cs={levelFn:e=>{const t=.8+.2*e;return{abilities:{active:{description:`{A0} This attack benefits from [ScritDamage+${100*t}%].`,cooldown:1e4+2e3*e,actions:[Lo({damageMulti:1.3,extraCritDamage:t})]}},mods:[Ji]}},orbs:3},us={levelFn:e=>({stats:{critChance:.12+.03*e},mods:[Ji]}),orbs:2};function ls(e){return{change:0,setRemaining:1,...e,type:"turnTime"}}const fs={levelFn:e=>({stats:{dodgeChance:So(.05,e-1,.2)},abilities:{dodge:{description:"Whenever you dodge an ability, act immediately.",actions:[ls({setRemaining:50})]}}}),orbs:6,rarity:1},ps={levelFn:e=>({stats:{chestLevel:Ao(15,5,e),critChance:.1+.02*e,dodgeChance:So(.02,e-1,.1)}}),orbs:7,rarity:1},hs={levelFn:e=>{const t=1.1+.2*e,n=1.7+.3*e;return{abilities:{dodge:{description:`After dodging, retaliate for [physAttack${t}]. If it crits, stun for ${n}s.`,actions:[Lo({damageMulti:t}),({results:e})=>{const t=e[0]?.data?.crit;if(t)return Oo({affects:"enemy",base:lo,effect:{duration:1e3*n}})}]}}}},orbs:12,rarity:2},ds={levelFn:e=>({stats:{critChance:.2},abilities:{crit:{description:"After landing a crit, poison the target for [physScaling0.2] phys damage per second.",actions:[Oo({base:uo,affects:"enemy",effect:{params:{damage:.2,damageType:"phys"}}})]}}}),orbs:4,rarity:1},ms={levelFn:e=>({abilities:{active:{description:"{A0} Your next turn is 50% faster.",cooldown:1e4,nextTurnOffset:{pct:.5},actions:[Lo({damageMulti:.65+.05*e})]}},mods:[Ji]}),orbs:1},gs={levelFn:e=>{const t=2+2*e;return{stats:{chestLevel:Ao(50,50,e)},abilities:{tick:{cooldown:5e3,description:`Periodically take ${t}% of max health as magic damage.`,actions:[co({scaling:{hpMax:t/100},damageType:"magic"})]}}}},orbs:0,rarity:2},vs={levelFn:e=>({stats:{dodgeChance:So(.03,e-1,.1),speed:25+5*e}}),orbs:4};Co.name="berserkersGauntlet",Co.group="fighter",Io.name="bloodSlicer",Io.group="fighter",To.name="coffeeCarafe",To.group="fighter",Ro.name="deadlyRing",Ro.group="fighter",Mo.name="fencingBoots",Mo.group="fighter",No.name="heavySlash",No.group="fighter",Do.name="mageSlayer",Do.group="fighter",Po.name="powerGlove",Po.group="fighter",Fo.name="slash",Fo.group="fighter",jo.name="swiftStrikes",jo.group="fighter",Bo.name="angelicGuard",Bo.group="paladin",Uo.name="blessedRations",Uo.group="paladin",Wo.name="buckler",Wo.group="paladin",zo.name="courage",zo.group="paladin",qo.name="greaterHeal",qo.group="paladin",Vo.name="holyShield",Vo.group="paladin",Go.name="inquisitorsMace",Go.group="paladin",Ko.name="lesserHeal",Ko.group="paladin",Yo.name="plateMail",Yo.group="paladin",Xo.name="smite",Xo.group="paladin",Jo.name="barrier",Jo.group="mage",Zo.name="fireball",Zo.group="mage",Qo.name="frostRay",Qo.group="mage",es.name="magicRing",es.group="mage",ts.name="manaPotion",ts.group="mage",ns.name="robes",ns.group="mage",rs.name="shock",rs.group="mage",is.name="teleport",is.group="mage",os.name="timeStop",os.group="mage",ss.name="wand",ss.group="mage",as.name="ambush",as.group="rogue",cs.name="backstab",cs.group="rogue",us.name="dagger",us.group="rogue",fs.name="fancyCloak",fs.group="rogue",ps.name="luckyRing",ps.group="rogue",hs.name="phantomManeuver",hs.group="rogue",ds.name="poisonKnife",ds.group="rogue",ms.name="quickAttack",ms.group="rogue",gs.name="ringOfGreed",gs.group="rogue",vs.name="thiefBoots",vs.group="rogue";const ys={fighter:{berserkersGauntlet:Co,bloodSlicer:Io,coffeeCarafe:To,deadlyRing:Ro,fencingBoots:Mo,heavySlash:No,mageSlayer:Do,powerGlove:Po,slash:Fo,swiftStrikes:jo},paladin:{angelicGuard:Bo,blessedRations:Uo,buckler:Wo,courage:zo,greaterHeal:qo,holyShield:Vo,inquisitorsMace:Go,lesserHeal:Ko,plateMail:Yo,smite:Xo},mage:{barrier:Jo,fireball:Zo,frostRay:Qo,magicRing:es,manaPotion:ts,robes:ns,shock:rs,teleport:is,timeStop:os,wand:ss},rogue:{ambush:as,backstab:cs,dagger:us,fancyCloak:fs,luckyRing:ps,phantomManeuver:hs,poisonKnife:ds,quickAttack:ms,ringOfGreed:gs,thiefBoots:vs}},bs=[{name:"common",weight:90,value:3},{name:"uncommon",weight:30,value:8},{name:"rare",weight:10,value:19}];class ws extends _o{constructor(e,t=null,n=null){if(!ys[e.group]||!ys[e.group][e.name])return void super();const r=ys[e.group][e.name],i=e.level??1;super({...r,...r.levelFn(i),orbs:r.orbs},t,n),this._itemDef=e}get baseItem(){return ys[this._itemDef.group][this._itemDef.name]??{}}get id(){return this._itemDef.id}get itemDef(){return this._itemDef}get displayName(){return this.level>1?`L${this.level} ${super.displayName}`:super.displayName}get orbs(){let e;return e=Yt.isObject(this.itemData.orbs)?this.itemData.orbs:{[this.itemData.group]:this.itemData.orbs},new ai([e,...this.applicableSlotEffects.map((e=>e.orbs??{}))])}get classes(){return this.orbs.classes}get slotBonus(){return this.owner.getEquippedSlotBonus(this.slot)}get slotTags(){return this.slotBonus?.tags??[]}get isBasic(){return!this.id}get level(){return this.itemDef.level??1}get rarityInfo(){return bs[this.baseItem.rarity??0]}get scrapValue(){return this.rarityInfo.value*(1+this.level*(this.level-1)/2)}get isMulticlass(){return this.orbs.classes.length>1}upgradeInfo(){const e={id:nn(),...this.itemDef,level:this.level+1},t=new ws(e),n=[];return n.push({type:"scrap",count:t.scrapValue-this.scrapValue}),this.level>1&&n.push({type:"item",group:this.itemDef.group,name:this.itemDef.name,count:this.level-1}),{upgradedItemDef:e,components:n}}}const _s={effect:e=>({stats:{combatXP:25*e+"%"}}),minOrbs:10},Es={effect:e=>({stats:{speed:10*e}})},xs={effect:{mods:[Wi],description:"When you attack with a signature weapon, attack with both of them if possible."},rarity:2,requires:"dualWield",minOrbs:20},Cs={slotBonus:{slotIndex:1,tags:["signatureWeapon"]},description:"Your 2nd item slot gets all the benefits of your Signature Weapon as well.",rarity:2,requires:"signatureWeapon",minOrbs:20},ks={effect:e=>({})},Ss={effect:e=>({}),minOrbs:20,upgradable:!0},As={effect:{stats:{[Si.name]:"10%"},abilities:{dodge:{description:"Whenever you dodge something, refresh your action bar.",actions:[ls({setRemaining:100})]}}},minOrbs:30,rarity:2},Is={effect:e=>{const t=20*e;return{slotEffect:{slotTag:"signatureWeapon",stats:{attackDamage:t+"%"}},description:`Your Signature Weapon deals ${t}% more damage.`,displayName:"Signature Slice"}},requires:"signatureWeapon",minOrbs:10},Os={effect:e=>({slotEffect:{slotTag:"signatureWeapon",stats:{[wi.name]:So("15%",e)}}}),requires:"signatureWeapon",minOrbs:20},Ts={effect:e=>{const t=-1*e;return{slotEffect:{slotTag:"signatureWeapon",orbs:{fighter:t}},description:`Your 1st item slot becomes your Signature Weapon. It costs [Ofighter${-t}] less to equip.`}},slotBonus:{slotIndex:0,tags:["signatureWeapon"]},rarity:1,minOrbs:1},Rs={effect:e=>({stats:{physPower:Math.ceil(ko(.2,e,5))}})},Ms={effect:e=>({})},Ls={effect:e=>({})},Ns={effect:e=>({})};_s.name="battler",_s.group="fighter",Es.name="deft",Es.group="fighter",xs.name="doubleStrike",xs.group="fighter",Cs.name="dualWield",Cs.group="fighter",ks.name="fighterorb",ks.group="fighter",Ss.name="frenzy",Ss.group="fighter",As.name="parrying",As.group="fighter",Is.name="signatureBeatdown",Is.group="fighter",Os.name="signatureSpecialist",Os.group="fighter",Ts.name="signatureWeapon",Ts.group="fighter",Rs.name="strength",Rs.group="fighter",Ms.name="mageorb",Ms.group="mage",Ls.name="paladinorb",Ls.group="paladin",Ns.name="rogueorb",Ns.group="rogue";const Ds={fighter:{battler:_s,deft:Es,doubleStrike:xs,dualWield:Cs,fighterorb:ks,frenzy:Ss,parrying:As,signatureBeatdown:Is,signatureSpecialist:Os,signatureWeapon:Ts,strength:Rs},mage:{mageorb:Ms},paladin:{paladinorb:Ls},rogue:{rogueorb:Ns}};class Ps extends yo{constructor(e,t=null,n={}){super(t,n),this._bonusDef=e}get baseDef(){return Ds[this._bonusDef.group][this._bonusDef.name]}get effectData(){const e=this.baseDef.effect;return{...Yt.isFunction(e)?e(this._bonusDef.level):e,name:this._bonusDef.name}}get level(){return this._bonusDef.level}get effectId(){return"bonus-"+this._bonusDef.name}get name(){return this._bonusDef.name}get group(){return this._bonusDef.group}get orbsData(){const e={};return e[this._bonusDef.group]=this.level,new ai(e)}get upgradable(){return Yt.isFunction(this.baseDef.effect)}get slotEffect(){return this.effectData.slotEffect??null}get slotBonus(){return this.baseDef.slotBonus??null}}class Fs{owner=null;_instances=[];constructor(e,t=null){this._owner=t;for(let n in e)for(let r in e[n])this._instances.push(new Ps({group:n,name:r,level:e[n][r]},t))}get({name:e,group:t}){return this._instances.find((n=>n.name===e&&n.group===t))}get instances(){return[...this._instances]}get levelTotal(){return this._instances.reduce(((e,t)=>e+t.level),0)}}class js extends xo{constructor(e,t={}){super(e,t),this.bonusesData=new Fs(e.bonuses,this)}get accomplishments(){return this.fighterData.accomplishments}get level(){return function(e){if(e<100)return 1;const t=Math.floor(function(e,t,n=1){return Math.log(t*e/n+1)/Math.log(1+e)}(.3,e-100,200))+2;return function(e){return e<=1?0:on(Math.round(ko(.3,e-2,200))+100,3)}(t)<=e?t:t-1}(this._fighterData.xp)}get bonuses(){return this.bonusesData.instances}get displayName(){return this.fighterData.name}get ItemClass(){return ws}get baseHp(){return e=this.level,40+Math.ceil(ko(.05,e-1,18));var e}get basePower(){return e=this.level,10+Math.ceil(ko(.05,e-1,3));var e}get baseStats(){return[{[Fi.name]:3},...this.bonuses.map((e=>e.stats))]}get baseMods(){return this.bonuses.map((e=>e.mods))}get orbs(){const e=this.bonuses.map((e=>e.orbsData.maxOrbs)),t=this.itemInstances.map((e=>e?.orbs.maxOrbs||{}));return new ai(e,t)}get effectInstances(){return[...this.bonuses,...super.effectInstances]}get shouldLevelUp(){return this.bonusesData.levelTotal<this.level}get maxFood(){return this.stats.get(Fi).value}get food(){return this._state.food??this.maxFood}set food(e){this._state.food=rn(0,e,this.maxFood)}get isLoadoutValid(){return!!this.orbs.isValid}getEquippedSlotBonus(e){return this.bonusesData.instances.find((t=>t.slotBonus?.slotIndex===e))?.slotBonus}}class Bs extends HTMLElement{_lastTick;constructor(){super(),this._time=0,this.format="M:ss"}set time(e){this._time=e||0,this.textContent=textContent}get time(){return this._time}setTimeSince(e){this.time=new Date-new Date(e)}start(){this.isRunning||(this._lastTickDatetime=new Date,requestAnimationFrame(this._tick),this.isRunning=!0)}stop(){this.isRunning=!1}_tick=()=>{if(!this.isRunning)return this.stop();if(this.isConnected){const e=new Date-this._lastTickDatetime;this.time+=e,this._lastTickDatetime=new Date}else if(new Date-this._lastTickDatetime>5e3)return this.stop();requestAnimationFrame(this._tick)}}function $s(e,t={}){t={milliseconds:!1,...t};const n=!(e>0),r=a((e=Math.abs(e))/6e4),i=a(e/1e3%60),o=a(e%1e3);let s=n?"-":"";return s+=r||"0",s+=":"+i.toString().padStart(2,"0"),t.milliseconds&&(s+="."+o.toString().padStart(2,"0")),s;function a(e){return Math.floor(Math.round(e))}}customElements.define("di-timer",Bs);const Us={baseStats:{speed:5,hpMax:"-20%",physPower:"+5%"},items:[{name:"Ambush",mods:[Qi]}]},Ws={name:"Fluttering",abilities:{attacked:{cooldown:1e4,description:"Automatically dodge an attack.",actions:[so({cancelReason:"dodged"})]}}},zs={baseStats:{speed:30,hpMax:"-40%",physPower:"-30%"},description:"A giant bat. Look, just assume everything is giant okay or else it gets ridiculous.",items:[Ws]},Hs={description:"Like a small lizard person.",baseStats:{physPower:"+10%",hpMax:"+10%",speed:20}},qs={baseStats:{physPower:"+40%",speed:-30,hpMax:"+300%"},items:[{name:"Boss",mods:[Hi]},{name:"Execute",abilities:{active:{initialCooldown:3e4,actions:[Lo({damageMulti:5})]}}}]},Vs={baseStats:{speed:-20,physDef:"+30%",hpMax:"+20%"},description:"Gelatinous"},Gs={baseStats:{speed:5,hpMax:"-45%"}},Ks={baseStats:{hpMax:"+30%",physPower:"+30%",speed:-100,physDef:"50%"},description:"Big and slow and is made of rock."},Ys={baseStats:{hpMax:"+30%",speed:-30,physPower:"-10%"},items:[{name:"Tail Sting",abilities:{active:{cooldown:12e3,description:"{A0} Poison the opponent for [physScaling0.1] phys damage per second. Lasts 10s.",actions:[Lo(),Oo({base:uo,affects:"enemy",effect:{duration:1e4,persisting:!0,params:{damage:.1,damageType:"phys"}}})]}}}]},Xs={baseStats:{hpMax:"-20%",magicPower:"+110%",physPower:"-40%"},items:[{name:"Lightning Bolt",abilities:{active:{initialCooldown:4e3,cooldown:8e3,actions:[Lo({damageMulti:2,range:[0,1],damageType:"magic"})]}}}]},Js={baseStats:{physPower:"-10%",speed:-10},items:[{name:"Web Shot",abilities:{active:{cooldown:9e3,description:"Reduce target's speed by 25. Lasts 10s.",actions:[Oo({affects:"enemy",effect:{stacking:!0,displayName:"Webbed",description:"Speed reduced.",duration:1e4,persisting:!0,stats:{speed:-25}}})]}}}]},Zs={baseStats:{hpMax:"-30%",physPower:"-30%",speed:-10},items:[{name:"Disarm",stats:{critChance:.2},abilities:{crit:{description:"After crit, disarm the opponent's slot 1 item for 10 seconds.",actions:[Oo({base:ro,affects:"enemy",effect:{duration:1e4,params:{slot:0}}})]}}},{name:"Vanish",abilities:{active:{initialCooldown:1e4,cooldown:15e3,description:"Disappear for 1 turn, then land a guaranteed crit on the next attack.",actions:[Oo({effect:{displayName:"Vanished",turns:1,stats:{dodgeChance:"100%",critChance:"100%"}}})]}}}]},Qs={baseStats:{physPower:"-70%",magicPower:"+30%",hpMax:"-50%"},items:[{name:"Wail",abilities:{active:{description:"Deal 50% of enemy's remaining health as magic damage.",uses:1,actions:[Lo({damageType:"magic",damageMulti:0,targetHpPct:.5})]}}},{name:"Incorporeal",stats:{dodgeChance:"33%"}}]},ea={baseStats:{physPower:"+120%",physDef:"+30%",speed:-30,hpMax:"+110%"},items:[{name:"Boss",mods:[Hi]},{name:"Screech",abilities:{active:{cooldown:3e4,description:"Fears the enemy, stopping them from basic attacking for 15 seconds.",actions:[Oo({affects:"enemy",effect:{duration:15e3,description:"Can't basic attack",mods:[Xi],displayName:"Terror"}})]}}}]},ta={baseStats:{physPower:"-10%",physDef:"+30%",speed:-20,hpMax:"+30%"},items:[{name:"Cursed Strike",abilities:{active:{cooldown:8e3,description:"Deal [physScaling1.2] phys damage. Inflicts a curse (more chance to be crit).",actions:[Lo({damageMulti:1.2}),Oo({affects:"enemy",effect:{displayName:"Cursed",stacking:!0,persisting:!0,duration:3e4,stats:{enemyCritChance:.1}}})]}}},{name:"Deadly Blade",stats:{critDamage:"+100%"}}]},na={baseStats:{speed:-233,physPower:"-50%",magicPower:"-99.99999%",hpMax:"-50%"},items:[{name:"Explode!",mods:[Yi],scaledStats:{scaling:{property:"hpPct"},stats:{magicPower:"+500%"}},abilities:{active:{description:"Self-destruct and deal HEAVY magic damage, increased by amount of health remaining.",actions:[[Lo({damageType:"magic"})],[co({scaling:{hp:1},damageType:"magic",ignoreDefense:!0})]]}}}]},ra={baseStats:{magicDef:"40%",physPower:"-50%",magicPower:"+80%",hpMax:"-30%",speed:-80},items:[{name:"Magic Attack",mods:[Ki]},{name:"EVIL Barrier",abilities:{active:{cooldown:12e3,description:"Gain a barrier which absorbs [magicScaling1.5] damage.",actions:[Oo({base:no,effect:{params:{magicPower:1.5}}})]}}},{name:"Death Kill Beam",abilities:{active:{initialCooldown:2e4,actions:[Lo({damageType:"magic",damageMulti:3.5})]}}}]},ia={baseStats:{hpMax:"+10%",speed:-65,physPower:"-50%",magicPower:"+10%"},items:[{name:"Magic Attack",mods:[Ki]},{name:"Skeleton Archer",abilities:{active:{cooldown:6e3,description:"Summons a skeleton archer to shoot the opponent. Shoots every 3 seconds for [magicScaling0.4] phys damage.",actions:[Oo({effect:{stacking:!1,displayName:"Skeleton Archer",description:"It's in the background so you can't hit it. (Not a cop-out or anything)",isBuff:!0,abilities:{tick:{initialCooldown:3e3,actions:[Lo({damageType:"phys",damageScaling:"magic",damageMulti:.4})]}}}})]}}}]},oa={baseStats:{physDef:"+30%",speed:-30,physPower:"-30%"},description:"You're boned"},sa={baseStats:{speed:20,physPower:"-20%"},items:[{name:"Lifesteal",stats:{lifesteal:.5}}]},aa={baseStats:{hpMax:"+60%",speed:-60,physPower:"-30%"},items:[{name:"Disease",abilities:{attackHit:{chance:.2,description:"Attacks have 20% chance to disease the enemy.",actions:[Oo({base:io,affects:"enemy"})]}}}]},ca={baseStats:{physPower:"-10%",hpMax:"-10%",speed:40}},ua={name:"Tasty",abilities:{defeated:{description:"Whoever defeats this regains 20% health.",actions:[Ho({scaling:{hpMax:.2},affects:"enemy"})]}}},la={baseStats:{hpMax:"+40%",physPower:"+10%",speed:-10},items:[ua]},fa={baseStats:{speed:15,hpMax:"+20%",physPower:"+5%",physDef:"30%"}},pa={baseStats:{hpMax:"-10%",physPower:"-50%",magicPower:"+20%",speed:55},items:[{name:"Bear Form",abilities:{active:{initialCooldown:11e3,description:"Switch to Bear Form.",uses:1,actions:[Oo({effect:{stacking:!1,mods:[Zi],displayName:"Bear Form",description:"Modified stats, can only basic attack.",stats:{hpMax:"+220%",physPower:"+220%",speed:-100}}})]}}},{name:"Regrowth",mods:[Yi],abilities:{active:{initialCooldown:3500,actions:[Ho({scaling:{magicPower:1}})]}}}]};function ha(e){return{choices:e,type:"random"}}const da=Oo({base:uo,affects:"enemy",effect:{displayName:"Burning Spores",duration:1e4,persisting:!0,params:{damage:.05}}}),ma=Oo({affects:"enemy",effect:{stacking:!0,displayName:"Slowing Spores",description:"Slowed",persisting:!0,duration:1e4,stats:{speed:-25}}}),ga=Oo({affects:"enemy",effect:{stacking:"replace",displayName:"Sleepy Spores",description:"Zzzzz",mods:[qi],duration:5e3}}),va=Oo({affects:"enemy",effect:{persisting:!0,duration:1e4,description:"Reduced phys power & max health.",stats:{physPower:"-20%",hpMax:"-20%"},stacking:!0,displayName:"Shrinking Spores"}}),ya=Oo({affects:"enemy",effect:{stacking:"replace",displayName:"Dizzy Spores",duration:1e4,persisting:!0,description:"33% chance to miss attacks.",stats:{missChance:"33%"}}}),ba=Oo({affects:"enemy",effect:{stacking:"replace",displayName:"Silence Spores",duration:1e4,persisting:!0,description:"Can only do basic attacks.",mods:[Zi]}}),wa={baseStats:{hpMax:"+80%",physPower:"-50%",magicPower:"+20%"},items:[{name:"Passive",description:"Action bar does not fill.",mods:[qi]},{name:"Regeneration",abilities:{tick:{cooldown:5e3,actions:[Ho({scaling:{magicPower:.2}})]}}},{name:"Spores",abilities:{hitByAttack:{description:"When attacked, release spores which give the attacker a random debuff.",actions:[ha([{weight:25,value:da},{weight:10,value:ma},{weight:5,value:ga},{weight:5,value:va},{weight:10,value:ya},{weight:10,value:ba}])]}}}]},_a={baseStats:{speed:50,hpMax:"-50%",physPower:"-40%",magicPower:"+40%"},items:[Ws,{name:"Magic Blast",abilities:{active:{initialCooldown:7500,actions:[Lo({damageType:"magic"})]}},mods:[Yi]}]},Ea={baseStats:{speed:-120,hpMax:"+140%",physPower:"+60%"},items:[{name:"Sprout Saplings",abilities:{startOfCombat:{mods:[Yi],uses:1,description:"At the start of combat, summon 3 saplings which each block an ability.",actions:Array(3).fill(Oo({effect:{stacking:!0,displayName:"Sapling",description:"Blocks an ability.",isBuff:!0,abilities:{targeted:{actions:[{type:"removeStack"},{type:"cancel",cancelReason:"Absorbed"}]}}}}))}}}]};function xa(e){return{name:"Bite",abilities:{active:{initialCooldown:8e3,description:"Attack for [physScaling1.5] damage. Heal for 50% of the damage dealt.",actions:[Lo({damagePct:1.5}),({results:e})=>{const t=e[0].data;if(t)return Ho({scaling:{flat:.5*t.damageDistribution.hp}})}]}},...e}}const Ca={baseStats:{physPower:"+20%",speed:-50,hpMax:"+120%"},items:[{name:"Boss",mods:[Hi]},{name:"Enrage",description:"Gain stats based on missing health.",scaledStats:{scaling:{property:"hpPct",inverted:!0},stats:{speed:60,physPower:"50%",physDef:"50%"}}},xa()]},ka={baseStats:{hpMax:"+20%",physPower:"-40%"},items:[{name:"Frenzy",abilities:{attackHit:{description:"Gain phys power and speed after landing an attack.",actions:[Oo({effect:{stacking:!0,displayName:"Frenzied",description:"Increased phys power and attack speed.",stats:{physPower:"+10%",speed:25}}})]}}}]},Sa={baseStats:{speed:30,hpMax:"-10%",physPower:"-10%"}},Aa={baseStats:{hpMax:"+120%",physPower:"+50%",magicPower:"-20%",speed:-100},items:[{name:"Withdraw",mods:[Yi],abilities:{active:{uses:1,description:"Usable only when below 50% health. Hide in shell for 10 seconds to regain health.",conditions:{hpPctBelow:.5},actions:[Oo({effect:{displayName:"Withdrawn",duration:1e4,mods:[qi],stats:{physDef:"90%",magicDef:"90%"},abilities:{tick:{cooldown:1e3,actions:[Ho({scaling:{magicPower:.5}})]}}}})]}}}]},Ia={baseStats:{physDef:"40%",speed:-20},items:[ua]};function Oa(e){return{name:"Constrict",abilities:{active:{...e,description:"Wrap the opponent up and deal [physScaling1.6] physical damage over 5 seconds.",actions:[({combat:e,owner:t})=>(t.nextTurnOffset=-5e3,Oo({affects:"enemy",effect:{duration:5e3,displayName:"Constricted",mods:[qi],abilities:{tick:{cooldown:1e3,actions:[co({scaling:{flat:.16*t.physPower}})]}}}}))]}}}}const Ta={baseStats:{physPower:"+60%",speed:-40,hpMax:"+400%"},items:[{name:"Boss",mods:[Hi]},Oa({initialCooldown:15e3,cooldown:45e3}),{name:"Multi-Attack",abilities:{active:{initialCooldown:5e3,cooldown:3e4,description:"Attack 5 times for [physAttack0.4] damage.",actions:tn((()=>[Lo({damageMulti:.5})]),5)}}},{name:"Regenerate",abilities:{tick:{initialCooldown:5e3,actions:[Ho({scaling:{magicPower:.5}})]}}}]},Ra={baseStats:{speed:70,damageTaken:"-30%"}},Ma={baseStats:{hpMax:"-30%",physPower:"+10%"},items:[{name:"Pistol Shot",abilities:{active:{initialCooldown:8e3,description:"Attack for [physScaling1.7] damage, 1/3 chance to crit.",actions:[Lo({damageMulti:1.7,extraCritChance:1/3})]}}}]},La={baseStats:{hpMax:"+30%",speed:-40},items:[{mods:[Yi],name:"Frost Breath",abilities:{active:{cooldown:2e4,description:"Deal [magicScaling2] magic damage and reduce speed by 50 for 20s.",actions:[Lo({damageType:"magic",damageMulti:2}),Oo({affects:"enemy",effect:{stacking:!0,displayName:"Iced",duration:2e4,persisting:!0,stats:{speed:-50}}})]}}}]},Na={baseStats:{speed:30},items:[{name:"Charm",abilities:{attacked:{chance:1/3,description:"1/3 chance to prevent incoming attacks.",actions:[so({cancelReason:"charmed"})]}}}]};function Da(e){return{chance:.5,...e,type:"maybe"}}const Pa={effect:{displayName:"Lightning Storm",duration:1e4,abilities:{tick:{cooldown:1e3,actions:[Da({chance:1/3}),Lo({damageType:"magic",damageMulti:.7}),Oo({affects:"enemy",base:lo,effect:{duration:1e3}})]}}}},Fa={baseStats:{magicPower:"+40%",speed:-10,hpMax:"-20%"},items:[{name:"Magic Attack",mods:[Ki]},{name:"Lightning Storm",abilities:{active:{cooldown:2e4,description:"Shoot a bunch of lightning I don't feel like explaining.",actions:[Oo(Pa)]}}}]},ja={baseStats:{hpMax:"+50%",physPower:"+30%",speed:-20},displayName:"Two-Headed Shark",items:[xa(),xa({name:"Bite Again"})]},Ba={baseStats:{magicPower:"-30%",hpMax:"-20%",speed:20},items:[{name:"Magic Attack",mods:[Ki]},{name:"Water Shield",abilities:{active:{initialCooldown:6e3,cooldown:2e4,description:"Gain a barrier with [magicScaling3] health. Magic power is doubled while the barrier is up.",actions:[Oo({base:no,effect:{displayName:"Water Shield",stacking:"replace",stats:{magicPower:"2x"},params:{magicPower:3}}})]}}},{name:"Tidal Wave",abilities:{active:{description:"Deal [magicScaling2] damage, and restore [magicScaling1] health.",initialCooldown:12e3,cooldown:2e4,actions:[Lo({damageType:"magic",damageMulti:2}),Ho({scaling:{magicPower:1}})]}}}]},$a={baseStats:{magicDef:"+30%",speed:-30,physPower:"+20%"},items:[Oa({uses:1,initialCooldown:5e3})]},Ua={baseStats:{hpMax:"+20%",physPower:"-30%",speed:20},items:[{name:"Deadly Gaze",abilities:{active:{description:"10% chance to deal magic damage equal to enemy's max health",cooldown:7500,actions:[Da({chance:.1}),Lo({targetMaxHpPct:1,damageType:"magic",damageMulti:0})]}}}]},Wa={baseStats:{physPower:"-10%",speed:-40,hpMax:"+50%"},items:[xa()]},za={name:"Boss",mods:[Hi]},Ha=Oo({base:no,effect:{displayName:"Extra Head",description:"Grants an extra attack",stacking:!1,params:{hpMax:1},stats:{attacks:1}}}),qa={baseStats:{hpMax:"-72%",physPower:"-65%",speed:-100},items:[za,{name:"Multi-Headed",abilities:{startOfCombat:{uses:1,description:"Start combat with six Extra Heads.",actions:new Array(6).fill(Ha)}}},{name:"Regenerate Head",abilities:{tick:{initialCooldown:1e4,description:"Sprout a new Extra Head.",actions:[Ha]}}}]},Va={description:"Like a big kobold.",baseStats:{physPower:"+10%",speed:20,hpMax:"+10%"}},Ga={stats:{physPower:"+30%",physDef:"+20%",speed:-30}},Ka={baseStats:{hpMax:"+60%",physPower:"+10%",speed:-20},items:[{name:"Hyper Regeneration",abilities:{tick:{initialCooldown:5e3,description:"Regenerate 15% of missing health.",actions:[Ho({scaling:{hpMissingPct:.15}})]}}}]},Ya={baseStats:{hpMax:"-50%",physPower:"-50%",speed:150},items:[{name:"Toxic Sting",mods:[Yi],abilities:{attackHit:{chance:.2,description:"Attacks have a 20% chance to inflict poison. [physScaling0.02] phys damage per second. Lasts 30s.",actions:[Oo({base:uo,affects:"enemy",effect:{persisting:!0,duration:3e4,params:{damage:.02,damageType:"phys"}}})]}}}]},Xa={duration:3e4,stackingId:"hex",stacking:"replace",persisting:!0},Ja=Oo({affects:"enemy",effect:{...Xa,displayName:"Hex: Frog",stats:{physPower:"-40%"}}}),Za=Oo({affects:"enemy",effect:{...Xa,displayName:"Hex: Cat",stats:{hpMax:"-40%",physPower:"-40%",speed:50}}}),Qa=Oo({affects:"enemy",effect:{...Xa,displayName:"Hex: Crow",stats:{physPower:"-40%",hpMax:"-40%"},abilities:{targeted:{cooldown:1e4,description:"Automatically dodge an attack.",actions:[Oo({base:oo,effect:{duration:0}})]}}}}),ec=Oo({affects:"enemy",effect:{...Xa,displayName:"Hex: Turtle",stats:{physDef:"+40%",speed:-80}}}),tc={baseStats:{hpMax:"-30%",speed:-30,magicPower:"+40%",magicDef:"+50%"},items:[{name:"Magic Attack",mods:[Ki]},{name:"Hex",abilities:{active:{description:"Transform the enemy into a random critter for 30 seconds.",initialCooldown:6e3,uses:1,actions:[ha([Ja,Za,Qa,ec])]}}}]},nc={baseStats:{magicDef:"+30%",speed:20,physPower:"+10%",magicPower:"+10%",hpMax:"+10%"},items:[Ws,{name:"Acid Breath",mods:[Yi],abilities:{active:{initialCooldown:15e3,description:"{A0} Destroys 50% of target's armor.",actions:[Lo({damageType:"magic"}),Oo({affects:"enemy",effect:{displayName:"Acidified",persisting:!0,stacking:!0,description:"Magic and phys defense reduced by half.",duration:6e4,stats:{physDef:"-50%",magicDef:"-50%"}}})]}}}]};Us.name="bandit",Us.group="caves",zs.name="bat",zs.group="caves",Hs.name="kobold",Hs.group="caves",qs.name="minotaur",qs.group="caves",Vs.name="ooze",Vs.group="caves",Gs.name="rat",Gs.group="caves",Ks.name="rockGolem",Ks.group="caves",Ys.name="scorpion",Ys.group="caves",Xs.name="sorcerer",Xs.group="caves",Js.name="spider",Js.group="caves",Zs.name="assassin",Zs.group="crypt",Qs.name="banshee",Qs.group="crypt",ea.name="boneDragon",ea.group="crypt",ta.name="deathKnight",ta.group="crypt",na.name="ghastlySkull",na.group="crypt",ra.name="lich",ra.group="crypt",ia.name="necromancer",ia.group="crypt",oa.name="skeleton",oa.group="crypt",sa.name="vampire",sa.group="crypt",aa.name="zombie",aa.group="crypt",ca.name="badger",ca.group="forest",la.name="boar",la.group="forest",fa.name="centaur",fa.group="forest",pa.name="druid",pa.group="forest",wa.name="mushroom",wa.group="forest",_a.name="sprite",_a.group="forest",Ea.name="treant",Ea.group="forest",Ca.name="tyrannosaurus",Ca.group="forest",ka.name="werewolf",ka.group="forest",Sa.name="woodElf",Sa.group="forest",Aa.name="ancientTortoise",Aa.group="waterWorld",Ia.name="crab",Ia.group="waterWorld",Ta.name="kraken",Ta.group="waterWorld",Ra.name="legallyDistinctMurloc",Ra.group="waterWorld",Ma.name="pirate",Ma.group="waterWorld",La.name="seaSerpent",La.group="waterWorld",Na.name="siren",Na.group="waterWorld",Fa.name="stormMermaid",Fa.group="waterWorld",ja.name="twoHeadedShark",ja.group="waterWorld",Ba.name="waterElemental",Ba.group="waterWorld",$a.name="anaconda",$a.group="swamp",Ua.name="basilisk",Ua.group="swamp",Wa.name="biteyPlant",Wa.group="swamp",qa.name="hydra",qa.group="swamp",Va.name="lizardPerson",Va.group="swamp",Ga.name="orc",Ga.group="swamp",Ka.name="troll",Ka.group="swamp",Ya.name="wasp",Ya.group="swamp",tc.name="witch",tc.group="swamp",nc.name="wyvern",nc.group="swamp";const rc={bandit:Us,bat:zs,kobold:Hs,minotaur:qs,ooze:Vs,rat:Gs,rockGolem:Ks,scorpion:Ys,sorcerer:Xs,spider:Js,assassin:Zs,banshee:Qs,boneDragon:ea,deathKnight:ta,ghastlySkull:na,lich:ra,necromancer:ia,skeleton:oa,vampire:sa,zombie:aa,badger:ca,boar:la,centaur:fa,druid:pa,mushroom:wa,sprite:_a,treant:Ea,tyrannosaurus:Ca,werewolf:ka,woodElf:Sa,ancientTortoise:Aa,crab:Ia,kraken:Ta,legallyDistinctMurloc:Ra,pirate:Ma,seaSerpent:La,siren:Na,stormMermaid:Fa,twoHeadedShark:ja,waterElemental:Ba,anaconda:$a,basilisk:Ua,biteyPlant:Wa,hydra:qa,lizardPerson:Va,orc:Ga,troll:Ka,wasp:Ya,witch:tc,wyvern:nc};class ic extends _o{constructor(e,t=null,n=null){let r;e instanceof ic?(r=e.itemData,t=t||e.state):r={...e},super(r,t,n)}}function oc(e){const t=(n=e,Math.floor((n-1)/10));var n;return e+2.25*Math.max(0,t-1)+(t>20?1:0)}class sc extends xo{monsterDef;constructor(e,t={}){super({description:null,baseStats:{},items:[],...rc[e.baseType],...e},t),this.monsterDef=e}get isSuper(){return!!this.monsterDef.super}get description(){return this.fighterData.description}get displayName(){return(this.isSuper?"SUPER ":"")+(this.monsterDef.displayName??Xt(this.fighterData.name))}get level(){return this._fighterData.level??1}get ItemClass(){return ic}get baseHp(){return function(e){const t=oc(e);return on(25+Math.ceil(ko(.11,t-1,18)),2)}(this.level)}get basePower(){return function(e){const t=oc(e);return on(10+Math.ceil(ko(.1,t-1,3)),2)}(this.level)}get baseStats(){const e=[this._fighterData.baseStats]??0;return this.level>50&&e.push({speed:50,cooldownReduction:"33%"}),e}get orbs(){return new ai}get xpReward(){return function(e){const t=Math.floor((e-1)/10),n=oc(e);return on(50+Math.ceil(ko(.2,n-1,20))*Math.pow(1.75,t),3)}(this.level)}get isBoss(){return this.mods.contains(Hi)}get rewards(){return this._fighterData.rewards??{}}}class ac extends HTMLElement{constructor(e=null){super(),this.innerHTML='\n<span style="text-align:center">\n  <span><span class="name"></span> <span class="subtitle level"></span></span>\n  <di-orb-row></di-orb-row>\n</span>\n<span style="text-align:center">\n  <div class="status"></div>\n  <div class="description"></div>\n</span>\n',e&&this.setAdventurer(e)}setAdventurer(e){return this.querySelector(".name").textContent=e.name,this.querySelector(".level").textContent=e.level,this.querySelector("di-orb-row").setOptions({style:3,tooltip:0}).setData(new js(e).orbs),this.setDungeonRun(e.dungeonRun),this}setDungeonRun(e){const t=this.querySelector(".status"),n=this.querySelector(".description");return e?e.finished?(t.innerHTML="",n.style.color="#4d8fc4",void(n.textContent="Finished")):(t.innerHTML=(({time:e,floor:t,room:n})=>`\nFloor ${t} - Room ${n} - ${e}\n`)({floor:e.floor,time:$s(e.virtualTime),room:e.room}),n.style.color="#000",void(n.textContent=function(){const t=e.currentEvent||e.newEvents?.at(-1)||e.events?.at(-1);return t?.monster?`Fighting: ${new sc(t.monster).displayName}`:"Exploring"}())):(t.innerHTML="",n.style.color="#888",void(n.textContent="Idle"))}}customElements.define("di-adventurer-status",ac);class cc extends HTMLElement{_floorEls=[];_dungeonRunEls={};constructor(){super(),this.innerHTML='\n<div class="runs"></div>\n';const e=this.querySelector(".runs");$t.forEach(((t,n)=>{const r=Qt((({name:e})=>`\n<div class="zone-name absolute-center-both">${e}</div>\n`)(t),{class:"zone",allowHTML:!0});r.classList.add("displaynone"),r.style.backgroundColor=t.color,r.style.backgroundImage=`url("/assets/textures/${t.texture}")`;for(let e=0;e<10;e++){const t=en({class:"floor"});this._floorEls[e+10*n]=t,r.appendChild(t)}e.appendChild(r)})),this._showZones(0)}updateRun(e){const t=e.currentEvent??e.newEvents?.at(-1);if(!t)return;if(t.runFinished)return this._runFinished(e._id);this._dungeonRunEls[e._id]||this._makeDungeonRunEl(e);const n=this._dungeonRunEls[e._id];n._tippyContent.setDungeonRun(e),n.classList.toggle("in-combat",!!t.combatID),n.floor!==e.floor&&(n.floor=e.floor,this._floorEls[e.floor-1].appendChild(n),this._showZones(Math.floor((n.floor-1)/10)));const r=e.room/function(e){if(e>50)return 50;const t=Math.floor((e-1)/10),n=e-10*t,r=10===n?2:1,i=6+(t>0?4:0);return Math.floor(r*(i+1*n))}(e.floor),i=95*Math.min(1,r);n.style.left=`${i}%`}_runFinished(e){const t=this._dungeonRunEls[e];t&&(t.remove(),delete this._dungeonRunEls[e])}_makeDungeonRunEl({_id:e,adventurer:t}){const n=en({class:["dungeon-run-dot","clickable"]}),r=new ac(t);r.appendChild(Qt("Click to watch",{class:"subtitle",elementType:"span"})),n._tippyContent=r,ni(n,{theme:"light",allowHTML:!0,content:r}),n.addEventListener("click",(()=>{window.location=`/game/dungeonrun/${e}`})),this._dungeonRunEls[e]=n}_showZones(e){this.querySelectorAll(".zone").forEach(((t,n)=>{n<=e&&t.classList.remove("displaynone")}))}}customElements.define("di-live-dungeon-map",cc);var uc=n(4940);let lc;uc.Manager,uc.Socket;const fc={};function pc(e){lc.emit("joinroom",e),fc[e]=1}(async()=>{lc=uc.connect(),lc.on("connect",(()=>{console.log("Socket connected");for(let e in fc)pc(e)})),lc.on("room joined",(e=>{console.log("Room joined",e)})),lc.on("room left",(e=>{console.log("Room left",e)}));const e=new ft(window.MAGIC_PUBLISHABLE_KEY,{extensions:[new Nt]}),t=new Bt({submitText:"Login / Signup",async:!0,action:async function(){const n=t.data().email,r=await e.auth.loginWithMagicLink({email:n});return{error:(await fetch("/user/login",{headers:new Headers({Authorization:"Bearer "+r}),withCredentials:!0,credentials:"same-origin",method:"POST"})).error}},success:()=>window.location="/game"});t.addInput({type:"email",name:"email",required:"required",placeholder:"Enter your e-mail address"}),document.querySelector(".email-login-form").appendChild(t),document.querySelectorAll(".providers-list button").forEach((t=>{t.addEventListener("click",(n=>{const r=t.getAttribute("provider");r&&async function(t){e.oauth.loginWithRedirect({provider:t,redirectURI:window.location.origin+"/oauthredirect"})}(r)}))}))})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,