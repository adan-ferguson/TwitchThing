(()=>{"use strict";const t=document.querySelector("body > #loader");class e extends HTMLFormElement{_inputs;_errorMessage;submitButton;constructor(t){super(),t={async:!1,action:"",submitText:"Submit",success:()=>{},customFetch:!1,fullscreenLoading:!1,extraData:{},html:"",...t},this.options=t,this.classList.add("di-form"),this.innerHTML=`\n<div class="inputs">${t.html}</div>\n<div class="bottom">\n  <button type="submit"></button>\n  <div class="error-message hidden"></div>\n</div>\n`,this._inputs=this.querySelector(".inputs"),this.submitButton=this.querySelector("button"),this.submitButton.textContent=t.submitText,this._errorMessage=this.querySelector(".error-message"),t.action&&this.setAttribute("action",t.action),t.async&&this.addEventListener("submit",(async e=>{e.preventDefault(),this._loading();const s=t.action instanceof Function?await t.action():await async function(t,e=null){let s,n;try{const i={method:"post",headers:{"Content-Type":"application/json"}};return e&&(i.body=JSON.stringify(e)),s=await fetch(t,i),n=await s.text(),n?JSON.parse(n):{}}catch(e){return!s||s.status>=400?n?{error:n}:{error:e||`An error occurred during fizzetch of ${t}`}:{}}}(t.action,this.data());this._loadingFinished(),s.error?this.error(s.error):(t.success(s),this.dispatchEvent(new Event("success")))}))}data(){const t=new FormData(this),e={};Array.from(t.entries()).forEach((([t,s])=>e[t]=s));let s=this.options.extraData;return s="function"==typeof s?s():s,s=s||{},{...e,...s}}addInput(t,e=null){const s=document.createElement("input");for(let e in t)s.setAttribute(e,t[e]);this._addInput(s,e)}_addInput(t,e=null){const s=document.createElement("label");if(e){const t=document.createElement("span");t.textContent=e,s.appendChild(t)}s.appendChild(t),this._inputs.appendChild(s)}addSelect(t){t={label:null,name:"",optionsList:[],...t};const e=document.createElement("label");if(e.classList.add("flex-between"),t.label){const s=document.createElement("span");s.textContent=t.label,e.appendChild(s)}const s=document.createElement("select");return s.setAttribute("name",t.name),t.optionsList.forEach((({value:t,name:e})=>{const n=document.createElement("option");n.value=t,n.textContent=e,s.appendChild(n)})),e.appendChild(s),this._inputs.appendChild(e),s}error(t){t?.message&&(t=t.message),this._errorMessage.textContent=t,this._errorMessage.classList.remove("hidden")}_loading(){if(this.options.fullscreenLoading)return function(e=""){t.querySelector(".message").textContent=e,t.classList.add("show")}(this.options.fullscreenLoading.message??"");this._errorMessage.classList.add("hidden"),this.submitButton.disabled=!0,this.submitButton.innerHTML='<span class="spin-effect">DI</span>'}_loadingFinished(){this.options.fullscreenLoading?t.classList.remove("show"):(this.submitButton.disabled=!1,this.submitButton.textContent=this.options.submitText)}}customElements.define("di-form",e,{extends:"form"});const s=new e({submitText:"Save"});s.addInput({type:"text",name:"displayname",minLength:2,maxLength:15,required:"required",placeholder:"Choose a username"}),document.querySelector(".new-user-form").appendChild(s),window.ERROR&&s.error(window.ERROR)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,